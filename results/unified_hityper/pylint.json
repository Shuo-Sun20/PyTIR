{
    "pylint": {
        "global": {
            "_catch_valueerror": {
                "unraisable": [],
                "return": [
                    "None"
                ]
            },
            "_run_pylint_config": {
                "argv": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "global": {},
            "modify_sys_path": {
                "return": [
                    "None"
                ]
            },
            "run_pylint": {
                "argv": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "run_pyreverse": {
                "argv": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "run_symilar": {
                "argv": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.__main__": {
        "global": {
            "global": {}
        }
    },
    "pylint.__pkginfo__": {
        "global": {
            "get_numversion_from_version": {
                "v": [],
                "return": [
                    "tuple"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers": {
        "global": {
            "global": {},
            "initialize": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "table_lines_from_stats": {
                "stats": [],
                "old_stats": [],
                "stat_type": [],
                "return": [
                    "list[str]"
                ]
            }
        }
    },
    "pylint.checkers.async": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "AsyncChecker": {
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_asyncfunctiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_asyncwith": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.bad_chained_comparison": {
        "BadChainedComparisonChecker": {
            "_has_diff_semantic_groups": {
                "operators": [],
                "return": [
                    "bool"
                ]
            },
            "visit_compare": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.base": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.base.basic_error_checker": {
        "BasicErrorChecker": {
            "_check_else_on_loop": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_in_loop": {
                "node": [],
                "node_name": [],
                "return": [
                    "None"
                ]
            },
            "_check_inferred_class_is_abstract": {
                "inferred": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_name_used_prior_global": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_nonlocal_and_global": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_nonlocal_without_binding": {
                "node": [],
                "name": [],
                "return": [
                    "None"
                ]
            },
            "_check_redefinition": {
                "redeftype": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_yield_outside_func": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_too_many_starred_for_tuple": {
                "assign_tuple": [],
                "return": [
                    "bool"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "same_scope": {
                "current": [],
                "return": [
                    "bool"
                ]
            },
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_break": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_continue": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_nonlocal": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_return": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_starred": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_unaryop": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_while": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_yield": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_yieldfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_get_break_loop_node": {
                "break_node": [],
                "return": [
                    "None"
                ]
            },
            "_has_abstract_methods": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_loop_exits_early": {
                "loop": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "redefined_by_decorator": {
                "node": [],
                "return": [
                    "bool"
                ]
            }
        }
    },
    "pylint.checkers.base.comparison_checker": {
        "ComparisonChecker": {
            "_check_callable_comparison": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_constants_comparison": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_literal_comparison": {
                "literal": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_logical_tautology": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_nan_comparison": {
                "left_value": [],
                "right_value": [],
                "root_node": [],
                "checking_for_absence": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_check_singleton_comparison": {
                "left_value": [],
                "right_value": [],
                "root_node": [],
                "checking_for_absence": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_check_type_x_is_y": {
                "node": [],
                "left": [],
                "right": [],
                "return": [
                    "None"
                ]
            },
            "_check_unidiomatic_typecheck": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_is_float_nan": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_nan": {
                "node": [],
                "return": []
            },
            "_is_numpy_nan": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "visit_compare": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_is_one_arg_pos_call": {
                "call": [],
                "return": [
                    "bool"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers.base.docstring_checker": {
        "DocStringChecker": {
            "_check_docstring": {
                "node_type": [],
                "node": [],
                "report_missing": [
                    "bool"
                ],
                "confidence": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_infer_dunder_doc_attribute": {
                "node": [],
                "return": [
                    "None",
                    "str"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers.base.name_checker": {
        "global": {
            "global": {}
        }
    },
    "pylint.checkers.base.name_checker.checker": {
        "NameChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_assigns_typealias": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_assigns_typevar": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_check_name": {
                "node_type": [],
                "name": [],
                "node": [],
                "confidence": [],
                "disallowed_check_only": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_check_typevar": {
                "name": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_create_naming_rules": {
                "return": [
                    "tuple[dict[, typing.Text]]"
                ]
            },
            "_find_name_group": {
                "node_type": [],
                "return": []
            },
            "_name_allowed_by_regex": {
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "_name_disallowed_by_regex": {
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "_raise_name_warning": {
                "prevalent_group": [],
                "node": [],
                "node_type": [],
                "name": [],
                "confidence": [],
                "warning": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            },
            "_recursive_check_names": {
                "args": [],
                "return": [
                    "None"
                ]
            },
            "_should_exempt_from_invalid_name": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "leave_module": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_assignname": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_determine_function_name_type": {
                "node": [],
                "config": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_get_properties": {
                "config": [],
                "return": [
                    "tuple[set[typing.Text]]"
                ]
            },
            "_is_multi_naming_match": {
                "match": [],
                "node_type": [],
                "confidence": [],
                "return": [
                    "bool"
                ]
            },
            "_redefines_import": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers.base.name_checker.naming_style": {
        "global": {
            "_create_naming_options": {
                "return": [
                    "tuple"
                ]
            },
            "global": {}
        },
        "NamingStyle": {
            "get_regex": {
                "cls": [],
                "name_type": [],
                "return": []
            }
        }
    },
    "pylint.checkers.base.pass_checker": {
        "global": {
            "global": {}
        },
        "PassChecker": {
            "visit_pass": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.base_checker": {
        "BaseChecker": {
            "__eq__": {
                "other": [],
                "return": [
                    "bool"
                ]
            },
            "__gt__": {
                "other": [],
                "return": [
                    "bool"
                ]
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "typing.Text"
                ]
            },
            "__str__": {
                "return": []
            },
            "add_message": {
                "msgid": [],
                "line": [
                    "None"
                ],
                "node": [
                    "None"
                ],
                "args": [
                    "None"
                ],
                "confidence": [
                    "None"
                ],
                "col_offset": [
                    "None"
                ],
                "end_lineno": [
                    "None"
                ],
                "end_col_offset": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "check_consistency": {
                "return": [
                    "None"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "create_message_definition_from_tuple": {
                "msgid": [],
                "msg_tuple": [],
                "return": [
                    "MessageDefinition"
                ]
            },
            "get_full_documentation": {
                "msgs": [],
                "options": [],
                "reports": [],
                "doc": [
                    "None"
                ],
                "module": [
                    "None"
                ],
                "show_options": [
                    "bool"
                ],
                "return": [
                    "typing.Text"
                ]
            },
            "get_map_data": {
                "return": [
                    "None"
                ]
            },
            "messages": {
                "return": [
                    "list"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "reduce_map_data": {
                "linter": [],
                "data": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        },
        "BaseRawFileChecker": {
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "BaseTokenChecker": {
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.classes": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.classes.special_methods_checker": {
        "SpecialMethodsChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_bool": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_bytes": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_format": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_getnewargs": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_getnewargs_ex": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_hash": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_index": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_iter": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_len": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_length_hint": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_repr": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_str": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "_check_unexpected_method_signature": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_is_bool": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_bytes": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_dict": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_int": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_iterator": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_str": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_tuple": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_wrapped_type": {
                "node": [],
                "type_": [],
                "return": [
                    "bool"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_safe_infer_call_result": {
                "node": [],
                "caller": [],
                "context": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers.dataclass_checker": {
        "DataclassChecker": {
            "_check_invalid_field_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_invalid_field_call_within_call": {
                "node": [],
                "scope_node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_check_name_or_attrname_eq_to": {
                "node": [],
                "check_with": [],
                "return": [
                    "bool"
                ]
            },
            "_is_dataclasses_module": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.deprecated": {
        "DeprecatedMixin": {
            "check_deprecated_attribute": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "check_deprecated_class": {
                "node": [],
                "mod_name": [],
                "class_names": [],
                "return": [
                    "None"
                ]
            },
            "check_deprecated_class_in_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "check_deprecated_method": {
                "node": [],
                "inferred": [],
                "return": [
                    "None"
                ]
            },
            "check_deprecated_module": {
                "node": [],
                "mod_path": [],
                "return": [
                    "None"
                ]
            },
            "deprecated_arguments": {
                "method": [],
                "return": [
                    "tuple"
                ]
            },
            "deprecated_attributes": {
                "return": [
                    "tuple"
                ]
            },
            "deprecated_classes": {
                "module": [],
                "return": [
                    "tuple"
                ]
            },
            "deprecated_decorators": {
                "return": [
                    "tuple"
                ]
            },
            "deprecated_methods": {
                "return": [
                    "tuple"
                ]
            },
            "deprecated_modules": {
                "return": [
                    "tuple"
                ]
            },
            "visit_attribute": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_decorators": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.checkers.design_analysis": {
        "MisdesignChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_boolean_expressions": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_inc_all_stmts": {
                "amount": [],
                "return": [
                    "None"
                ]
            },
            "_inc_branch": {
                "node": [],
                "branchesnum": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "leave_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "leave_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_default": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_return": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "visit_try": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_while": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_count_boolean_expressions": {
                "bool_op": [],
                "return": [
                    "int"
                ]
            },
            "_count_methods_in_class": {
                "node": [],
                "return": [
                    "int"
                ]
            },
            "_get_parents": {
                "node": [],
                "ignored_parents": [],
                "return": [
                    "set"
                ]
            },
            "_get_parents_iter": {
                "node": [],
                "ignored_parents": [],
                "return": [
                    "typing.Generator[list]"
                ]
            },
            "_is_exempt_from_public_methods": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.dunder_methods": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "DunderCallChecker": {
            "is_lambda_rule_exception": {
                "ancestor": [],
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "within_dunder_or_lambda_def": {
                "node": [],
                "return": [
                    "bool"
                ]
            }
        }
    },
    "pylint.checkers.ellipsis_checker": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "EllipsisChecker": {
            "visit_const": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.format": {
        "FormatChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_keyword_parentheses": {
                "tokens": [],
                "start": [],
                "return": [
                    "None"
                ]
            },
            "_check_line_ending": {
                "line_ending": [],
                "line_num": [],
                "return": [
                    "None"
                ]
            },
            "_check_multi_statement_line": {
                "node": [],
                "line": [],
                "return": [
                    "None"
                ]
            },
            "_infer_else_finally_line_number": {
                "node": [],
                "parent": [],
                "return": [
                    "int"
                ]
            },
            "_is_first_node_in_else_finally_body": {
                "node": [],
                "parent": [],
                "return": [
                    "bool"
                ]
            },
            "check_indent_level": {
                "string": [],
                "expected": [],
                "line_num": [],
                "return": [
                    "None"
                ]
            },
            "check_line_length": {
                "line": [],
                "i": [],
                "checker_off": [],
                "return": [
                    "None"
                ]
            },
            "check_lines": {
                "tokens": [],
                "line_start": [],
                "lines": [],
                "lineno": [],
                "return": [
                    "None"
                ]
            },
            "check_trailing_whitespace_ending": {
                "line": [],
                "i": [],
                "return": [
                    "None"
                ]
            },
            "is_line_length_check_activated": {
                "pylint_pattern_match_object": [],
                "return": [
                    "bool"
                ]
            },
            "new_line": {
                "tokens": [],
                "line_end": [],
                "line_start": [],
                "return": [
                    "None"
                ]
            },
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "remove_pylint_option_from_lines": {
                "options_pattern_obj": [],
                "return": []
            },
            "specific_splitlines": {
                "lines": [],
                "return": [
                    "list"
                ]
            },
            "visit_default": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "TokenWrapper": {
            "__init__": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "line": {
                "idx": [],
                "return": []
            },
            "start_col": {
                "idx": [],
                "return": []
            },
            "start_line": {
                "idx": [],
                "return": []
            },
            "token": {
                "idx": [],
                "return": []
            },
            "type": {
                "idx": [],
                "return": []
            }
        },
        "global": {
            "_last_token_on_line_is": {
                "tokens": [],
                "line_end": [],
                "token": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.imports": {
        "ImportsChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_add_imported_module": {
                "node": [],
                "importedmodname": [],
                "return": [
                    "None"
                ]
            },
            "_check_import_as_rename": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_imports_order": {
                "_module_node": [],
                "return": [
                    "tuple[list[tuple]]"
                ]
            },
            "_check_misplaced_future": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_position": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_preferred_module": {
                "node": [],
                "mod_path": [],
                "return": [
                    "None"
                ]
            },
            "_check_reimport": {
                "node": [],
                "basename": [
                    "None"
                ],
                "level": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_check_same_line_imports": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_toplevel": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_wildcard_imports": {
                "node": [],
                "imported_module": [],
                "return": [
                    "None"
                ]
            },
            "_external_dependencies_info": {
                "return": []
            },
            "_filter_dependencies_graph": {
                "internal": [],
                "return": []
            },
            "_get_full_import_name": {
                "importNode": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_get_imported_module": {
                "importnode": [],
                "modname": [],
                "return": [
                    "None"
                ]
            },
            "_get_out_of_order_string": {
                "third_party_imports": [],
                "first_party_imports": [],
                "local_imports": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_import_graph_without_ignored_edges": {
                "return": []
            },
            "_internal_dependencies_info": {
                "return": []
            },
            "_is_fallback_import": {
                "node": [],
                "imports": [],
                "return": [
                    "bool"
                ]
            },
            "_record_import": {
                "node": [],
                "importedmodnode": [],
                "return": [
                    "None"
                ]
            },
            "_report_dependencies_graph": {
                "sect": [],
                "_": [],
                "_dummy": [],
                "return": [
                    "None"
                ]
            },
            "_report_external_dependencies": {
                "sect": [],
                "_": [],
                "_dummy": [],
                "return": [
                    "None"
                ]
            },
            "_wildcard_import_is_allowed": {
                "imported_module": [],
                "return": [
                    "bool"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "compute_first_non_import_node": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "deprecated_modules": {
                "return": [
                    "set"
                ]
            },
            "get_map_data": {
                "return": [
                    "tuple"
                ]
            },
            "leave_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "reduce_map_data": {
                "linter": [],
                "data": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_dependencies_graph": {
                "filename": [],
                "dep_info": [],
                "return": []
            },
            "_get_first_import": {
                "node": [],
                "context": [],
                "name": [],
                "base": [],
                "level": [],
                "alias": [],
                "return": [
                    "tuple[typing.Union[node,nodes_@_ImportFrom,nodes_@_Import,typing.Text]]",
                    "tuple[None]"
                ]
            },
            "_ignore_import_failure": {
                "node": [],
                "modname": [],
                "ignored_modules": [],
                "return": [
                    "bool"
                ]
            },
            "_make_graph": {
                "filename": [],
                "dep_info": [],
                "sect": [],
                "gtype": [],
                "return": [
                    "None"
                ]
            },
            "_make_tree_defs": {
                "mod_files_list": [],
                "return": [
                    "dict"
                ]
            },
            "_repr_tree_defs": {
                "data": [],
                "indent_str": [
                    "None"
                ],
                "return": [
                    "str"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.lambda_expressions": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "LambdaExpressionChecker": {
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_namedexpr": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.logging": {
        "LoggingChecker": {
            "_check_call_func": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_format_string": {
                "node": [],
                "format_arg": [],
                "return": [
                    "None"
                ]
            },
            "_check_log_method": {
                "node": [],
                "name": [],
                "return": [
                    "None"
                ]
            },
            "_helper_string": {
                "node": [],
                "return": [
                    "str"
                ]
            },
            "_is_node_explicit_str_concatenation": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_operand_literal_str": {
                "operand": [],
                "return": [
                    "bool"
                ]
            },
            "is_logger_class": {
                "return": [
                    "tuple[bool]",
                    "tuple[typing.Optional[bool]]"
                ]
            },
            "is_logging_name": {
                "return": [
                    "bool"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "_": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_count_supplied_tokens": {
                "args": [],
                "return": [
                    "int"
                ]
            },
            "global": {},
            "is_complex_format_str": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_method_call": {
                "func": [],
                "types": [
                    "tuple"
                ],
                "methods": [
                    "tuple"
                ],
                "return": [
                    "bool"
                ]
            },
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "str_formatting_in_f_string": {
                "node": [],
                "return": [
                    "bool"
                ]
            }
        }
    },
    "pylint.checkers.method_args": {
        "MethodArgsChecker": {
            "_check_missing_timeout": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_positional_only_arguments_expected": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.misc": {
        "EncodingChecker": {
            "_check_encoding": {
                "lineno": [],
                "line": [],
                "file_encoding": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            }
        },
        "ByIdManagedMessagesChecker": {
            "_clear_by_id_managed_msgs": {
                "return": [
                    "None"
                ]
            },
            "_get_by_id_managed_msgs": {
                "return": []
            },
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.modified_iterating_checker": {
        "ModifiedIterationChecker": {
            "_common_cond_list_set": {
                "node": [],
                "iter_obj": [],
                "infer_val": [],
                "return": [
                    "bool"
                ]
            },
            "_deleted_iteration_target_cond": {
                "node": [],
                "iter_obj": [],
                "return": [
                    "bool"
                ]
            },
            "_is_node_assigns_subscript_name": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_node_expr_that_calls_attribute_name": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_modified_iterating_check": {
                "node": [],
                "iter_obj": [],
                "return": [
                    "None"
                ]
            },
            "_modified_iterating_check_on_node_and_children": {
                "body_node": [],
                "iter_obj": [],
                "return": [
                    "None"
                ]
            },
            "_modified_iterating_dict_cond": {
                "node": [],
                "iter_obj": [],
                "return": [
                    "bool"
                ]
            },
            "_modified_iterating_list_cond": {
                "node": [],
                "iter_obj": [],
                "return": [
                    "bool"
                ]
            },
            "_modified_iterating_set_cond": {
                "node": [],
                "iter_obj": [],
                "return": [
                    "bool"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.nested_min_max": {
        "NestedMinMaxChecker": {
            "_is_splattable_expression": {
                "arg": [],
                "return": [
                    "bool"
                ]
            },
            "get_redundant_calls": {
                "cls": [],
                "node": [],
                "return": [
                    "list"
                ]
            },
            "is_min_max_call": {
                "cls": [],
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.newstyle": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "NewStyleConflictChecker": {
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.non_ascii_names": {
        "NonAsciiNameChecker": {
            "_check_module_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_name": {
                "node_type": [],
                "name": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_assignname": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_global": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.raw_metrics": {
        "global": {
            "get_type": {
                "tokens": [],
                "start_index": [],
                "return": [
                    "tuple[typing.Text]"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "report_raw_stats": {
                "sect": [],
                "stats": [],
                "old_stats": [],
                "return": [
                    "None"
                ]
            }
        },
        "RawMetricsChecker": {
            "open": {
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.refactoring": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.refactoring.implicit_booleaness_checker": {
        "ImplicitBooleanessChecker": {
            "_check_compare_to_str_or_zero": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_use_implicit_booleaness_not_comparison": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_get_node_description": {
                "node": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_implicit_booleaness_message_args": {
                "literal_node": [],
                "operator": [],
                "target_node": [],
                "return": [
                    "tuple[typing.Text]"
                ]
            },
            "base_names_of_instance": {
                "node": [],
                "return": [
                    "list"
                ]
            },
            "instance_has_bool": {
                "class_def": [],
                "return": [
                    "bool"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_compare": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_unaryop": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_is_constant_zero": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers.refactoring.not_checker": {
        "global": {
            "global": {}
        },
        "NotChecker": {
            "visit_unaryop": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.refactoring.recommendation_checker": {
        "RecommendationChecker": {
            "_check_consider_iterating_dictionary": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_dict_items": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_dict_items_comprehension": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_enumerate": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_use_maxsplit_arg": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_use_sequence_for_iteration": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_detect_replacable_format_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_is_builtin": {
                "node": [],
                "function": [],
                "return": [
                    "bool"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_comprehension": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_const": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.checkers.refactoring.refactoring_checker": {
        "RefactoringChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_and_or_ternary_arguments": {
                "node": [],
                "return": [
                    "tuple"
                ]
            },
            "_append_context_managers_to_stack": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_apply_boolean_simplification_rules": {
                "operator": [],
                "values": [],
                "return": [
                    "list"
                ]
            },
            "_check_chained_comparison": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_get": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_merging_isinstance": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_comprehension_constructor": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_generator": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_in": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_join": {
                "aug_assign": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_min_max_builtin": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consider_using_with": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_consistent_returns": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_exception_inherit_from_stopiteration": {
                "exc": [],
                "return": [
                    "bool"
                ]
            },
            "_check_nested_blocks": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_quit_exit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_raising_stopiteration_in_generator_next_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_redefined_argument_from_local": {
                "name_node": [],
                "return": [
                    "None"
                ]
            },
            "_check_return_at_the_end": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_simplifiable_condition": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_simplifiable_if": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_simplifiable_ifexp": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_stop_iteration_inside_generator": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_super_with_arguments": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_superfluous_else": {
                "node": [],
                "msg_id": [],
                "returning_node_class": [],
                "return": [
                    "None"
                ]
            },
            "_check_superfluous_else_break": {
                "node": [],
                "return": []
            },
            "_check_superfluous_else_continue": {
                "node": [],
                "return": []
            },
            "_check_superfluous_else_raise": {
                "node": [],
                "return": []
            },
            "_check_superfluous_else_return": {
                "node": [],
                "return": []
            },
            "_check_swap_variables": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_unnecessary_comprehension": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_unnecessary_dict_index_lookup": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_unnecessary_list_index_lookup": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_use_dict_literal": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_use_list_literal": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_dict_literal_suggestion": {
                "node": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_dummy_rgx": {
                "return": []
            },
            "_duplicated_isinstance_types": {
                "node": [],
                "return": [
                    "dict"
                ]
            },
            "_emit_consider_using_with_if_needed": {
                "stack": [],
                "return": [
                    "None"
                ]
            },
            "_emit_nested_blocks_message_if_needed": {
                "nested_blocks": [],
                "return": [
                    "None"
                ]
            },
            "_enumerate_with_start": {
                "node": [],
                "return": [
                    "tuple[bool]"
                ]
            },
            "_find_lower_upper_bounds": {
                "comparison_node": [],
                "uses": [],
                "return": [
                    "None"
                ]
            },
            "_get_start_value": {
                "node": [],
                "return": [
                    "tuple[None]",
                    "tuple"
                ]
            },
            "_has_exit_in_scope": {
                "scope": [],
                "return": [
                    "bool"
                ]
            },
            "_has_return_in_siblings": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_init": {
                "return": [
                    "None"
                ]
            },
            "_is_actual_elif": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_and_or_ternary": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_bool_const": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_dict_get_block": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_function_def_never_returning": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_if_node_return_ended": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_node_return_ended": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_raise_node_return_ended": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_simple_assignment": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_looks_like_infinite_iterator": {
                "param": [],
                "return": [
                    "bool"
                ]
            },
            "_name_to_concatenate": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_simplify_boolean_operation": {
                "bool_op": [],
                "return": []
            },
            "_type_and_name_are_equal": {
                "node_a": [],
                "node_b": [],
                "return": [
                    "bool"
                ]
            },
            "get_node_name": {
                "node": [],
                "return": [
                    "str"
                ]
            },
            "leave_classdef": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "leave_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "leave_module": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_augassign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_boolop": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_comprehension": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_excepthandler": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_ifexp": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_raise": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_return": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_try": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_with": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_yield": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "ConsiderUsingWithStack": {
            "__iter__": {
                "return": [
                    "typing.Generator[tuple]"
                ]
            },
            "clear_all": {
                "return": [
                    "None"
                ]
            },
            "get_stack_for_frame": {
                "frame": [],
                "return": []
            }
        },
        "global": {
            "_except_statement_is_always_returning": {
                "node": [],
                "returning_node_class": [],
                "return": [
                    "bool"
                ]
            },
            "_if_statement_is_always_returning": {
                "if_node": [],
                "returning_node_class": [],
                "return": [
                    "bool"
                ]
            },
            "_is_a_return_statement": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_inside_context_manager": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_part_of_assignment_target": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_part_of_with_items": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_is_trailing_comma": {
                "tokens": [],
                "index": [],
                "return": [
                    "bool"
                ]
            },
            "_will_be_released_automatically": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "get_curline_index_start": {
                "return": [
                    "int"
                ]
            },
            "global": {}
        }
    },
    "pylint.checkers.spelling": {
        "SpellingChecker": {
            "_check_docstring": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_spelling": {
                "msgid": [],
                "line": [],
                "line_num": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_get_enchant_dict_choices": {
                "inner_enchant_dicts": [],
                "return": [
                    "list[typing.Text]"
                ]
            },
            "_get_enchant_dict_help": {
                "inner_enchant_dicts": [],
                "pyenchant_available": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_get_enchant_dicts": {
                "return": [
                    "list"
                ]
            },
            "_strip_code_flanked_in_backticks": {
                "line": [],
                "return": []
            },
            "get_tokenizer": {
                "tag": [
                    "None"
                ],
                "chunkers": [
                    "None"
                ],
                "filters": [
                    "None"
                ],
                "return": [
                    "Filter"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "replace_code_but_leave_surrounding_characters": {
                "match_obj": [],
                "return": []
            }
        },
        "ForwardSlashChunker": {
            "_next": {
                "return": [
                    "tuple[int]"
                ]
            },
            "next": {
                "return": [
                    "tuple[int]",
                    "tuple[typing.Union[typing.Text,int]]"
                ]
            }
        },
        "Filter": {
            "_skip": {
                "word": [],
                "return": [
                    "None"
                ]
            }
        },
        "RegExFilter": {
            "_skip": {
                "word": [],
                "return": [
                    "bool"
                ]
            }
        },
        "WordsWithDigitsFilter": {
            "_skip": {
                "word": [],
                "return": [
                    "bool"
                ]
            }
        },
        "WordsWithUnderscores": {
            "_skip": {
                "word": [],
                "return": [
                    "bool"
                ]
            }
        }
    },
    "pylint.checkers.stdlib": {
        "StdlibChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_bad_thread_instantiation": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_datetime": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_dispatch_decorators": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_env_function": {
                "node": [],
                "infer": [],
                "return": [
                    "None"
                ]
            },
            "_check_for_check_kw_in_run": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_for_preexec_fn_in_popen": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_invalid_envvar_value": {
                "node": [],
                "infer": [],
                "message": [],
                "call_arg": [],
                "allow_none": [],
                "return": [
                    "None"
                ]
            },
            "_check_lru_cache_decorators": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_open_call": {
                "node": [],
                "open_module": [],
                "func_name": [],
                "return": [
                    "None"
                ]
            },
            "_check_redundant_assert": {
                "node": [],
                "infer": [],
                "return": [
                    "None"
                ]
            },
            "_check_shallow_copy_environ": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "deprecated_arguments": {
                "method": [],
                "return": []
            },
            "deprecated_attributes": {
                "return": []
            },
            "deprecated_classes": {
                "module": [],
                "return": []
            },
            "deprecated_decorators": {
                "return": []
            },
            "deprecated_methods": {
                "return": []
            },
            "visit_boolop": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_ifexp": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_unaryop": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_check_mode_str": {
                "mode": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.strings": {
        "StringConstantChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_detect_u_string_prefix": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_find_next_token": {
                "index": [],
                "tokens": [],
                "ignore": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "_find_prev_token": {
                "index": [],
                "tokens": [],
                "ignore": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "_is_initial_string_token": {
                "index": [],
                "tokens": [],
                "return": [
                    "bool"
                ]
            },
            "_is_parenthesized": {
                "index": [],
                "tokens": [],
                "return": [
                    "bool"
                ]
            },
            "check_for_concatenated_strings": {
                "elements": [],
                "iterable_type": [],
                "return": [
                    "None"
                ]
            },
            "check_for_consistent_string_delimiters": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "process_non_raw_string_token": {
                "prefix": [],
                "string_body": [],
                "start_row": [],
                "string_start_col": [],
                "return": [
                    "None"
                ]
            },
            "process_string_token": {
                "token": [],
                "start_row": [],
                "start_col": [],
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_const": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_list": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_set": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_tuple": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "StringFormatChecker": {
            "_check_interpolation": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_new_format": {
                "node": [],
                "func": [],
                "return": [
                    "None"
                ]
            },
            "_check_new_format_specifiers": {
                "node": [],
                "fields": [],
                "named": [],
                "return": [
                    "None"
                ]
            },
            "_detect_vacuous_formatting": {
                "node": [],
                "positional_arguments": [],
                "return": [
                    "None"
                ]
            },
            "visit_binop": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_joinedstr": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_get_quote_delimiter": {
                "string_token": [],
                "return": []
            },
            "_is_long_string": {
                "string_token": [],
                "return": [
                    "bool"
                ]
            },
            "_is_quote_delimiter_chosen_freely": {
                "string_token": [],
                "return": [
                    "bool"
                ]
            },
            "arg_matches_format_type": {
                "arg_type": [],
                "format_type": [],
                "return": [
                    "bool"
                ]
            },
            "get_access_path": {
                "key": [],
                "parts": [],
                "return": [
                    "str"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "str_eval": {
                "token": [],
                "return": []
            }
        }
    },
    "pylint.checkers.threading_checker": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "ThreadingChecker": {
            "visit_with": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.unicode": {
        "global": {
            "_byte_to_str_length": {
                "codec": [],
                "return": [
                    "int"
                ]
            },
            "_cached_encode_search": {
                "string": [],
                "encoding": [],
                "return": []
            },
            "_encode_without_bom": {
                "string": [],
                "encoding": [],
                "return": []
            },
            "_fix_utf16_32_line_stream": {
                "steam": [],
                "codec": [],
                "return": [
                    "typing.Generator",
                    "typing.Generator[bytes]"
                ]
            },
            "_line_length": {
                "line": [],
                "codec": [],
                "return": [
                    "int"
                ]
            },
            "_map_positions_to_result": {
                "line": [],
                "search_dict": [],
                "new_line": [],
                "byte_str_length": [
                    "int"
                ],
                "return": [
                    "dict[int, ]"
                ]
            },
            "_normalize_codec_name": {
                "codec": [],
                "return": []
            },
            "_remove_bom": {
                "encoded": [],
                "encoding": [],
                "return": []
            },
            "extract_codec_from_bom": {
                "first_line": [],
                "return": []
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "UnicodeChecker": {
            "_check_bidi_chars": {
                "line": [],
                "lineno": [],
                "codec": [],
                "return": [
                    "None"
                ]
            },
            "_check_codec": {
                "codec": [],
                "codec_definition_line": [],
                "return": [
                    "None"
                ]
            },
            "_check_invalid_chars": {
                "line": [],
                "lineno": [],
                "codec": [],
                "return": [
                    "None"
                ]
            },
            "_determine_codec": {
                "stream": [],
                "return": [
                    "tuple[int]"
                ]
            },
            "_find_line_matches": {
                "cls": [],
                "line": [],
                "codec": [],
                "return": []
            },
            "_is_invalid_codec": {
                "codec": [],
                "return": [
                    "bool"
                ]
            },
            "_is_unicode": {
                "codec": [],
                "return": [
                    "bool"
                ]
            },
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "_BadChar": {
            "description": {
                "return": [
                    "typing.Text"
                ]
            },
            "human_code": {
                "return": [
                    "typing.Text"
                ]
            }
        }
    },
    "pylint.checkers.unsupported_version": {
        "UnsupportedVersionChecker": {
            "_check_typing_final": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_arguments": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_decorators": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_excepthandler": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_joinedstr": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_namedexpr": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_raise": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_trystar": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_typealias": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_typevar": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_typevartuple": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.checkers.utils": {
        "UnsupportedFormatCharacter": {
            "__init__": {
                "index": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_except_handlers_ignores_exceptions": {
                "handlers": [],
                "exceptions": [],
                "return": [
                    "bool"
                ]
            },
            "_get_python_type_of_node": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_is_abstract_class_name": {
                "name": [],
                "return": []
            },
            "_is_property_decorator": {
                "decorator": [],
                "return": [
                    "bool"
                ]
            },
            "_is_property_kind": {
                "node": [],
                "kinds": [],
                "return": [
                    "bool"
                ]
            },
            "_is_target_name_in_binop_side": {
                "target": [],
                "side": [],
                "return": [
                    "bool"
                ]
            },
            "_qualified_name_parts": {
                "qualified_module_name": [],
                "return": [
                    "list[str]"
                ]
            },
            "_supports_async_iteration_protocol": {
                "value": [],
                "return": []
            },
            "_supports_delitem_protocol": {
                "value": [],
                "return": []
            },
            "_supports_getitem_protocol": {
                "value": [],
                "return": []
            },
            "_supports_iteration_protocol": {
                "value": [],
                "return": []
            },
            "_supports_mapping_protocol": {
                "value": [],
                "return": []
            },
            "_supports_membership_test_protocol": {
                "value": [],
                "return": []
            },
            "_supports_protocol": {
                "value": [],
                "protocol_callback": [],
                "return": [
                    "bool"
                ]
            },
            "_supports_protocol_method": {
                "value": [],
                "attr": [],
                "return": [
                    "bool"
                ]
            },
            "_supports_setitem_protocol": {
                "value": [],
                "return": []
            },
            "_suppresses_exception": {
                "call": [],
                "exception": [
                    "Exception"
                ],
                "return": [
                    "bool"
                ]
            },
            "assign_parent": {
                "node": [],
                "return": []
            },
            "assigned_bool": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "class_constructors_are_ambiguous": {
                "class1": [],
                "class2": [],
                "return": [
                    "bool"
                ]
            },
            "class_is_abstract": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "clear_lru_caches": {
                "return": [
                    "None"
                ]
            },
            "collect_string_fields": {
                "format_string": [],
                "return": [
                    "typing.Generator",
                    "typing.Generator[typing.Text]",
                    "None"
                ]
            },
            "decorated_with": {
                "func": [],
                "qnames": [],
                "return": [
                    "bool"
                ]
            },
            "decorated_with_property": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "defnode_in_scope": {
                "var_node": [],
                "varname": [],
                "scope": [],
                "return": [
                    "nodes_@_AssignName",
                    "None"
                ]
            },
            "error_of_type": {
                "handler": [],
                "error_type": [],
                "return": [
                    "bool"
                ]
            },
            "find_assigned_names_recursive": {
                "target": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "find_except_wrapper_node_in_scope": {
                "node": [],
                "return": [
                    "None",
                    "nodes_@_ExceptHandler"
                ]
            },
            "find_inferred_fn_from_register": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "find_try_except_wrapper_node": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "function_arguments_are_ambiguous": {
                "func1": [],
                "func2": [],
                "return": [
                    "bool"
                ]
            },
            "get_all_elements": {
                "node": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "get_argument_from_call": {
                "call_node": [],
                "position": [
                    "None"
                ],
                "keyword": [
                    "None"
                ],
                "return": []
            },
            "get_contextlib_suppressors": {
                "node": [],
                "exception": [
                    "Exception"
                ],
                "return": [
                    "typing.Generator"
                ]
            },
            "get_contextlib_with_statements": {
                "node": [],
                "return": [
                    "typing.Generator[nodes_@_With]"
                ]
            },
            "get_exception_handlers": {
                "node": [],
                "exception": [
                    "Exception"
                ],
                "return": [
                    "list"
                ]
            },
            "get_import_name": {
                "importnode": [],
                "modname": [],
                "return": []
            },
            "get_inverse_comparator": {
                "op": [],
                "return": [
                    "typing.Text"
                ]
            },
            "get_iterating_dictionary_name": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "get_node_first_ancestor_of_type": {
                "node": [],
                "ancestor_type": [],
                "return": [
                    "ancestor_type",
                    "None"
                ]
            },
            "get_node_first_ancestor_of_type_and_its_child": {
                "node": [],
                "ancestor_type": [],
                "return": [
                    "tuple[ancestor_type]",
                    "tuple[None]"
                ]
            },
            "get_node_last_lineno": {
                "node": [],
                "return": []
            },
            "get_outer_class": {
                "class_node": [],
                "return": [
                    "astroid_@_ClassDef",
                    "None"
                ]
            },
            "get_subscript_const_value": {
                "node": [],
                "return": []
            },
            "global": {},
            "has_known_bases": {
                "klass": [],
                "context": [
                    "None"
                ],
                "return": [
                    "bool"
                ]
            },
            "has_starred_node_recursive": {
                "node": [],
                "return": [
                    "typing.Generator[bool]",
                    "typing.Generator"
                ]
            },
            "in_for_else_branch": {
                "parent": [],
                "stmt": [],
                "return": [
                    "bool"
                ]
            },
            "in_type_checking_block": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "infer_all": {
                "node": [],
                "context": [
                    "None"
                ],
                "return": [
                    "list"
                ]
            },
            "infer_kwarg_from_call": {
                "call_node": [],
                "keyword": [],
                "return": [
                    "None"
                ]
            },
            "inherit_from_std_ex": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_ancestor_name": {
                "frame": [],
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_assign_name_annotated_with": {
                "node": [],
                "typing_name": [],
                "return": [
                    "bool"
                ]
            },
            "is_attr_private": {
                "attrname": [],
                "return": []
            },
            "is_attr_protected": {
                "attrname": [],
                "return": [
                    "bool"
                ]
            },
            "is_attribute_typed_annotation": {
                "node": [],
                "attr_name": [],
                "return": [
                    "bool"
                ]
            },
            "is_augmented_assign": {
                "node": [],
                "return": [
                    "tuple[typing.Union[bool,typing.Text]]",
                    "tuple[bool]"
                ]
            },
            "is_base_container": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_being_called": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_builtin": {
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "is_builtin_object": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_call_of_name": {
                "node": [],
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "is_class_attr": {
                "name": [],
                "klass": [],
                "return": [
                    "bool"
                ]
            },
            "is_classdef_type": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_comprehension": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_default_argument": {
                "node": [],
                "scope": [
                    "None"
                ],
                "return": [
                    "bool"
                ]
            },
            "is_defined_before": {
                "var_node": [],
                "return": [
                    "bool"
                ]
            },
            "is_defined_in_scope": {
                "var_node": [],
                "varname": [],
                "scope": [],
                "return": [
                    "bool"
                ]
            },
            "is_deleted_after_current": {
                "node": [],
                "varname": [],
                "return": [
                    "bool"
                ]
            },
            "is_empty_dict_literal": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_empty_str_literal": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_enum": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_enum_member": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_error": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_from_fallback_block": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_func_decorator": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_function_body_ellipsis": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_hashable": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_inside_abstract_class": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_iterable": {
                "value": [],
                "check_async": [
                    "bool"
                ],
                "return": []
            },
            "is_mapping": {
                "value": [],
                "return": []
            },
            "is_module_ignored": {
                "qualified_module_name": [],
                "ignored_modules": [],
                "return": [
                    "bool"
                ]
            },
            "is_node_in_type_annotation_context": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_node_inside_try_except": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_none": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_overload_stub": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_postponed_evaluation_enabled": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_property_deleter": {
                "node": [],
                "return": []
            },
            "is_property_setter": {
                "node": [],
                "return": []
            },
            "is_property_setter_or_deleter": {
                "node": [],
                "return": []
            },
            "is_protocol_class": {
                "cls": [],
                "return": [
                    "bool"
                ]
            },
            "is_reassigned_after_current": {
                "node": [],
                "varname": [],
                "return": [
                    "bool"
                ]
            },
            "is_registered_in_singledispatch_function": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_registered_in_singledispatchmethod_function": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_singleton_const": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_subclass_of": {
                "child": [],
                "parent": [],
                "return": [
                    "bool"
                ]
            },
            "is_super": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_sys_guard": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_terminating_func": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "is_test_condition": {
                "node": [],
                "parent": [
                    "None"
                ],
                "return": [
                    "bool"
                ]
            },
            "is_typing_member": {
                "node": [],
                "names_to_check": [],
                "return": [
                    "bool"
                ]
            },
            "next_char": {
                "i": [],
                "return": [
                    "tuple"
                ]
            },
            "node_frame_class": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "node_ignores_exception": {
                "node": [],
                "exception": [
                    "Exception"
                ],
                "return": [
                    "bool"
                ]
            },
            "node_type": {
                "node": [],
                "return": [
                    "None",
                    "set"
                ]
            },
            "not_condition_as_string": {
                "test_node": [],
                "return": [
                    "typing.Text"
                ]
            },
            "only_required_for_messages": {
                "messages": [],
                "return": []
            },
            "overridden_method": {
                "klass": [],
                "name": [],
                "return": [
                    "None",
                    "nodes_@_FunctionDef"
                ]
            },
            "overrides_a_method": {
                "class_node": [],
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "parse_format_method_string": {
                "format_string": [],
                "return": [
                    "tuple[typing.Union[list[tuple[typing.Union[numbers_@_Number,list]]],int]]"
                ]
            },
            "parse_format_string": {
                "format_string": [],
                "return": []
            },
            "returns_bool": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "safe_infer": {
                "node": [],
                "context": [
                    "None"
                ],
                "compare_constants": [
                    "bool"
                ],
                "compare_constructors": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "split_format_field_names": {
                "format_string": [],
                "return": []
            },
            "store_messages": {
                "func": [],
                "return": []
            },
            "stringify_error": {
                "error": [],
                "return": []
            },
            "subscript_chain_is_equal": {
                "left": [],
                "right": [],
                "return": [
                    "bool"
                ]
            },
            "supports_delitem": {
                "value": [],
                "_": [],
                "return": []
            },
            "supports_getitem": {
                "value": [],
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "supports_membership_test": {
                "value": [],
                "return": []
            },
            "supports_setitem": {
                "value": [],
                "_": [],
                "return": []
            },
            "unimplemented_abstract_methods": {
                "node": [],
                "is_abstract_cb": [
                    "None"
                ],
                "return": [
                    "dict",
                    "dict[, nodes_@_FunctionDef]"
                ]
            },
            "uninferable_final_decorators": {
                "node": [],
                "return": [
                    "list[typing.Union[nodes_@_Name,nodes_@_Attribute]]"
                ]
            }
        }
    },
    "pylint.config": {
        "global": {
            "global": {}
        }
    },
    "pylint.config._breaking_changes": {
        "global": {
            "global": {}
        }
    },
    "pylint.config._pylint_config": {
        "global": {
            "global": {}
        }
    },
    "pylint.config._pylint_config.generate_command": {
        "global": {
            "generate_interactive_config": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "global": {},
            "handle_generate_command": {
                "linter": [],
                "return": [
                    "int"
                ]
            }
        }
    },
    "pylint.config._pylint_config.help_message": {
        "global": {
            "get_help": {
                "parser": [],
                "return": []
            },
            "get_subparser_help": {
                "linter": [],
                "command": [],
                "return": [
                    "typing.Text"
                ]
            },
            "global": {}
        }
    },
    "pylint.config._pylint_config.main": {
        "global": {
            "_handle_pylint_config_commands": {
                "linter": [],
                "return": [
                    "int"
                ]
            },
            "global": {}
        }
    },
    "pylint.config._pylint_config.setup": {
        "_HelpAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_register_generate_config_options": {
                "parser": [],
                "return": [
                    "None"
                ]
            },
            "global": {}
        }
    },
    "pylint.config._pylint_config.utils": {
        "InvalidUserInput": {
            "__init__": {
                "valid_input": [],
                "input_value": [],
                "args": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "get_and_validate_format": {
                "return": [
                    "typing.Text"
                ]
            },
            "get_and_validate_output_file": {
                "return": [
                    "tuple[typing.Union[bool,Path]]"
                ]
            },
            "get_minimal_setting": {
                "return": []
            },
            "global": {},
            "inner_function": {
                "kwargs": [],
                "args": [],
                "return": []
            },
            "should_retry_after_invalid_input": {
                "func": [],
                "return": []
            },
            "validate_yes_no": {
                "question": [],
                "default": [],
                "return": []
            }
        }
    },
    "pylint.config.argument": {
        "_Argument": {
            "__init__": {
                "flags": [],
                "arg_help": [],
                "hide_help": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "_BaseStoreArgument": {
            "__init__": {
                "flags": [],
                "action": [],
                "default": [],
                "arg_help": [],
                "hide_help": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "_CallableArgument": {
            "__init__": {
                "flags": [],
                "action": [],
                "arg_help": [],
                "kwargs": [],
                "hide_help": [],
                "section": [],
                "metavar": [],
                "return": [
                    "None"
                ]
            }
        },
        "_DeprecationArgument": {
            "__init__": {
                "flags": [],
                "action": [],
                "default": [],
                "arg_type": [],
                "choices": [],
                "arg_help": [],
                "metavar": [],
                "hide_help": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "_ExtendArgument": {
            "__init__": {
                "flags": [],
                "action": [],
                "default": [],
                "arg_type": [],
                "metavar": [],
                "arg_help": [],
                "hide_help": [],
                "section": [],
                "choices": [],
                "dest": [],
                "return": [
                    "None"
                ]
            }
        },
        "_StoreArgument": {
            "__init__": {
                "flags": [],
                "action": [],
                "default": [],
                "arg_type": [],
                "choices": [],
                "arg_help": [],
                "metavar": [],
                "hide_help": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "_StoreNewNamesArgument": {
            "__init__": {
                "flags": [],
                "default": [],
                "arg_type": [],
                "choices": [],
                "arg_help": [],
                "metavar": [],
                "hide_help": [],
                "kwargs": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "_StoreOldNamesArgument": {
            "__init__": {
                "flags": [],
                "default": [],
                "arg_type": [],
                "choices": [],
                "arg_help": [],
                "metavar": [],
                "hide_help": [],
                "kwargs": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "_StoreTrueArgument": {
            "__init__": {
                "flags": [],
                "action": [],
                "default": [],
                "arg_help": [],
                "hide_help": [],
                "section": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_confidence_transformer": {
                "value": [],
                "return": []
            },
            "_csv_transformer": {
                "value": [],
                "return": []
            },
            "_glob_paths_csv_transformer": {
                "value": [],
                "return": [
                    "list"
                ]
            },
            "_non_empty_string_transformer": {
                "value": [],
                "return": []
            },
            "_path_transformer": {
                "value": [],
                "return": []
            },
            "_py_version_transformer": {
                "value": [],
                "return": [
                    "tuple[int]"
                ]
            },
            "_regex_transformer": {
                "value": [],
                "return": []
            },
            "_regexp_csv_transfomer": {
                "value": [],
                "return": [
                    "list"
                ]
            },
            "_regexp_paths_csv_transfomer": {
                "value": [],
                "return": [
                    "list"
                ]
            },
            "_yn_transformer": {
                "value": [],
                "return": [
                    "bool"
                ]
            },
            "global": {}
        }
    },
    "pylint.config.arguments_manager": {
        "_ArgumentsManager": {
            "__init__": {
                "prog": [],
                "usage": [
                    "None"
                ],
                "description": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_add_arguments_to_parser": {
                "section": [],
                "section_desc": [],
                "argument": [],
                "return": [
                    "None"
                ]
            },
            "_add_parser_option": {
                "section_group": [],
                "argument": [],
                "return": [
                    "None"
                ]
            },
            "_generate_config": {
                "stream": [
                    "None"
                ],
                "skipsections": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "_generate_config_file": {
                "minimal": [
                    "bool"
                ],
                "return": [
                    "str"
                ]
            },
            "_load_default_argument_values": {
                "return": [
                    "None"
                ]
            },
            "_parse_command_line_configuration": {
                "arguments": [
                    "None"
                ],
                "return": []
            },
            "_parse_configuration_file": {
                "arguments": [],
                "return": [
                    "None"
                ]
            },
            "_register_options_provider": {
                "provider": [],
                "return": [
                    "None"
                ]
            },
            "config": {
                "return": []
            },
            "help": {
                "return": []
            },
            "set_option": {
                "optname": [],
                "value": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.arguments_provider": {
        "_ArgumentsProvider": {
            "__init__": {
                "arguments_manager": [],
                "return": [
                    "None"
                ]
            },
            "_option_value": {
                "opt": [],
                "return": []
            },
            "_options_and_values": {
                "options": [
                    "None"
                ],
                "return": [
                    "typing.Generator[tuple]"
                ]
            },
            "_options_by_section": {
                "return": [
                    "typing.Generator[tuple[typing.Optional[dict]]]",
                    "typing.Generator[tuple]"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.callback_actions": {
        "_AccessLinterObjectAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "option_strings": [],
                "dest": [],
                "nargs": [
                    "None"
                ],
                "const": [
                    "None"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "choices": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ],
                "metavar": [
                    "typing.Text"
                ],
                "kwargs": [],
                "return": [
                    "None"
                ]
            }
        },
        "_AccessParserAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "option_strings": [],
                "dest": [],
                "nargs": [
                    "None"
                ],
                "const": [
                    "None"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "choices": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ],
                "metavar": [
                    "typing.Text"
                ],
                "kwargs": [],
                "return": [
                    "None"
                ]
            }
        },
        "_AccessRunObjectAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "option_strings": [],
                "dest": [],
                "nargs": [
                    "None"
                ],
                "const": [
                    "None"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "choices": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ],
                "metavar": [
                    "typing.Text"
                ],
                "kwargs": [],
                "return": [
                    "None"
                ]
            }
        },
        "_CallbackAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_DisableAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_DoNothingAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_EnableAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_ErrorsOnlyModeAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_FullDocumentationAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_GenerateConfigFileAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_GenerateRCFileAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_ListCheckGroupsAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_ListConfidenceLevelsAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_ListExtensionsAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_ListMessagesAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_ListMessagesEnabledAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_LongHelpAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_MessageHelpAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "option_strings": [],
                "dest": [],
                "nargs": [
                    "None"
                ],
                "const": [
                    "None"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "choices": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ],
                "metavar": [
                    "typing.Text"
                ],
                "kwargs": [],
                "return": [
                    "None"
                ]
            }
        },
        "_OutputFormatAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_XableAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            },
            "_call": {
                "xabling_function": [],
                "values": [],
                "option_string": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.config_file_parser": {
        "_ConfigurationFileParser": {
            "__init__": {
                "verbose": [],
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "parse_config_file": {
                "file_path": [],
                "return": [
                    "tuple[typing.Union[dict,list]]"
                ]
            }
        },
        "_RawConfParser": {
            "_ini_file_with_sections": {
                "file_path": [],
                "return": [
                    "bool"
                ]
            },
            "parse_config_file": {
                "file_path": [],
                "verbose": [],
                "return": [
                    "tuple[typing.Union[dict,list]]"
                ]
            },
            "parse_ini_file": {
                "file_path": [],
                "return": [
                    "tuple[typing.Union[dict,list[typing.Text]]]"
                ]
            },
            "parse_toml_file": {
                "file_path": [],
                "return": [
                    "tuple[typing.Union[dict,list]]",
                    "tuple[typing.Union[dict,list[typing.Text]]]"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.config_initialization": {
        "global": {
            "_config_initialization": {
                "linter": [],
                "args_list": [],
                "reporter": [
                    "None"
                ],
                "config_file": [
                    "None"
                ],
                "verbose_mode": [
                    "bool"
                ],
                "return": [
                    "list"
                ]
            },
            "_order_all_first": {
                "config_args": [],
                "joined": [],
                "return": [
                    "list"
                ]
            },
            "global": {}
        }
    },
    "pylint.config.deprecation_actions": {
        "_NewNamesAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "option_strings": [],
                "dest": [],
                "nargs": [
                    "None"
                ],
                "const": [
                    "None"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "choices": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ],
                "metavar": [
                    "typing.Text"
                ],
                "new_names": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "_OldNamesAction": {
            "__call__": {
                "parser": [],
                "namespace": [],
                "values": [],
                "option_string": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "option_strings": [],
                "dest": [],
                "nargs": [
                    "None"
                ],
                "const": [
                    "None"
                ],
                "default": [
                    "None"
                ],
                "type": [
                    "None"
                ],
                "choices": [
                    "None"
                ],
                "required": [
                    "bool"
                ],
                "help": [
                    "typing.Text"
                ],
                "metavar": [
                    "typing.Text"
                ],
                "old_names": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.exceptions": {
        "_UnrecognizedOptionError": {
            "__init__": {
                "options": [],
                "args": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.find_default_config_files": {
        "global": {
            "_cfg_or_ini_has_config": {
                "path": [],
                "return": [
                    "bool"
                ]
            },
            "_find_config_in_home_or_environment": {
                "return": [
                    "typing.Generator"
                ]
            },
            "_find_project_config": {
                "return": [
                    "typing.Generator"
                ]
            },
            "_find_pyproject": {
                "return": []
            },
            "_toml_has_config": {
                "path": [],
                "return": [
                    "bool"
                ]
            },
            "_yield_default_files": {
                "return": [
                    "typing.Generator"
                ]
            },
            "find_default_config_files": {
                "return": [
                    "typing.Generator"
                ]
            },
            "global": {}
        }
    },
    "pylint.config.help_formatter": {
        "_HelpFormatter": {
            "_get_help_string": {
                "action": [],
                "return": []
            },
            "get_long_description": {
                "return": [
                    "typing.Text"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.config.utils": {
        "global": {
            "_add_plugins": {
                "run": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "_convert_option_to_argument": {
                "opt": [],
                "optdict": [],
                "return": [
                    "_StoreTrueArgument",
                    "_CallableArgument"
                ]
            },
            "_enable_all_extensions": {
                "run": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "_init_hook": {
                "run": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "_parse_rich_type_value": {
                "value": [],
                "return": [
                    "str"
                ]
            },
            "_preprocess_options": {
                "run": [],
                "args": [],
                "return": [
                    "list"
                ]
            },
            "_set_output": {
                "run": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "_set_rcfile": {
                "run": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "_set_verbose_mode": {
                "run": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "global": {}
        }
    },
    "pylint.constants": {
        "global": {
            "_get_pylint_home": {
                "return": []
            },
            "global": {}
        }
    },
    "pylint.exceptions": {
        "DeletedMessageError": {
            "__init__": {
                "msgid_or_symbol": [],
                "removal_explanation": [],
                "return": [
                    "None"
                ]
            }
        },
        "MessageBecameExtensionError": {
            "__init__": {
                "msgid_or_symbol": [],
                "moved_explanation": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.extensions": {
        "global": {
            "global": {},
            "initialize": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions._check_docs_utils": {
        "Docstring": {
            "__init__": {
                "doc": [],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "typing.Text"
                ]
            },
            "exceptions": {
                "return": [
                    "set"
                ]
            },
            "has_params": {
                "return": [
                    "bool"
                ]
            },
            "has_property_returns": {
                "return": [
                    "bool"
                ]
            },
            "has_property_type": {
                "return": [
                    "bool"
                ]
            },
            "has_returns": {
                "return": [
                    "bool"
                ]
            },
            "has_rtype": {
                "return": [
                    "bool"
                ]
            },
            "has_yields": {
                "return": [
                    "bool"
                ]
            },
            "has_yields_type": {
                "return": [
                    "bool"
                ]
            },
            "match_param_docs": {
                "return": [
                    "tuple[set]"
                ]
            },
            "matching_sections": {
                "return": [
                    "int"
                ]
            },
            "params_documented_elsewhere": {
                "return": [
                    "bool"
                ]
            }
        },
        "global": {
            "_annotations_list": {
                "args_node": [],
                "return": [
                    "list"
                ]
            },
            "_get_raise_target": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_is_ellipsis": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_merge_annotations": {
                "annotations": [],
                "comment_annotations": [],
                "return": [
                    "typing.Generator",
                    "typing.Generator[None]"
                ]
            },
            "_split_multiple_exc_types": {
                "target": [],
                "return": []
            },
            "args_with_annotation": {
                "args_node": [],
                "return": [
                    "set"
                ]
            },
            "docstringify": {
                "docstring": [],
                "default_type": [
                    "typing.Text"
                ],
                "return": [
                    "int"
                ]
            },
            "get_setters_property": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "get_setters_property_name": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "global": {},
            "possible_exc_types": {
                "node": [],
                "return": [
                    "set[nodes_@_ClassDef]",
                    "set"
                ]
            },
            "returns_something": {
                "return_node": [],
                "return": [
                    "bool"
                ]
            },
            "space_indentation": {
                "s": [],
                "return": [
                    "int"
                ]
            }
        },
        "GoogleDocstring": {
            "_first_line": {
                "return": []
            },
            "_is_section_header": {
                "_": [],
                "return": [
                    "bool"
                ]
            },
            "_parse_section": {
                "section_re": [],
                "return": [
                    "list",
                    "list[str]"
                ]
            },
            "exceptions": {
                "return": [
                    "set"
                ]
            },
            "has_params": {
                "return": [
                    "bool"
                ]
            },
            "has_property_returns": {
                "return": [
                    "bool"
                ]
            },
            "has_property_type": {
                "return": [
                    "bool"
                ]
            },
            "has_returns": {
                "return": [
                    "bool"
                ]
            },
            "has_rtype": {
                "return": [
                    "bool"
                ]
            },
            "has_yields": {
                "return": [
                    "bool"
                ]
            },
            "has_yields_type": {
                "return": [
                    "bool"
                ]
            },
            "match_param_docs": {
                "return": [
                    "tuple[set]"
                ]
            },
            "matching_sections": {
                "return": [
                    "bool"
                ]
            },
            "min_section_indent": {
                "section_match": [],
                "return": [
                    "int"
                ]
            }
        },
        "NumpyDocstring": {
            "_is_section_header": {
                "line": [],
                "return": [
                    "bool"
                ]
            },
            "match_param_docs": {
                "return": [
                    "tuple[set]"
                ]
            },
            "min_section_indent": {
                "section_match": [],
                "return": [
                    "int"
                ]
            }
        },
        "SphinxDocstring": {
            "exceptions": {
                "return": [
                    "set"
                ]
            },
            "has_params": {
                "return": [
                    "bool"
                ]
            },
            "has_property_returns": {
                "return": [
                    "bool"
                ]
            },
            "has_property_type": {
                "return": [
                    "bool"
                ]
            },
            "has_returns": {
                "return": [
                    "bool"
                ]
            },
            "has_rtype": {
                "return": [
                    "bool"
                ]
            },
            "match_param_docs": {
                "return": [
                    "tuple[set]"
                ]
            },
            "matching_sections": {
                "return": [
                    "bool"
                ]
            }
        },
        "EpytextDocstring": {
            "has_property_returns": {
                "return": [
                    "bool"
                ]
            }
        }
    },
    "pylint.extensions.bad_builtin": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "BadBuiltinChecker": {
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.broad_try_clause": {
        "BroadTryClauseChecker": {
            "_count_statements": {
                "node": [],
                "return": [
                    "int"
                ]
            },
            "visit_try": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.check_elif": {
        "ElseifUsedChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_init": {
                "return": [
                    "None"
                ]
            },
            "leave_module": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.code_style": {
        "CodeStyleChecker": {
            "_check_consider_using_assignment_expr": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_dict_consider_namedtuple_dataclass": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_ignore_assignment_expr_suggestion": {
                "node": [],
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "_check_prev_sibling_to_if_stmt": {
                "prev_sibling": [],
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_call": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_comprehension": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_dict": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.comparison_placement": {
        "MisplacedComparisonConstantChecker": {
            "_check_misplaced_constant": {
                "node": [],
                "left": [],
                "right": [],
                "operator": [],
                "return": [
                    "None"
                ]
            },
            "visit_compare": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.confusing_elif": {
        "ConfusingConsecutiveElifChecker": {
            "_has_no_else_clause": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.consider_refactoring_into_while_condition": {
        "ConsiderRefactorIntoWhileConditionChecker": {
            "_check_breaking_after_while_true": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_while": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.consider_ternary_expression": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "ConsiderTernaryExpressionChecker": {
            "visit_if": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.dict_init_mutate": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "DictInitMutateChecker": {
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.docstyle": {
        "DocStringStyleChecker": {
            "_check_docstring": {
                "node_type": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.dunder": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "DunderChecker": {
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.empty_comment": {
        "global": {
            "comment_part_of_string": {
                "line": [],
                "comment_idx": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "is_line_commented": {
                "line": [],
                "return": [
                    "bool"
                ]
            },
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "CommentChecker": {
            "process_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.eq_without_hash": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "EqWithoutHash": {
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.for_any_all": {
        "ConsiderUsingAnyOrAllChecker": {
            "_assigned_reassigned_returned": {
                "node": [],
                "if_children": [],
                "node_after_loop": [],
                "return": [
                    "bool"
                ]
            },
            "_build_suggested_string": {
                "node": [],
                "final_return_bool": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_if_statement_returns_bool": {
                "if_children": [],
                "node_after_loop": [],
                "return": [
                    "bool"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.magic_value": {
        "MagicValueChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_constants_comparison": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_is_magic_value": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_magic_vals_ext_configured": {
                "return": [
                    "bool"
                ]
            },
            "_parse_rcfile_magic_numbers": {
                "parsed_val": [],
                "return": [
                    "float"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_compare": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.mccabe": {
        "PathGraph": {
            "__init__": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "PathGraphingAstVisitor": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "_append_node": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_subgraph": {
                "node": [],
                "name": [],
                "extra_blocks": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "_subgraph_parse": {
                "node": [],
                "pathnode": [],
                "extra_blocks": [],
                "return": [
                    "None"
                ]
            },
            "default": {
                "node": [],
                "args": [],
                "return": [
                    "None"
                ]
            },
            "dispatch": {
                "node": [],
                "args": [],
                "return": []
            },
            "visitFunctionDef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visitSimpleStatement": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visitWith": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "McCabeMethodChecker": {
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.no_self_use": {
        "NoSelfUseChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_first_arg_for_type": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "leave_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_name": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_has_bare_super_call": {
                "fundef_node": [],
                "return": [
                    "bool"
                ]
            },
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.overlapping_exceptions": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "OverlappingExceptionsChecker": {
            "visit_try": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.private_import": {
        "PrivateImportChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_assignments_call_private_name": {
                "assignments": [],
                "private_name": [],
                "return": [
                    "bool"
                ]
            },
            "_get_private_imports": {
                "names": [],
                "return": [
                    "list"
                ]
            },
            "_get_type_annotation_names": {
                "node": [],
                "names": [],
                "return": [
                    "list"
                ]
            },
            "_name_is_private": {
                "name": [],
                "return": [
                    "bool"
                ]
            },
            "_populate_type_annotations": {
                "node": [],
                "all_used_type_annotations": [],
                "return": [
                    "None"
                ]
            },
            "_populate_type_annotations_annotation": {
                "node": [],
                "all_used_type_annotations": [],
                "return": [
                    "None"
                ]
            },
            "_populate_type_annotations_function": {
                "node": [],
                "all_used_type_annotations": [],
                "return": [
                    "None"
                ]
            },
            "same_root_dir": {
                "node": [],
                "import_mod_name": [],
                "return": [
                    "bool"
                ]
            },
            "visit_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.redefined_loop_name": {
        "RedefinedLoopNameChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "leave_for": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_assignname": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_for": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.redefined_variable_type": {
        "MultipleTypesChecker": {
            "_check_and_add_messages": {
                "return": [
                    "None"
                ]
            },
            "leave_classdef": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "visit_assign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "_": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "_": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.set_membership": {
        "SetMembershipChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_check_in_comparison": {
                "comparator": [],
                "return": [
                    "None"
                ]
            },
            "visit_compare": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.typing": {
        "TypingChecker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_broken_callable_location": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_check_broken_callable": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_broken_noreturn": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_for_alternative_union_syntax": {
                "node": [],
                "name": [],
                "return": [
                    "None"
                ]
            },
            "_check_for_typing_alias": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_check_union_types": {
                "types": [],
                "annotation": [],
                "return": [
                    "None"
                ]
            },
            "_is_binop_union_annotation": {
                "annotation": [],
                "return": [
                    "bool"
                ]
            },
            "_is_deprecated_union_annotation": {
                "annotation": [],
                "union_name": [],
                "return": [
                    "bool"
                ]
            },
            "_is_optional_none_annotation": {
                "annotation": [],
                "return": [
                    "bool"
                ]
            },
            "_msg_postponed_eval_hint": {
                "node": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_parse_binops_typehints": {
                "binop_node": [],
                "typehints_list": [
                    "None"
                ],
                "return": [
                    "list"
                ]
            },
            "leave_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "visit_annassign": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_attribute": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_name": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_subscript": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.extensions.while_used": {
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "WhileChecker": {
            "visit_while": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.graph": {
        "DotBackend": {
            "__init__": {
                "graphname": [],
                "rankdir": [
                    "None"
                ],
                "size": [
                    "None"
                ],
                "ratio": [
                    "None"
                ],
                "charset": [
                    "typing.Text"
                ],
                "renderer": [
                    "typing.Text"
                ],
                "additional_param": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "emit": {
                "line": [],
                "return": [
                    "None"
                ]
            },
            "emit_edge": {
                "name1": [],
                "name2": [],
                "props": [],
                "return": [
                    "None"
                ]
            },
            "emit_node": {
                "name": [],
                "props": [],
                "return": [
                    "None"
                ]
            },
            "generate": {
                "outputfile": [
                    "None"
                ],
                "mapfile": [
                    "None"
                ],
                "return": []
            },
            "get_source": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "_get_cycles": {
                "graph_dict": [],
                "path": [],
                "visited": [],
                "result": [],
                "vertice": [],
                "return": [
                    "None"
                ]
            },
            "get_cycles": {
                "graph_dict": [],
                "vertices": [
                    "None"
                ],
                "return": [
                    "tuple",
                    "list"
                ]
            },
            "global": {},
            "normalize_node_id": {
                "nid": [],
                "return": [
                    "typing.Text"
                ]
            },
            "target_info_from_filename": {
                "filename": [],
                "return": [
                    "tuple"
                ]
            }
        }
    },
    "pylint.interfaces": {
        "global": {
            "global": {}
        }
    },
    "pylint.lint": {
        "global": {
            "global": {}
        }
    },
    "pylint.lint.caching": {
        "global": {
            "_get_pdata_path": {
                "base_name": [],
                "recurs": [],
                "pylint_home": [
                    "Path"
                ],
                "return": []
            },
            "global": {},
            "load_results": {
                "base": [],
                "pylint_home": [],
                "return": [
                    "None"
                ]
            },
            "save_results": {
                "results": [],
                "base": [],
                "pylint_home": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.lint.expand_modules": {
        "global": {
            "_is_ignored_file": {
                "element": [],
                "ignore_list": [],
                "ignore_list_re": [],
                "ignore_list_paths_re": [],
                "return": [
                    "bool"
                ]
            },
            "_is_in_ignore_list_re": {
                "element": [],
                "ignore_list_re": [],
                "return": [
                    "bool"
                ]
            },
            "_is_package_cb": {
                "inner_path": [],
                "parts": [],
                "return": []
            },
            "_modpath_from_file": {
                "filename": [],
                "is_namespace": [],
                "path": [],
                "return": []
            },
            "discover_package_path": {
                "modulepath": [],
                "source_roots": [],
                "return": []
            },
            "expand_modules": {
                "files_or_modules": [],
                "source_roots": [],
                "ignore_list": [],
                "ignore_list_re": [],
                "ignore_list_paths_re": [],
                "return": []
            },
            "global": {}
        }
    },
    "pylint.lint.message_state_handler": {
        "_MessageStateHandler": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_get_message_state_scope": {
                "msgid": [],
                "line": [
                    "None"
                ],
                "confidence": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_get_messages_to_set": {
                "msgid": [],
                "enable": [],
                "ignore_unknown": [
                    "bool"
                ],
                "return": [
                    "list"
                ]
            },
            "_is_one_message_enabled": {
                "msgid": [],
                "line": [],
                "return": []
            },
            "_register_by_id_managed_msg": {
                "msgid_or_symbol": [],
                "line": [],
                "is_disabled": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_set_msg_status": {
                "msgid": [],
                "enable": [],
                "scope": [
                    "typing.Text"
                ],
                "line": [
                    "None"
                ],
                "ignore_unknown": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_set_one_msg_status": {
                "scope": [],
                "msg": [],
                "line": [],
                "enable": [],
                "return": [
                    "None"
                ]
            },
            "disable": {
                "msgid": [],
                "scope": [
                    "typing.Text"
                ],
                "line": [
                    "None"
                ],
                "ignore_unknown": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "disable_next": {
                "msgid": [],
                "_": [
                    "typing.Text"
                ],
                "line": [],
                "ignore_unknown": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "disable_noerror_messages": {
                "return": [
                    "None"
                ]
            },
            "enable": {
                "msgid": [],
                "scope": [
                    "typing.Text"
                ],
                "line": [
                    "None"
                ],
                "ignore_unknown": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "is_message_enabled": {
                "msg_descr": [],
                "line": [
                    "None"
                ],
                "confidence": [
                    "None"
                ],
                "return": [
                    "bool"
                ]
            },
            "list_messages_enabled": {
                "return": [
                    "None"
                ]
            },
            "process_tokens": {
                "tokens": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.lint.parallel": {
        "global": {
            "_merge_mapreduce_data": {
                "linter": [],
                "all_mapreduce_data": [],
                "return": [
                    "None"
                ]
            },
            "_worker_check_single_file": {
                "file_item": [],
                "return": [
                    "tuple[int]"
                ]
            },
            "_worker_initialize": {
                "linter": [],
                "extra_packages_paths": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "check_parallel": {
                "linter": [],
                "jobs": [],
                "files": [],
                "extra_packages_paths": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "global": {}
        }
    },
    "pylint.lint.pylinter": {
        "GetAstProtocol": {
            "__call__": {
                "filepath": [],
                "modname": [],
                "data": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "PyLinter": {
            "__init__": {
                "options": [
                    "tuple"
                ],
                "reporter": [
                    "None"
                ],
                "option_groups": [
                    "tuple"
                ],
                "pylintrc": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_add_one_message": {
                "message_definition": [],
                "line": [],
                "node": [],
                "args": [],
                "confidence": [],
                "col_offset": [],
                "end_lineno": [],
                "end_col_offset": [],
                "return": [
                    "None"
                ]
            },
            "_astroid_module_checker": {
                "return": [
                    "typing.Generator"
                ]
            },
            "_check_astroid_module": {
                "node": [],
                "walker": [],
                "rawcheckers": [],
                "tokencheckers": [],
                "return": [
                    "None",
                    "bool"
                ]
            },
            "_check_file": {
                "get_ast": [],
                "check_astroid_module": [],
                "file": [],
                "return": [
                    "None"
                ]
            },
            "_discover_files": {
                "files_or_modules": [],
                "return": [
                    "typing.Generator",
                    "typing.Generator[typing.Generator]"
                ]
            },
            "_emit_stashed_messages": {
                "return": [
                    "None"
                ]
            },
            "_expand_files": {
                "files_or_modules": [],
                "return": []
            },
            "_get_asts": {
                "fileitems": [],
                "data": [],
                "return": [
                    "dict"
                ]
            },
            "_get_file_descr_from_stdin": {
                "filepath": [],
                "return": [
                    "None",
                    "typing.Generator[FileItem]"
                ]
            },
            "_get_namespace_for_file": {
                "filepath": [],
                "namespaces": [],
                "return": [
                    "None"
                ]
            },
            "_iterate_file_descrs": {
                "files_or_modules": [],
                "return": [
                    "typing.Generator[FileItem]"
                ]
            },
            "_lint_file": {
                "file": [],
                "module": [],
                "check_astroid_module": [],
                "return": [
                    "None"
                ]
            },
            "_lint_files": {
                "ast_mapping": [],
                "check_astroid_module": [],
                "return": [
                    "None"
                ]
            },
            "_load_reporter_by_name": {
                "reporter_name": [],
                "return": []
            },
            "_load_reporters": {
                "reporter_names": [],
                "return": [
                    "None"
                ]
            },
            "_parse_error_mode": {
                "return": [
                    "None"
                ]
            },
            "_report_evaluation": {
                "verbose": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "add_ignored_message": {
                "msgid": [],
                "line": [],
                "node": [
                    "None"
                ],
                "confidence": [],
                "return": [
                    "None"
                ]
            },
            "add_message": {
                "msgid": [],
                "line": [
                    "None"
                ],
                "node": [
                    "None"
                ],
                "args": [
                    "None"
                ],
                "confidence": [
                    "None"
                ],
                "col_offset": [
                    "None"
                ],
                "end_lineno": [
                    "None"
                ],
                "end_col_offset": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "any_fail_on_issues": {
                "return": [
                    "bool"
                ]
            },
            "check": {
                "files_or_modules": [],
                "return": [
                    "None"
                ]
            },
            "check_astroid_module": {
                "ast_node": [],
                "walker": [],
                "rawcheckers": [],
                "tokencheckers": [],
                "return": []
            },
            "check_single_file_item": {
                "file": [],
                "return": [
                    "None"
                ]
            },
            "disable_reporters": {
                "return": [
                    "None"
                ]
            },
            "enable_fail_on_messages": {
                "return": [
                    "None"
                ]
            },
            "generate_reports": {
                "verbose": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "get_ast": {
                "filepath": [],
                "modname": [],
                "data": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "get_checker_names": {
                "return": [
                    "list"
                ]
            },
            "get_checkers": {
                "return": [
                    "list"
                ]
            },
            "initialize": {
                "return": [
                    "None"
                ]
            },
            "load_default_plugins": {
                "return": [
                    "None"
                ]
            },
            "load_plugin_configuration": {
                "return": [
                    "None"
                ]
            },
            "load_plugin_modules": {
                "modnames": [],
                "force": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "open": {
                "return": [
                    "None"
                ]
            },
            "prepare_checkers": {
                "return": [
                    "list[PyLinter]"
                ]
            },
            "register_checker": {
                "checker": [],
                "return": [
                    "None"
                ]
            },
            "register_reporter": {
                "reporter_class": [],
                "return": [
                    "None"
                ]
            },
            "report_order": {
                "return": [
                    "list[PyLinter]"
                ]
            },
            "set_current_module": {
                "modname": [],
                "filepath": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "set_reporter": {
                "reporter": [],
                "return": [
                    "None"
                ]
            },
            "should_analyze_file": {
                "modname": [],
                "path": [],
                "is_argument": [
                    "bool"
                ],
                "return": [
                    "bool"
                ]
            }
        },
        "global": {
            "_load_reporter_by_class": {
                "reporter_class": [],
                "return": []
            },
            "_read_stdin": {
                "return": []
            },
            "global": {}
        }
    },
    "pylint.lint.report_functions": {
        "global": {
            "global": {},
            "report_messages_by_module_stats": {
                "sect": [],
                "stats": [],
                "_": [],
                "return": [
                    "None"
                ]
            },
            "report_messages_stats": {
                "sect": [],
                "stats": [],
                "_": [],
                "return": [
                    "None"
                ]
            },
            "report_total_messages_stats": {
                "sect": [],
                "stats": [],
                "previous_stats": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.lint.run": {
        "Run": {
            "__init__": {
                "args": [],
                "reporter": [
                    "None"
                ],
                "exit": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_cpu_count": {
                "return": [
                    "int"
                ]
            },
            "_query_cpu": {
                "return": []
            },
            "_query_cpu_cgroupsv1": {
                "return": [
                    "None",
                    "int"
                ]
            },
            "_query_cpu_cgroupv2": {
                "return": [
                    "None",
                    "int"
                ]
            },
            "_query_cpu_handle_k8s_pods": {
                "avail_cpu": [],
                "return": [
                    "int"
                ]
            },
            "global": {}
        }
    },
    "pylint.lint.utils": {
        "global": {
            "_augment_sys_path": {
                "additional_paths": [],
                "return": [
                    "list"
                ]
            },
            "augmented_sys_path": {
                "additional_paths": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "get_fatal_error_message": {
                "filepath": [],
                "issue_template_path": [],
                "return": [
                    "typing.Text"
                ]
            },
            "global": {},
            "prepare_crash_report": {
                "ex": [],
                "filepath": [],
                "crash_file_path": [],
                "return": []
            }
        }
    },
    "pylint.message": {
        "global": {
            "global": {}
        }
    },
    "pylint.message._deleted_message_ids": {
        "global": {
            "global": {},
            "is_deleted_msgid": {
                "msgid": [],
                "return": [
                    "tuple[typing.Union[typing.Text,list[DeletedMessage]]]",
                    "None"
                ]
            },
            "is_deleted_symbol": {
                "symbol": [],
                "return": [
                    "tuple[typing.Union[typing.Text,list[DeletedMessage]]]",
                    "None"
                ]
            },
            "is_moved_msgid": {
                "msgid": [],
                "return": [
                    "tuple[typing.Union[typing.Text,list[DeletedMessage]]]",
                    "None"
                ]
            },
            "is_moved_symbol": {
                "symbol": [],
                "return": [
                    "tuple[typing.Union[typing.Text,list[DeletedMessage]]]",
                    "None"
                ]
            }
        }
    },
    "pylint.message.message": {
        "Message": {
            "__init__": {
                "msg_id": [],
                "symbol": [],
                "location": [],
                "msg": [],
                "confidence": [],
                "return": [
                    "None"
                ]
            },
            "format": {
                "template": [],
                "return": []
            },
            "location": {
                "return": [
                    "MessageLocationTuple"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.message.message_definition": {
        "MessageDefinition": {
            "__eq__": {
                "other": [],
                "return": [
                    "bool"
                ]
            },
            "__init__": {
                "checker": [],
                "msgid": [],
                "msg": [],
                "description": [],
                "symbol": [],
                "scope": [],
                "minversion": [
                    "None"
                ],
                "maxversion": [
                    "None"
                ],
                "old_names": [],
                "shared": [
                    "bool"
                ],
                "default_enabled": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "typing.Text"
                ]
            },
            "__str__": {
                "return": [
                    "typing.Text"
                ]
            },
            "check_message_definition": {
                "line": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "check_msgid": {
                "msgid": [],
                "return": [
                    "None"
                ]
            },
            "format_help": {
                "checkerref": [
                    "bool"
                ],
                "return": [
                    "typing.Text"
                ]
            },
            "may_be_emitted": {
                "py_version": [],
                "return": [
                    "bool"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.message.message_definition_store": {
        "MessageDefinitionStore": {
            "__init__": {
                "py_version": [],
                "return": [
                    "None"
                ]
            },
            "find_emittable_messages": {
                "return": [
                    "tuple[list]"
                ]
            },
            "get_message_definitions": {
                "msgid_or_symbol": [],
                "return": [
                    "list"
                ]
            },
            "get_msg_display_string": {
                "msgid_or_symbol": [],
                "return": [
                    "str"
                ]
            },
            "help_message": {
                "msgids_or_symbols": [],
                "return": [
                    "None"
                ]
            },
            "list_messages": {
                "return": [
                    "None"
                ]
            },
            "messages": {
                "return": []
            },
            "register_message": {
                "message": [],
                "return": [
                    "None"
                ]
            },
            "register_messages_from_checker": {
                "checker": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.message.message_id_store": {
        "MessageIdStore": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "typing.Text"
                ]
            },
            "_raise_duplicate_msgid": {
                "symbol": [],
                "msgid": [],
                "other_msgid": [],
                "return": [
                    "None"
                ]
            },
            "_raise_duplicate_symbol": {
                "msgid": [],
                "symbol": [],
                "other_symbol": [],
                "return": [
                    "None"
                ]
            },
            "add_legacy_msgid_and_symbol": {
                "msgid": [],
                "symbol": [],
                "new_msgid": [],
                "return": [
                    "None"
                ]
            },
            "add_msgid_and_symbol": {
                "msgid": [],
                "symbol": [],
                "return": [
                    "None"
                ]
            },
            "check_msgid_and_symbol": {
                "msgid": [],
                "symbol": [],
                "return": [
                    "None"
                ]
            },
            "get_active_msgids": {
                "msgid_or_symbol": [],
                "return": []
            },
            "get_msgid": {
                "symbol": [],
                "return": []
            },
            "get_symbol": {
                "msgid": [],
                "return": []
            },
            "register_message_definition": {
                "msgid": [],
                "symbol": [],
                "old_names": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse": {
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.diadefslib": {
        "DefaultDiadefGenerator": {
            "__init__": {
                "linker": [],
                "handler": [],
                "return": [
                    "None"
                ]
            },
            "leave_project": {
                "_": [],
                "return": [
                    "tuple"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_project": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "DiaDefGenerator": {
            "__init__": {
                "linker": [],
                "handler": [],
                "return": [
                    "None"
                ]
            },
            "_get_levels": {
                "return": [
                    "tuple"
                ]
            },
            "_set_default_options": {
                "return": [
                    "None"
                ]
            },
            "_set_option": {
                "option": [],
                "return": [
                    "bool",
                    "None"
                ]
            },
            "add_class": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "extract_classes": {
                "klass_node": [],
                "anc_level": [],
                "association_level": [],
                "return": [
                    "None"
                ]
            },
            "get_ancestors": {
                "node": [],
                "level": [],
                "return": [
                    "None",
                    "typing.Generator"
                ]
            },
            "get_associated": {
                "klass_node": [],
                "level": [],
                "return": [
                    "None",
                    "typing.Generator"
                ]
            },
            "get_title": {
                "node": [],
                "return": [
                    "typing.Text"
                ]
            },
            "show_node": {
                "node": [],
                "return": [
                    "bool"
                ]
            }
        },
        "DiadefsHandler": {
            "__init__": {
                "config": [],
                "return": [
                    "None"
                ]
            },
            "get_diadefs": {
                "project": [],
                "linker": [],
                "return": [
                    "list"
                ]
            }
        },
        "ClassDiadefGenerator": {
            "class_diagram": {
                "project": [],
                "klass": [],
                "return": [
                    "ClassDiagram"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.diagrams": {
        "ClassDiagram": {
            "__init__": {
                "title": [],
                "mode": [],
                "return": [
                    "None"
                ]
            },
            "add_object": {
                "title": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "add_relationship": {
                "from_object": [],
                "to_object": [],
                "relation_type": [],
                "name": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "assign_association_relationship": {
                "value": [],
                "obj": [],
                "name": [],
                "type_relationship": [],
                "return": [
                    "None"
                ]
            },
            "class_names": {
                "nodes_lst": [],
                "return": [
                    "list"
                ]
            },
            "classe": {
                "name": [],
                "return": []
            },
            "classes": {
                "return": [
                    "list"
                ]
            },
            "extract_relationships": {
                "return": [
                    "None"
                ]
            },
            "get_attrs": {
                "node": [],
                "return": [
                    "list[typing.Text]"
                ]
            },
            "get_methods": {
                "node": [],
                "return": [
                    "list"
                ]
            },
            "get_relationship": {
                "from_object": [],
                "relation_type": [],
                "return": []
            },
            "get_relationships": {
                "role": [],
                "return": [
                    "list"
                ]
            },
            "has_node": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "object_from_node": {
                "node": [],
                "return": []
            }
        },
        "ClassEntity": {
            "__init__": {
                "title": [],
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "DiagramEntity": {
            "__init__": {
                "title": [
                    "typing.Text"
                ],
                "node": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "Figure": {
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "Relationship": {
            "__init__": {
                "from_object": [],
                "to_object": [],
                "relation_type": [],
                "name": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "PackageDiagram": {
            "add_from_depend": {
                "node": [],
                "from_module": [],
                "return": [
                    "None"
                ]
            },
            "add_object": {
                "title": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "extract_relationships": {
                "return": [
                    "None"
                ]
            },
            "get_module": {
                "name": [],
                "node": [],
                "return": []
            },
            "module": {
                "name": [],
                "return": []
            },
            "modules": {
                "return": [
                    "list"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.dot_printer": {
        "DotPrinter": {
            "__init__": {
                "title": [],
                "layout": [
                    "None"
                ],
                "use_automatic_namespace": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_build_label_for_node": {
                "properties": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_close_graph": {
                "return": [
                    "None"
                ]
            },
            "_escape_annotation_label": {
                "annotation_label": [],
                "return": []
            },
            "_open_graph": {
                "return": [
                    "None"
                ]
            },
            "emit_edge": {
                "from_node": [],
                "to_node": [],
                "type_": [],
                "label": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "emit_node": {
                "name": [],
                "type_": [],
                "properties": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "generate": {
                "outputfile": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.inspector": {
        "IdGeneratorMixIn": {
            "__init__": {
                "start_value": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "generate_id": {
                "return": []
            },
            "init_counter": {
                "start_value": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "Linker": {
            "__init__": {
                "project": [],
                "tag": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_imported_module": {
                "node": [],
                "mod_path": [],
                "relative": [],
                "return": [
                    "None"
                ]
            },
            "compute_module": {
                "context_name": [],
                "mod_path": [],
                "return": [
                    "bool"
                ]
            },
            "handle_assignattr_type": {
                "node": [],
                "parent": [],
                "return": [
                    "None"
                ]
            },
            "visit_assignname": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_classdef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_functiondef": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_import": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_importfrom": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_project": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "Project": {
            "__init__": {
                "name": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "typing.Text"
                ]
            },
            "add_module": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "get_children": {
                "return": []
            },
            "get_module": {
                "name": [],
                "return": []
            }
        },
        "global": {
            "_astroid_wrapper": {
                "func": [],
                "modname": [],
                "verbose": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "global": {},
            "project_from_files": {
                "files": [],
                "func_wrapper": [],
                "project_name": [
                    "typing.Text"
                ],
                "black_list": [],
                "verbose": [
                    "bool"
                ],
                "return": [
                    "Project"
                ]
            }
        },
        "AbstractAssociationHandler": {
            "handle": {
                "node": [],
                "parent": [],
                "return": [
                    "None"
                ]
            },
            "set_next": {
                "handler": [],
                "return": []
            }
        },
        "AggregationsHandler": {
            "handle": {
                "node": [],
                "parent": [],
                "return": [
                    "None"
                ]
            }
        },
        "AssociationHandlerInterface": {
            "handle": {
                "node": [],
                "parent": [],
                "return": [
                    "None"
                ]
            },
            "set_next": {
                "handler": [],
                "return": [
                    "None"
                ]
            }
        },
        "OtherAssociationsHandler": {
            "handle": {
                "node": [],
                "parent": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.pyreverse.main": {
        "Run": {
            "__init__": {
                "args": [],
                "return": [
                    "None"
                ]
            },
            "run": {
                "args": [],
                "return": [
                    "int"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.mermaidjs_printer": {
        "HTMLMermaidJSPrinter": {
            "_close_graph": {
                "return": [
                    "None"
                ]
            },
            "_open_graph": {
                "return": [
                    "None"
                ]
            }
        },
        "MermaidJSPrinter": {
            "_close_graph": {
                "return": [
                    "None"
                ]
            },
            "_open_graph": {
                "return": [
                    "None"
                ]
            },
            "emit_edge": {
                "from_node": [],
                "to_node": [],
                "type_": [],
                "label": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "emit_node": {
                "name": [],
                "type_": [],
                "properties": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.plantuml_printer": {
        "PlantUmlPrinter": {
            "_close_graph": {
                "return": [
                    "None"
                ]
            },
            "_open_graph": {
                "return": [
                    "None"
                ]
            },
            "emit_edge": {
                "from_node": [],
                "to_node": [],
                "type_": [],
                "label": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "emit_node": {
                "name": [],
                "type_": [],
                "properties": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.printer": {
        "Printer": {
            "__init__": {
                "title": [],
                "layout": [
                    "None"
                ],
                "use_automatic_namespace": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_close_graph": {
                "return": [
                    "None"
                ]
            },
            "_dec_indent": {
                "return": [
                    "None"
                ]
            },
            "_get_method_arguments": {
                "method": [],
                "return": [
                    "list",
                    "list[typing.Text]"
                ]
            },
            "_inc_indent": {
                "return": [
                    "None"
                ]
            },
            "_open_graph": {
                "return": [
                    "None"
                ]
            },
            "emit": {
                "line": [],
                "force_newline": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "emit_edge": {
                "from_node": [],
                "to_node": [],
                "type_": [],
                "label": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "emit_node": {
                "name": [],
                "type_": [],
                "properties": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "generate": {
                "outputfile": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.pyreverse.printer_factory": {
        "global": {
            "get_printer_for_filetype": {
                "filetype": [],
                "return": []
            },
            "global": {}
        }
    },
    "pylint.pyreverse.utils": {
        "FilterMixIn": {
            "__init__": {
                "mode": [],
                "return": [
                    "None"
                ]
            },
            "show_attr": {
                "node": [],
                "return": [
                    "bool"
                ]
            }
        },
        "LocalsVisitor": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "get_callbacks": {
                "node": [],
                "return": [
                    "tuple"
                ]
            },
            "visit": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "check_graphviz_availability": {
                "return": [
                    "None"
                ]
            },
            "check_if_graphviz_supports_format": {
                "output_format": [],
                "return": [
                    "None"
                ]
            },
            "get_annotation": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "get_annotation_label": {
                "ann": [],
                "return": [
                    "typing.Text"
                ]
            },
            "get_default_options": {
                "return": [
                    "list"
                ]
            },
            "get_visibility": {
                "name": [],
                "return": [
                    "typing.Text"
                ]
            },
            "global": {},
            "infer_node": {
                "node": [],
                "return": [
                    "set"
                ]
            },
            "insert_default_options": {
                "return": [
                    "None"
                ]
            },
            "is_exception": {
                "node": [],
                "return": [
                    "bool"
                ]
            }
        }
    },
    "pylint.pyreverse.writer": {
        "DiagramWriter": {
            "__init__": {
                "config": [],
                "return": [
                    "None"
                ]
            },
            "get_class_properties": {
                "obj": [],
                "return": [
                    "NodeProperties"
                ]
            },
            "get_package_properties": {
                "obj": [],
                "return": [
                    "NodeProperties"
                ]
            },
            "get_shape_color": {
                "obj": [],
                "return": [
                    "typing.Text"
                ]
            },
            "save": {
                "return": [
                    "None"
                ]
            },
            "set_printer": {
                "file_name": [],
                "basename": [],
                "return": [
                    "None"
                ]
            },
            "write": {
                "diadefs": [],
                "return": [
                    "None"
                ]
            },
            "write_classes": {
                "diagram": [],
                "return": [
                    "None"
                ]
            },
            "write_packages": {
                "diagram": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters": {
        "global": {
            "global": {},
            "initialize": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.reporters.base_reporter": {
        "BaseReporter": {
            "__init__": {
                "output": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_messages": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_reports": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "handle_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            },
            "on_close": {
                "stats": [],
                "previous_stats": [],
                "return": [
                    "None"
                ]
            },
            "on_set_current_module": {
                "module": [],
                "filepath": [],
                "return": [
                    "None"
                ]
            },
            "writeln": {
                "string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.collecting_reporter": {
        "CollectingReporter": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "reset": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.json_reporter": {
        "JSON2Reporter": {
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "deserialize": {
                "message_as_json": [],
                "return": [
                    "Message"
                ]
            },
            "display_messages": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_reports": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "serialize": {
                "message": [],
                "return": [
                    "JSONMessage"
                ]
            },
            "serialize_stats": {
                "return": [
                    "dict[typing.Text, typing.Union[dict[typing.Text, ],int,float]]"
                ]
            }
        },
        "JSONReporter": {
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "deserialize": {
                "message_as_json": [],
                "return": [
                    "Message"
                ]
            },
            "display_messages": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_reports": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "serialize": {
                "message": [],
                "return": [
                    "dict[typing.Text, typing.Text]"
                ]
            }
        },
        "global": {
            "global": {},
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.reporters.multi_reporter": {
        "MultiReporter": {
            "__del__": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "sub_reporters": [],
                "close_output_files": [],
                "output": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "display_messages": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_reports": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "handle_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            },
            "linter": {
                "return": []
            },
            "on_close": {
                "stats": [],
                "previous_stats": [],
                "return": [
                    "None"
                ]
            },
            "on_set_current_module": {
                "module": [],
                "filepath": [],
                "return": [
                    "None"
                ]
            },
            "out": {
                "return": []
            },
            "path_strip_prefix": {
                "return": []
            },
            "writeln": {
                "string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.reports_handler_mix_in": {
        "ReportsHandlerMixIn": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "disable_report": {
                "reportid": [],
                "return": [
                    "None"
                ]
            },
            "enable_report": {
                "reportid": [],
                "return": [
                    "None"
                ]
            },
            "make_reports": {
                "stats": [],
                "old_stats": [],
                "return": [
                    "Section"
                ]
            },
            "register_report": {
                "reportid": [],
                "r_title": [],
                "r_cb": [],
                "checker": [],
                "return": [
                    "None"
                ]
            },
            "report_is_enabled": {
                "reportid": [],
                "return": []
            },
            "report_order": {
                "return": [
                    "list"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.text": {
        "MessageStyle": {
            "__get_ansi_code": {
                "return": [
                    "typing.Text"
                ]
            },
            "_colorize_ansi": {
                "msg": [],
                "return": [
                    "typing.Text"
                ]
            }
        },
        "ColorizedTextReporter": {
            "__init__": {
                "output": [
                    "None"
                ],
                "color_mapping": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_get_decoration": {
                "msg_id": [],
                "return": [
                    "MessageStyle"
                ]
            },
            "handle_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            }
        },
        "ParseableTextReporter": {
            "__init__": {
                "output": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "TextReporter": {
            "__init__": {
                "output": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "handle_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            },
            "on_set_current_module": {
                "module": [],
                "filepath": [],
                "return": [
                    "None"
                ]
            },
            "write_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "colorize_ansi": {
                "msg": [],
                "msg_style": [],
                "return": []
            },
            "global": {},
            "make_header": {
                "msg": [],
                "return": [
                    "typing.Text"
                ]
            },
            "register": {
                "linter": [],
                "return": [
                    "None"
                ]
            }
        },
        "NoHeaderReporter": {
            "handle_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            }
        },
        "GithubReporter": {
            "write_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.reporters.ureports": {
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.ureports.base_writer": {
        "BaseWriter": {
            "begin_format": {
                "return": [
                    "None"
                ]
            },
            "compute_content": {
                "layout": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "end_format": {
                "return": [
                    "None"
                ]
            },
            "format": {
                "layout": [],
                "stream": [],
                "encoding": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "format_children": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "get_table_content": {
                "table": [],
                "return": [
                    "list[list[typing.Text]]"
                ]
            },
            "write": {
                "string": [],
                "return": [
                    "None"
                ]
            },
            "writeln": {
                "string": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.ureports.nodes": {
        "BaseLayout": {
            "__init__": {
                "children": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "add_text": {
                "text": [],
                "return": [
                    "None"
                ]
            },
            "append": {
                "child": [],
                "return": [
                    "None"
                ]
            },
            "insert": {
                "index": [],
                "child": [],
                "return": [
                    "None"
                ]
            },
            "parents": {
                "return": [
                    "list",
                    "list[None]"
                ]
            }
        },
        "EvaluationSection": {
            "__init__": {
                "message": [],
                "children": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "Section": {
            "__init__": {
                "title": [
                    "None"
                ],
                "description": [
                    "None"
                ],
                "children": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "Table": {
            "__init__": {
                "cols": [],
                "title": [
                    "None"
                ],
                "rheaders": [
                    "int"
                ],
                "cheaders": [
                    "int"
                ],
                "children": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "Text": {
            "__init__": {
                "data": [],
                "escaped": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "VNode": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": []
            },
            "accept": {
                "visitor": [],
                "kwargs": [],
                "args": [],
                "return": []
            },
            "leave": {
                "visitor": [],
                "kwargs": [],
                "args": [],
                "return": []
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.reporters.ureports.text_writer": {
        "TextWriter": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "default_table": {
                "layout": [],
                "table_content": [],
                "cols_width": [],
                "return": [
                    "None"
                ]
            },
            "visit_evaluationsection": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "visit_paragraph": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "visit_section": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "visit_table": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "visit_text": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "visit_title": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "visit_verbatimtext": {
                "layout": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils": {
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._primer": {
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._primer.package_to_lint": {
        "DirtyPrimerDirectoryException": {
            "__init__": {
                "path": [],
                "return": [
                    "None"
                ]
            }
        },
        "PackageToLint": {
            "__init__": {
                "url": [],
                "branch": [],
                "directories": [],
                "commit": [
                    "None"
                ],
                "pylint_additional_args": [
                    "None"
                ],
                "pylintrc_relpath": [
                    "None"
                ],
                "minimum_python": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "_clone_repository": {
                "return": [
                    "str"
                ]
            },
            "_pull_repository": {
                "return": [
                    "str"
                ]
            },
            "clone_directory": {
                "return": []
            },
            "lazy_clone": {
                "return": []
            },
            "paths_to_lint": {
                "return": [
                    "list[str]"
                ]
            },
            "pylint_args": {
                "return": []
            },
            "pylintrc": {
                "return": [
                    "typing.Text"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._primer.primer": {
        "Primer": {
            "__init__": {
                "primer_directory": [],
                "json_path": [],
                "return": [
                    "None"
                ]
            },
            "_get_packages_to_lint_from_json": {
                "json_path": [],
                "return": [
                    "dict[, PackageToLint]"
                ]
            },
            "_minimum_python_supported": {
                "package_data": [],
                "return": [
                    "bool"
                ]
            },
            "run": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._primer.primer_command": {
        "PrimerCommand": {
            "__init__": {
                "primer_directory": [],
                "packages": [],
                "config": [],
                "return": [
                    "None"
                ]
            },
            "run": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._primer.primer_compare_command": {
        "CompareCommand": {
            "_create_comment": {
                "all_missing_messages": [],
                "all_new_messages": [],
                "return": []
            },
            "_create_comment_for_package": {
                "package": [],
                "new_messages": [],
                "missing_messages": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_cross_reference": {
                "main_data": [],
                "pr_data": [],
                "return": [
                    "tuple[dict[, PackageData]]"
                ]
            },
            "_load_json": {
                "file_path": [],
                "return": []
            },
            "_truncate_comment": {
                "comment": [],
                "return": [
                    "typing.Text"
                ]
            },
            "run": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._primer.primer_prepare_command": {
        "global": {
            "global": {}
        },
        "PrepareCommand": {
            "run": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.testutils._primer.primer_run_command": {
        "RunCommand": {
            "_filter_fatal_errors": {
                "messages": [],
                "return": [
                    "list"
                ]
            },
            "_lint_package": {
                "package_name": [],
                "data": [],
                "return": [
                    "tuple[list]"
                ]
            },
            "_print_msgs": {
                "msgs": [],
                "return": [
                    "str"
                ]
            },
            "run": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils._run": {
        "_Run": {
            "__init__": {
                "args": [],
                "reporter": [
                    "None"
                ],
                "exit": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_add_rcfile_default_pylintrc": {
                "args": [],
                "return": [
                    "list[typing.Union[int,typing.Text]]"
                ]
            },
            "global": {}
        }
    },
    "pylint.testutils.checker_test_case": {
        "CheckerTestCase": {
            "assertAddsMessages": {
                "ignore_position": [
                    "bool"
                ],
                "messages": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "assertNoMessages": {
                "return": [
                    "typing.Generator"
                ]
            },
            "setup_method": {
                "return": [
                    "None"
                ]
            },
            "walk": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.configuration_test": {
        "global": {
            "get_expected_configuration": {
                "configuration_path": [],
                "default_configuration": [],
                "return": []
            },
            "get_expected_or_default": {
                "tested_configuration_file": [],
                "suffix": [],
                "default": [],
                "return": [
                    "str"
                ]
            },
            "get_expected_output": {
                "configuration_path": [],
                "user_specific_path": [],
                "return": [
                    "tuple[typing.Union[int,typing.Text]]",
                    "tuple[int]"
                ]
            },
            "get_related_files": {
                "tested_configuration_file": [],
                "suffix_filter": [],
                "return": [
                    "list"
                ]
            },
            "global": {},
            "run_using_a_configuration_file": {
                "configuration_path": [],
                "file_to_lint": [],
                "return": [
                    "Run"
                ]
            }
        }
    },
    "pylint.testutils.constants": {
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.functional": {
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.functional.find_functional_tests": {
        "global": {
            "_check_functional_tests_structure": {
                "directory": [],
                "max_file_per_directory": [],
                "return": [
                    "None"
                ]
            },
            "_get_files_from_dir": {
                "path": [],
                "violations": [],
                "return": [
                    "list"
                ]
            },
            "get_functional_test_files_from_directory": {
                "input_dir": [],
                "max_file_per_directory": [
                    "int"
                ],
                "return": [
                    "list[FunctionalTestFile]"
                ]
            },
            "global": {},
            "walk": {
                "path": [],
                "return": [
                    "typing.Generator"
                ]
            }
        }
    },
    "pylint.testutils.functional.lint_module_output_update": {
        "LintModuleOutputUpdate": {
            "_check_output_text": {
                "_": [],
                "expected_output": [],
                "actual_output": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.functional.test_file": {
        "FunctionalTestFile": {
            "__init__": {
                "directory": [],
                "filename": [],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "typing.Text"
                ]
            },
            "_file_type": {
                "ext": [],
                "check_exists": [
                    "bool"
                ],
                "return": []
            },
            "_parse_options": {
                "return": [
                    "None"
                ]
            },
            "expected_output": {
                "return": []
            },
            "module": {
                "return": [
                    "str"
                ]
            },
            "option_file": {
                "return": []
            },
            "source": {
                "return": []
            }
        },
        "global": {
            "global": {},
            "parse_python_version": {
                "ver_str": [],
                "return": [
                    "tuple[int]"
                ]
            }
        }
    },
    "pylint.testutils.get_test_info": {
        "global": {
            "_get_tests_info": {
                "input_dir": [],
                "msg_dir": [],
                "prefix": [],
                "suffix": [],
                "return": [
                    "list[tuple]"
                ]
            },
            "global": {}
        }
    },
    "pylint.testutils.global_test_linter": {
        "global": {
            "create_test_linter": {
                "return": [
                    "PyLinter"
                ]
            },
            "global": {}
        }
    },
    "pylint.testutils.lint_module_test": {
        "LintModuleTest": {
            "__init__": {
                "test_file": [],
                "config": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__str__": {
                "return": [
                    "typing.Text"
                ]
            },
            "_check_output_text": {
                "_": [],
                "expected_output": [],
                "actual_output": [],
                "return": [
                    "None"
                ]
            },
            "_get_actual": {
                "return": [
                    "tuple[typing.Union[Counter,list]]"
                ]
            },
            "_get_expected": {
                "return": [
                    "tuple[typing.Union[Counter,list]]"
                ]
            },
            "_open_expected_file": {
                "return": [
                    "typing.IO",
                    "StringIO"
                ]
            },
            "_open_source_file": {
                "return": [
                    "typing.IO"
                ]
            },
            "_runTest": {
                "return": [
                    "None"
                ]
            },
            "_should_be_skipped_due_to_version": {
                "return": [
                    "bool"
                ]
            },
            "error_msg_for_unequal_messages": {
                "actual_messages": [],
                "expected_messages": [],
                "actual_output": [],
                "return": [
                    "str"
                ]
            },
            "error_msg_for_unequal_output": {
                "expected_lines": [],
                "received_lines": [],
                "return": [
                    "typing.Text"
                ]
            },
            "get_expected_messages": {
                "stream": [],
                "return": [
                    "Counter"
                ]
            },
            "multiset_difference": {
                "expected_entries": [],
                "actual_entries": [],
                "return": [
                    "tuple[dict]"
                ]
            },
            "runTest": {
                "return": [
                    "None"
                ]
            },
            "setUp": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.output_line": {
        "OutputLine": {
            "_get_column": {
                "column": [],
                "return": [
                    "int"
                ]
            },
            "_get_end_line_and_end_col": {
                "value": [],
                "check_endline": [],
                "return": [
                    "None"
                ]
            },
            "_value_to_optional_int": {
                "value": [],
                "return": [
                    "None",
                    "int"
                ]
            },
            "from_csv": {
                "cls": [],
                "row": [],
                "check_endline": [
                    "bool"
                ],
                "return": []
            },
            "from_msg": {
                "cls": [],
                "msg": [],
                "check_endline": [
                    "bool"
                ],
                "return": []
            },
            "to_csv": {
                "return": [
                    "tuple[str]"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.pyreverse": {
        "PyreverseConfig": {
            "__init__": {
                "mode": [
                    "typing.Text"
                ],
                "classes": [
                    "None"
                ],
                "show_ancestors": [
                    "None"
                ],
                "all_ancestors": [
                    "None"
                ],
                "show_associated": [
                    "None"
                ],
                "all_associated": [
                    "None"
                ],
                "no_standalone": [
                    "bool"
                ],
                "show_builtin": [
                    "bool"
                ],
                "show_stdlib": [
                    "bool"
                ],
                "module_names": [
                    "None"
                ],
                "only_classnames": [
                    "bool"
                ],
                "output_format": [
                    "typing.Text"
                ],
                "colorized": [
                    "bool"
                ],
                "max_color_depth": [
                    "int"
                ],
                "color_palette": [],
                "ignore_list": [
                    "tuple"
                ],
                "project": [
                    "typing.Text"
                ],
                "output_directory": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_read_config": {
                "config_file": [],
                "return": [
                    "dict[typing.Text, list]"
                ]
            },
            "get_functional_test_files": {
                "root_directory": [],
                "return": [
                    "list[FunctionalPyreverseTestfile]"
                ]
            },
            "global": {}
        }
    },
    "pylint.testutils.reporter_for_tests": {
        "GenericTestReporter": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_reports": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "finalize": {
                "return": []
            },
            "handle_message": {
                "msg": [],
                "return": [
                    "None"
                ]
            },
            "on_set_current_module": {
                "module": [],
                "filepath": [],
                "return": [
                    "None"
                ]
            },
            "reset": {
                "return": [
                    "None"
                ]
            }
        },
        "FunctionalTestReporter": {
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "display_reports": {
                "layout": [],
                "return": [
                    "None"
                ]
            }
        },
        "MinimalTestReporter": {
            "_display": {
                "layout": [],
                "return": [
                    "None"
                ]
            },
            "on_set_current_module": {
                "module": [],
                "filepath": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.tokenize_str": {
        "global": {
            "_tokenize_str": {
                "code": [],
                "return": [
                    "list"
                ]
            },
            "global": {}
        }
    },
    "pylint.testutils.unittest_linter": {
        "UnittestLinter": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "add_message": {
                "msgid": [],
                "line": [
                    "None"
                ],
                "node": [
                    "None"
                ],
                "args": [
                    "None"
                ],
                "confidence": [
                    "None"
                ],
                "col_offset": [
                    "None"
                ],
                "end_lineno": [
                    "None"
                ],
                "end_col_offset": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "is_message_enabled": {
                "unused_kwargs": [],
                "unused_args": [],
                "return": [
                    "bool"
                ]
            },
            "release_messages": {
                "return": []
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.testutils.utils": {
        "global": {
            "_patch_streams": {
                "out": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "_test_cwd": {
                "current_working_directory": [
                    "None"
                ],
                "return": [
                    "typing.Generator"
                ]
            },
            "_test_environ_pythonpath": {
                "new_pythonpath": [
                    "None"
                ],
                "return": [
                    "typing.Generator"
                ]
            },
            "_test_sys_path": {
                "replacement_sys_path": [
                    "None"
                ],
                "return": [
                    "typing.Generator"
                ]
            },
            "create_files": {
                "paths": [],
                "chroot": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            },
            "global": {}
        }
    },
    "pylint.typing": {
        "GetProjectCallable": {
            "__call__": {
                "module": [],
                "name": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.utils": {
        "global": {
            "global": {}
        }
    },
    "pylint.utils.ast_walker": {
        "ASTWalker": {
            "__init__": {
                "linter": [],
                "return": [
                    "None"
                ]
            },
            "_is_method_enabled": {
                "method": [],
                "return": [
                    "bool"
                ]
            },
            "add_checker": {
                "checker": [],
                "return": [
                    "None"
                ]
            },
            "walk": {
                "astroid": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.utils.docs": {
        "global": {
            "_get_checkers_documentation": {
                "linter": [],
                "show_options": [
                    "bool"
                ],
                "return": []
            },
            "_get_checkers_infos": {
                "linter": [],
                "return": [
                    "dict[, dict[typing.Text, list]]"
                ]
            },
            "_get_global_options_documentation": {
                "linter": [],
                "return": []
            },
            "global": {},
            "print_full_documentation": {
                "linter": [],
                "stream": [],
                "show_options": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pylint.utils.file_state": {
        "FileState": {
            "__init__": {
                "modname": [],
                "msg_store": [],
                "node": [
                    "None"
                ],
                "is_base_filestate": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "_set_message_state_in_block": {
                "msg": [],
                "lines": [],
                "node": [],
                "firstchildlineno": [],
                "return": [
                    "None"
                ]
            },
            "_set_message_state_on_line": {
                "msg": [],
                "line": [],
                "state": [],
                "original_lineno": [],
                "return": [
                    "None"
                ]
            },
            "_set_state_on_block_lines": {
                "msgs_store": [],
                "node": [],
                "msg": [],
                "msg_state": [],
                "return": [
                    "None"
                ]
            },
            "get_effective_max_line_number": {
                "return": []
            },
            "handle_ignored_message": {
                "state_scope": [],
                "msgid": [],
                "line": [],
                "return": [
                    "None"
                ]
            },
            "iter_spurious_suppression_messages": {
                "msgs_store": [],
                "return": [
                    "typing.Generator[tuple[typing.Union[typing.Text,tuple]]]"
                ]
            },
            "set_msg_status": {
                "msg": [],
                "line": [],
                "status": [],
                "scope": [
                    "typing.Text"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "pylint.utils.linterstats": {
        "LinterStats": {
            "__init__": {
                "bad_names": [
                    "None"
                ],
                "by_module": [
                    "None"
                ],
                "by_msg": [
                    "None"
                ],
                "code_type_count": [
                    "None"
                ],
                "dependencies": [
                    "None"
                ],
                "duplicated_lines": [
                    "None"
                ],
                "node_count": [
                    "None"
                ],
                "undocumented": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "typing.Text"
                ]
            },
            "get_bad_names": {
                "node_name": [],
                "return": []
            },
            "get_code_count": {
                "type_name": [],
                "return": []
            },
            "get_global_message_count": {
                "type_name": [],
                "return": []
            },
            "get_module_message_count": {
                "modname": [],
                "type_name": [],
                "return": []
            },
            "get_node_count": {
                "node_name": [],
                "return": []
            },
            "get_undocumented": {
                "node_name": [],
                "return": []
            },
            "increase_bad_name": {
                "node_name": [],
                "increase": [],
                "return": [
                    "None"
                ]
            },
            "increase_single_message_count": {
                "type_name": [],
                "increase": [],
                "return": [
                    "None"
                ]
            },
            "increase_single_module_message_count": {
                "modname": [],
                "type_name": [],
                "increase": [],
                "return": [
                    "None"
                ]
            },
            "init_single_module": {
                "module_name": [],
                "return": [
                    "None"
                ]
            },
            "reset_bad_names": {
                "return": [
                    "None"
                ]
            },
            "reset_code_count": {
                "return": [
                    "None"
                ]
            },
            "reset_duplicated_lines": {
                "return": [
                    "None"
                ]
            },
            "reset_message_count": {
                "return": [
                    "None"
                ]
            },
            "reset_node_count": {
                "return": [
                    "None"
                ]
            },
            "reset_undocumented": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "global": {},
            "merge_stats": {
                "stats": [],
                "return": []
            }
        }
    },
    "pylint.utils.pragma_parser": {
        "PragmaParserError": {
            "__init__": {
                "message": [],
                "token": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "emit_pragma_representer": {
                "action": [],
                "messages": [],
                "return": [
                    "PragmaRepresenter"
                ]
            },
            "global": {},
            "parse_pragma": {
                "pylint_pragma": [],
                "return": [
                    "typing.Generator"
                ]
            }
        }
    },
    "pylint.utils.utils": {
        "IsortDriver": {
            "__init__": {
                "config": [],
                "return": [
                    "None"
                ]
            },
            "place_module": {
                "package": [],
                "return": []
            }
        },
        "global": {
            "_check_csv": {
                "value": [],
                "return": []
            },
            "_check_regexp_csv": {
                "value": [],
                "return": [
                    "typing.Generator",
                    "typing.Generator[typing.Generator]"
                ]
            },
            "_comment": {
                "string": [],
                "return": [
                    "typing.Text"
                ]
            },
            "_format_option_value": {
                "optdict": [],
                "value": [],
                "return": [
                    "str"
                ]
            },
            "_ini_format": {
                "stream": [],
                "options": [],
                "return": [
                    "None"
                ]
            },
            "_splitstrip": {
                "string": [],
                "sep": [
                    "typing.Text"
                ],
                "return": [
                    "list"
                ]
            },
            "_unquote": {
                "string": [],
                "return": []
            },
            "cmp": {
                "a": [],
                "b": [],
                "return": [
                    "int"
                ]
            },
            "decoding_stream": {
                "stream": [],
                "encoding": [],
                "errors": [
                    "typing.Text"
                ],
                "return": []
            },
            "diff_string": {
                "old": [],
                "new": [],
                "return": [
                    "typing.Text"
                ]
            },
            "format_section": {
                "stream": [],
                "section": [],
                "options": [],
                "doc": [
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "get_module_and_frameid": {
                "node": [],
                "return": [
                    "tuple[typing.Union[typing.Text,list]]"
                ]
            },
            "get_rst_section": {
                "section": [],
                "options": [],
                "doc": [
                    "None"
                ],
                "return": [
                    "typing.Text"
                ]
            },
            "get_rst_title": {
                "title": [],
                "character": [],
                "return": [
                    "typing.Text"
                ]
            },
            "global": {},
            "normalize_text": {
                "text": [],
                "line_len": [
                    "int"
                ],
                "indent": [
                    "typing.Text"
                ],
                "return": [
                    "str"
                ]
            },
            "register_plugins": {
                "linter": [],
                "directory": [],
                "return": [
                    "None"
                ]
            },
            "tokenize_module": {
                "node": [],
                "return": [
                    "list"
                ]
            }
        }
    }
}