{
    "black": {
        "global": {
            "_black_info": {
                "return": [
                    "typing.Text"
                ]
            },
            "_contains_asexpr": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_format_str_once": {
                "src_contents": [],
                "mode": [],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "typing.Text",
                    "str"
                ]
            },
            "assert_equivalent": {
                "src": [],
                "dst": [],
                "return": [
                    "None"
                ]
            },
            "assert_stable": {
                "src": [],
                "dst": [],
                "mode": [],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "check_stability_and_equivalence": {
                "src_contents": [],
                "dst_contents": [],
                "mode": [],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "decode_bytes": {
                "src": [],
                "return": [
                    "tuple[typing.Text]"
                ]
            },
            "detect_target_versions": {
                "node": [],
                "future_imports": [
                    "None"
                ],
                "return": [
                    "set"
                ]
            },
            "enable_unstable_feature_callback": {
                "c": [],
                "p": [],
                "v": [],
                "return": [
                    "list"
                ]
            },
            "format_cell": {
                "src": [],
                "fast": [],
                "mode": [],
                "return": []
            },
            "format_file_contents": {
                "src_contents": [],
                "fast": [],
                "mode": [],
                "lines": [
                    "tuple"
                ],
                "return": []
            },
            "format_file_in_place": {
                "src": [],
                "fast": [],
                "mode": [],
                "write_back": [],
                "lock": [
                    "None"
                ],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "bool"
                ]
            },
            "format_ipynb_string": {
                "src_contents": [],
                "fast": [],
                "mode": [],
                "return": []
            },
            "format_stdin_to_stdout": {
                "fast": [],
                "content": [
                    "None"
                ],
                "write_back": [],
                "mode": [],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "bool"
                ]
            },
            "format_str": {
                "src_contents": [],
                "mode": [],
                "lines": [
                    "tuple"
                ],
                "return": []
            },
            "get_features_used": {
                "node": [],
                "future_imports": [],
                "return": []
            },
            "get_future_imports": {
                "node": [],
                "return": [
                    "set",
                    "int"
                ]
            },
            "get_imports_from_children": {
                "children": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "get_sources": {
                "root": [],
                "src": [],
                "quiet": [],
                "verbose": [],
                "include": [],
                "exclude": [],
                "extend_exclude": [],
                "force_exclude": [],
                "report": [],
                "stdin_filename": [],
                "return": [
                    "set[Path]"
                ]
            },
            "global": {},
            "main": {
                "ctx": [],
                "code": [],
                "line_length": [],
                "target_version": [],
                "check": [],
                "diff": [],
                "line_ranges": [],
                "color": [],
                "fast": [],
                "pyi": [],
                "ipynb": [],
                "python_cell_magics": [],
                "skip_source_first_line": [],
                "skip_string_normalization": [],
                "skip_magic_trailing_comma": [],
                "preview": [],
                "unstable": [],
                "enable_unstable_feature": [],
                "quiet": [],
                "verbose": [],
                "required_version": [],
                "include": [],
                "exclude": [],
                "extend_exclude": [],
                "force_exclude": [],
                "stdin_filename": [],
                "workers": [],
                "src": [],
                "config": [],
                "return": [
                    "None"
                ]
            },
            "nullcontext": {
                "return": [
                    "typing.Generator"
                ]
            },
            "patched_main": {
                "return": [
                    "None"
                ]
            },
            "path_empty": {
                "src": [],
                "msg": [],
                "quiet": [],
                "verbose": [],
                "ctx": [],
                "return": [
                    "None"
                ]
            },
            "re_compile_maybe_verbose": {
                "regex": [],
                "return": []
            },
            "read_pyproject_toml": {
                "ctx": [],
                "param": [],
                "value": [],
                "return": [
                    "None"
                ]
            },
            "reformat_code": {
                "content": [],
                "fast": [],
                "write_back": [],
                "mode": [],
                "report": [],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "reformat_one": {
                "src": [],
                "fast": [],
                "write_back": [],
                "mode": [],
                "report": [],
                "lines": [
                    "tuple"
                ],
                "return": [
                    "None"
                ]
            },
            "spellcheck_pyproject_toml_keys": {
                "ctx": [],
                "config_keys": [],
                "config_file_path": [],
                "return": [
                    "None"
                ]
            },
            "target_version_option_callback": {
                "c": [],
                "p": [],
                "v": [],
                "return": [
                    "list"
                ]
            },
            "validate_metadata": {
                "nb": [],
                "return": [
                    "None"
                ]
            },
            "validate_regex": {
                "ctx": [],
                "param": [],
                "value": [],
                "return": [
                    "None"
                ]
            }
        },
        "WriteBack": {
            "from_configuration": {
                "cls": [],
                "check": [],
                "diff": [],
                "color": [
                    "bool"
                ],
                "return": []
            }
        }
    },
    "black.__main__": {
        "global": {
            "global": {}
        }
    },
    "black._width_table": {
        "global": {
            "global": {}
        }
    },
    "black.brackets": {
        "BracketTracker": {
            "any_open_brackets": {
                "return": [
                    "bool"
                ]
            },
            "any_open_for_or_lambda": {
                "return": [
                    "bool"
                ]
            },
            "delimiter_count_with_priority": {
                "priority": [
                    "int"
                ],
                "return": [
                    "int"
                ]
            },
            "get_open_lsqb": {
                "return": []
            },
            "mark": {
                "leaf": [],
                "return": [
                    "None"
                ]
            },
            "max_delimiter_priority": {
                "exclude": [
                    "tuple"
                ],
                "return": []
            },
            "maybe_decrement_after_for_loop_variable": {
                "leaf": [],
                "return": [
                    "bool"
                ]
            },
            "maybe_decrement_after_lambda_arguments": {
                "leaf": [],
                "return": [
                    "bool"
                ]
            },
            "maybe_increment_for_loop_variable": {
                "leaf": [],
                "return": [
                    "bool"
                ]
            },
            "maybe_increment_lambda_arguments": {
                "leaf": [],
                "return": [
                    "bool"
                ]
            }
        },
        "global": {
            "get_leaves_inside_matching_brackets": {
                "leaves": [],
                "return": [
                    "set",
                    "set[int]"
                ]
            },
            "global": {},
            "is_split_after_delimiter": {
                "leaf": [],
                "return": [
                    "int"
                ]
            },
            "is_split_before_delimiter": {
                "leaf": [],
                "previous": [
                    "None"
                ],
                "return": [
                    "int"
                ]
            },
            "max_delimiter_priority_in_atom": {
                "node": [],
                "return": [
                    "int"
                ]
            }
        }
    },
    "black.cache": {
        "Cache": {
            "filtered_cached": {
                "sources": [],
                "return": [
                    "tuple[set]"
                ]
            },
            "get_file_data": {
                "path": [],
                "return": [
                    "FileData"
                ]
            },
            "hash_digest": {
                "path": [],
                "return": []
            },
            "is_changed": {
                "source": [],
                "return": [
                    "bool"
                ]
            },
            "read": {
                "cls": [],
                "mode": [],
                "return": []
            },
            "write": {
                "sources": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "get_cache_dir": {
                "return": []
            },
            "get_cache_file": {
                "mode": [],
                "return": []
            },
            "global": {}
        }
    },
    "black.comments": {
        "global": {
            "_contains_fmt_skip_comment": {
                "comment_line": [],
                "mode": [],
                "return": [
                    "bool"
                ]
            },
            "_generate_ignored_nodes_from_fmt_skip": {
                "leaf": [],
                "comment": [],
                "return": [
                    "None",
                    "typing.Generator[list[int]]",
                    "typing.Generator"
                ]
            },
            "children_contains_fmt_on": {
                "container": [],
                "return": [
                    "bool"
                ]
            },
            "contains_pragma_comment": {
                "comment_list": [],
                "return": [
                    "bool"
                ]
            },
            "convert_one_fmt_off_pair": {
                "node": [],
                "mode": [],
                "lines": [],
                "return": [
                    "bool"
                ]
            },
            "generate_comments": {
                "leaf": [],
                "return": [
                    "typing.Generator[Leaf]"
                ]
            },
            "generate_ignored_nodes": {
                "leaf": [],
                "comment": [],
                "mode": [],
                "return": [
                    "typing.Generator",
                    "None"
                ]
            },
            "global": {},
            "is_fmt_on": {
                "container": [],
                "return": [
                    "bool"
                ]
            },
            "list_comments": {
                "prefix": [],
                "is_endmarker": [],
                "return": [
                    "list",
                    "list[ProtoComment]"
                ]
            },
            "make_comment": {
                "content": [],
                "return": [
                    "typing.Text"
                ]
            },
            "normalize_fmt_off": {
                "node": [],
                "mode": [],
                "lines": [],
                "return": [
                    "None"
                ]
            },
            "normalize_trailing_prefix": {
                "leaf": [],
                "total_consumed": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "black.const": {
        "global": {
            "global": {}
        }
    },
    "black.debug": {
        "global": {
            "global": {}
        },
        "DebugVisitor": {
            "out": {
                "message": [],
                "kwargs": [],
                "args": [],
                "return": [
                    "None"
                ]
            },
            "show": {
                "cls": [],
                "code": [],
                "return": [
                    "None"
                ]
            },
            "visit_default": {
                "node": [],
                "return": [
                    "typing.Generator"
                ]
            }
        }
    },
    "black.files": {
        "global": {
            "_cached_resolve": {
                "path": [],
                "return": []
            },
            "_load_toml": {
                "path": [],
                "return": []
            },
            "_path_is_ignored": {
                "root_relative_path": [],
                "root": [],
                "gitignore_dict": [],
                "return": [
                    "bool"
                ]
            },
            "best_effort_relative_path": {
                "path": [],
                "root": [],
                "return": []
            },
            "find_project_root": {
                "srcs": [],
                "stdin_filename": [
                    "None"
                ],
                "return": [
                    "tuple[typing.Union[set,int,typing.Text]]"
                ]
            },
            "find_pyproject_toml": {
                "path_search_start": [],
                "stdin_filename": [
                    "None"
                ],
                "return": [
                    "str",
                    "None"
                ]
            },
            "find_user_pyproject_toml": {
                "return": []
            },
            "gen_python_files": {
                "paths": [],
                "root": [],
                "include": [],
                "exclude": [],
                "extend_exclude": [],
                "force_exclude": [],
                "report": [],
                "gitignore_dict": [],
                "verbose": [],
                "quiet": [],
                "return": [
                    "typing.Generator"
                ]
            },
            "get_gitignore": {
                "root": [],
                "return": []
            },
            "global": {},
            "infer_target_version": {
                "pyproject_toml": [],
                "return": [
                    "None"
                ]
            },
            "parse_pyproject_toml": {
                "path_config": [],
                "return": [
                    "dict[typing.Text, list]"
                ]
            },
            "parse_req_python_specifier": {
                "requires_python": [],
                "return": [
                    "None",
                    "list"
                ]
            },
            "parse_req_python_version": {
                "requires_python": [],
                "return": [
                    "None",
                    "list[TargetVersion]"
                ]
            },
            "path_is_excluded": {
                "normalized_path": [],
                "pattern": [],
                "return": [
                    "bool"
                ]
            },
            "resolves_outside_root_or_cannot_stat": {
                "path": [],
                "root": [],
                "report": [
                    "None"
                ],
                "return": [
                    "bool"
                ]
            },
            "strip_specifier_set": {
                "specifier_set": [],
                "return": [
                    "SpecifierSet"
                ]
            },
            "wrap_stream_for_windows": {
                "f": [],
                "return": []
            }
        }
    },
    "black.mode": {
        "Mode": {
            "__contains__": {
                "feature": [],
                "return": [
                    "bool"
                ]
            },
            "get_cache_key": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "global": {},
            "supports_feature": {
                "target_versions": [],
                "feature": [],
                "return": [
                    "bool"
                ]
            }
        },
        "TargetVersion": {
            "pretty": {
                "return": [
                    "typing.Text"
                ]
            }
        }
    },
    "black.numerics": {
        "global": {
            "format_complex_number": {
                "text": [],
                "return": [
                    "typing.Text"
                ]
            },
            "format_float_or_int_string": {
                "text": [],
                "return": [
                    "typing.Text"
                ]
            },
            "format_hex": {
                "text": [],
                "return": [
                    "typing.Text"
                ]
            },
            "format_scientific_notation": {
                "text": [],
                "return": [
                    "typing.Text"
                ]
            },
            "global": {},
            "normalize_numeric_literal": {
                "leaf": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "black.output": {
        "global": {
            "_err": {
                "message": [
                    "None"
                ],
                "nl": [
                    "bool"
                ],
                "styles": [],
                "return": [
                    "None"
                ]
            },
            "_out": {
                "message": [
                    "None"
                ],
                "nl": [
                    "bool"
                ],
                "styles": [],
                "return": [
                    "None"
                ]
            },
            "_splitlines_no_ff": {
                "source": [],
                "return": [
                    "list"
                ]
            },
            "color_diff": {
                "contents": [],
                "return": [
                    "str"
                ]
            },
            "diff": {
                "a": [],
                "b": [],
                "a_name": [],
                "b_name": [],
                "return": [
                    "str"
                ]
            },
            "dump_to_file": {
                "ensure_final_newline": [
                    "bool"
                ],
                "output": [],
                "return": []
            },
            "err": {
                "message": [
                    "None"
                ],
                "nl": [
                    "bool"
                ],
                "styles": [],
                "return": [
                    "None"
                ]
            },
            "global": {},
            "ipynb_diff": {
                "a": [],
                "b": [],
                "a_name": [],
                "b_name": [],
                "return": [
                    "str"
                ]
            },
            "out": {
                "message": [
                    "None"
                ],
                "nl": [
                    "bool"
                ],
                "styles": [],
                "return": [
                    "None"
                ]
            }
        }
    },
    "black.ranges": {
        "_TopLevelStatementsVisitor": {
            "__init__": {
                "lines_set": [],
                "return": [
                    "None"
                ]
            },
            "visit_simple_stmt": {
                "node": [],
                "return": [
                    "typing.Generator[list]",
                    "None"
                ]
            },
            "visit_suite": {
                "node": [],
                "return": [
                    "typing.Generator[list]",
                    "None"
                ]
            }
        },
        "global": {
            "_calculate_lines_mappings": {
                "original_source": [],
                "modified_source": [],
                "return": [
                    "list[_LinesMapping]"
                ]
            },
            "_contains_standalone_comment": {
                "node": [],
                "return": [
                    "bool"
                ]
            },
            "_convert_node_to_standalone_comment": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "_convert_nodes_to_standalone_comment": {
                "nodes": [],
                "newline": [],
                "return": [
                    "None"
                ]
            },
            "_convert_unchanged_line_by_line": {
                "node": [],
                "lines_set": [],
                "return": [
                    "None"
                ]
            },
            "_find_lines_mapping_index": {
                "original_line": [],
                "lines_mappings": [],
                "start_index": [],
                "return": []
            },
            "_get_line_range": {
                "node_or_nodes": [],
                "return": [
                    "set"
                ]
            },
            "_leaf_line_end": {
                "leaf": [],
                "return": []
            },
            "adjusted_lines": {
                "lines": [],
                "original_source": [],
                "modified_source": [],
                "return": [
                    "list[tuple]"
                ]
            },
            "convert_unchanged_lines": {
                "src_node": [],
                "lines": [],
                "return": [
                    "None"
                ]
            },
            "global": {},
            "is_valid_line_range": {
                "lines": [],
                "return": [
                    "bool"
                ]
            },
            "parse_line_ranges": {
                "line_ranges": [],
                "return": [
                    "list[tuple[int]]"
                ]
            },
            "sanitized_lines": {
                "lines": [],
                "src_contents": [],
                "return": [
                    "list",
                    "list[tuple[int]]"
                ]
            }
        }
    },
    "black.report": {
        "Report": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "done": {
                "src": [],
                "changed": [],
                "return": [
                    "None"
                ]
            },
            "failed": {
                "src": [],
                "message": [],
                "return": [
                    "None"
                ]
            },
            "path_ignored": {
                "path": [],
                "message": [],
                "return": [
                    "None"
                ]
            },
            "return_code": {
                "return": [
                    "int"
                ]
            }
        },
        "global": {
            "global": {}
        }
    },
    "black.resources": {
        "global": {
            "global": {}
        }
    },
    "black.rusty": {
        "Err": {
            "__init__": {
                "e": [],
                "return": [
                    "None"
                ]
            },
            "err": {
                "return": []
            }
        },
        "Ok": {
            "__init__": {
                "value": [],
                "return": [
                    "None"
                ]
            },
            "ok": {
                "return": []
            }
        },
        "global": {
            "global": {}
        }
    },
    "black.schema": {
        "global": {
            "get_schema": {
                "tool_name": [
                    "typing.Text"
                ],
                "return": []
            },
            "global": {}
        }
    },
    "black.strings": {
        "global": {
            "_cached_compile": {
                "pattern": [],
                "return": []
            },
            "assert_is_leaf_string": {
                "string": [],
                "return": [
                    "None"
                ]
            },
            "char_width": {
                "char": [],
                "return": [
                    "int"
                ]
            },
            "count_chars_in_width": {
                "line_str": [],
                "max_width": [],
                "return": [
                    "int"
                ]
            },
            "fix_multiline_docstring": {
                "docstring": [],
                "prefix": [],
                "return": [
                    "str"
                ]
            },
            "get_string_prefix": {
                "string": [],
                "return": [
                    "typing.Text"
                ]
            },
            "global": {},
            "has_triple_quotes": {
                "string": [],
                "return": [
                    "bool"
                ]
            },
            "lines_with_leading_tabs_expanded": {
                "s": [],
                "return": [
                    "list[typing.Text]"
                ]
            },
            "normalize_fstring_quotes": {
                "quote": [],
                "middles": [],
                "is_raw_fstring": [],
                "return": [
                    "tuple",
                    "tuple[typing.Text]"
                ]
            },
            "normalize_string_prefix": {
                "s": [],
                "return": [
                    "typing.Text"
                ]
            },
            "normalize_string_quotes": {
                "s": [],
                "return": [
                    "typing.Text"
                ]
            },
            "normalize_unicode_escape_sequences": {
                "leaf": [],
                "return": [
                    "None"
                ]
            },
            "replace": {
                "m": [],
                "return": []
            },
            "str_width": {
                "line_str": [],
                "return": [
                    "int",
                    "bool"
                ]
            },
            "sub_twice": {
                "regex": [],
                "replacement": [],
                "original": [],
                "return": []
            }
        }
    }
}