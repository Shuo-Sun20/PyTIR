{
    "typer._completion_classes": {
        "ZshComplete": {
            "complete": {
                "return": []
            },
            "format_completion": {
                "return": [
                    "str",
                    "item.help",
                    "escape"
                ],
                "item": [
                    "help",
                    "item",
                    "value",
                    "escape",
                    "List"
                ]
            },
            "get_completion_args": {
                "return": [
                    "incomplete",
                    "tuple",
                    "args",
                    "Tuple[Any, Any]"
                ]
            },
            "source_vars": {
                "return": [
                    "dict",
                    "dict[str, str]",
                    "Dict[str, str]"
                ]
            }
        },
        "BashComplete": {
            "complete": {
                "return": [
                    "str",
                    "out",
                    "complete"
                ]
            },
            "format_completion": {
                "item": [],
                "return": []
            },
            "source_vars": {
                "return": []
            },
            "get_completion_args": {
                "return": [
                    "incomplete",
                    "tuple",
                    "args",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "FishComplete": {
            "complete": {
                "return": [
                    "str"
                ]
            },
            "format_completion": {
                "item": [],
                "return": []
            },
            "source_vars": {
                "return": []
            },
            "get_completion_args": {
                "return": [
                    "tuple",
                    "incomplete",
                    "args",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "global": {
            "completion_init": {
                "return": [
                    "None"
                ]
            },
            "_sanitize_help_text": {
                "return": [
                    "text",
                    "str",
                    "rich"
                ],
                "text": [
                    "str",
                    "text"
                ]
            }
        },
        "PowerShellComplete": {
            "format_completion": {
                "return": [
                    "str",
                    "item.help",
                    "item.value"
                ],
                "item": [
                    "item",
                    "help",
                    "CompletionItem",
                    "None"
                ]
            },
            "get_completion_args": {
                "return": []
            },
            "source_vars": {
                "return": []
            }
        }
    },
    "typer._completion_shared": {
        "global": {
            "get_completion_script": {
                "return": [
                    "str",
                    "script"
                ],
                "prog_name": [
                    "str",
                    "replace"
                ],
                "shell": [],
                "complete_var": []
            },
            "install": {
                "complete_var": [
                    "str",
                    "replace",
                    "format"
                ],
                "shell": [
                    "str",
                    "None",
                    "shell",
                    "Optional[str]",
                    "Optional"
                ],
                "return": [
                    "tuple[str, str]",
                    "tuple[str, Any]",
                    "Tuple[str, str]",
                    "Tuple[str, Any]",
                    "shell",
                    "Any"
                ],
                "prog_name": []
            },
            "install_bash": {
                "complete_var": [
                    "str",
                    "cvar"
                ],
                "return": [
                    "pathlib",
                    "Path",
                    "pathlib.Path"
                ],
                "shell": [
                    "shell",
                    "str",
                    "click"
                ],
                "prog_name": []
            },
            "install_fish": {
                "prog_name": [
                    "str",
                    "Command",
                    "ParamType",
                    "Path",
                    "click",
                    "StringParamType",
                    "Parameter"
                ],
                "complete_var": [
                    "str",
                    "cvar",
                    "BadArgumentUsage"
                ],
                "return": [],
                "shell": [
                    "str",
                    "shell",
                    "None"
                ]
            },
            "install_powershell": {
                "shell": [],
                "complete_var": [
                    "str",
                    "cvar",
                    "shell"
                ],
                "return": [],
                "prog_name": [
                    "str"
                ]
            },
            "install_zsh": {
                "complete_var": [
                    "str",
                    "cvar"
                ],
                "return": [],
                "shell": [],
                "prog_name": [
                    "str",
                    "upper"
                ]
            }
        }
    },
    "typer._types": {
        "TyperChoice": {
            "normalize_choice": {
                "choice": [],
                "return": [
                    "choice",
                    "ctx",
                    "float",
                    "Params",
                    "None",
                    "Game"
                ],
                "ctx": [
                    "Context",
                    "ctx",
                    "obj",
                    "None",
                    "ctx.obj",
                    "asyncHandler"
                ]
            }
        }
    },
    "typer._typing": {
        "global": {
            "all_literal_values": {
                "return": [
                    "tuple",
                    "values",
                    "Tuple[Any, ...]",
                    "Literal",
                    "False"
                ],
                "type_": [
                    "Literal",
                    "Union",
                    "Type",
                    "Any"
                ]
            },
            "is_callable_type": {
                "return": [
                    "False",
                    "bool",
                    "Callable"
                ],
                "type_": []
            },
            "is_none_type": {
                "return": [],
                "type_": [
                    "Any",
                    "int",
                    "type",
                    "Union",
                    "typing",
                    "None",
                    "Type",
                    "Type[Any]",
                    "str"
                ]
            },
            "is_union": {
                "return": [
                    "None",
                    "False",
                    "bool"
                ],
                "tp": []
            },
            "is_literal_type": {
                "type_": [
                    "Type",
                    "Literal",
                    "typing",
                    "Any",
                    "Type[Any]",
                    "List[int]"
                ],
                "return": []
            },
            "global": {
                "NONE_TYPES": []
            },
            "literal_values": {
                "return": [
                    "typing",
                    "List[int]",
                    "Tuple"
                ],
                "type_": [
                    "Type",
                    "EventType",
                    "typing",
                    "int",
                    "Callable",
                    "Any",
                    "Union",
                    "Union[int, str]"
                ]
            }
        }
    },
    "typer.cli": {
        "State": {
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_parse_html": {
                "input_text": [
                    "str",
                    "False",
                    "None",
                    "rich"
                ],
                "return": [
                    "None",
                    "True"
                ]
            },
            "callback": {
                "func": [
                    "func",
                    "None",
                    "typer.Option",
                    "str",
                    "typing",
                    "Optional[Any]",
                    "Optional[Callable]",
                    "typing.Callable"
                ],
                "ctx": [
                    "ctx",
                    "click.Context",
                    "cls",
                    "TyperCLIGroup",
                    "Context",
                    "typer.Option",
                    "typer.Argument",
                    "click.Group",
                    "typer.Context"
                ],
                "path_or_module": [],
                "version": [],
                "app": [
                    "Optional[Any]",
                    "None",
                    "Any",
                    "typer.Option",
                    "app",
                    "Optional[Typer]",
                    "str",
                    "typer.Typer"
                ],
                "return": []
            },
            "docs": {
                "ctx": [
                    "click.Context",
                    "ctx",
                    "Context",
                    "maxpoints",
                    "ctx.obj.batchMB"
                ],
                "name": [
                    "typer.Option",
                    "str",
                    "name",
                    "help"
                ],
                "output": [
                    "str",
                    "typer.Option",
                    "output",
                    "Path",
                    "pathlib",
                    "pathlib.Path",
                    "Optional[str]",
                    "typer.FileTextWrite",
                    "None"
                ],
                "title": [
                    "None",
                    "str",
                    "help",
                    "Optional[str]",
                    "title",
                    "typer.Option"
                ],
                "return": []
            },
            "get_docs_for_click": {
                "indent": [
                    "int",
                    "indent"
                ],
                "call_prefix": [],
                "return": [],
                "ctx": [],
                "title": [],
                "name": [],
                "obj": []
            },
            "get_typer_from_module": {
                "module": [
                    "types.ModuleType",
                    "module",
                    "ModuleType",
                    "types",
                    "dir",
                    "importlib"
                ],
                "return": []
            },
            "get_typer_from_state": {
                "return": []
            },
            "main": {
                "return": [
                    "app",
                    "main",
                    "WSGIServer"
                ]
            },
            "print_version": {
                "return": [],
                "ctx": [
                    "Context",
                    "ctx",
                    "Option"
                ],
                "param": [
                    "Parameter",
                    "param",
                    "Option",
                    "None",
                    "Argument",
                    "value"
                ],
                "value": []
            },
            "maybe_update_state": {
                "return": [],
                "ctx": []
            },
            "maybe_add_run_to_cli": {
                "return": [],
                "cli": []
            }
        },
        "TyperCLIGroup": {
            "get_command": {
                "name": [
                    "str",
                    "name"
                ],
                "ctx": [
                    "click.Context",
                    "ctx",
                    "Group",
                    "Context"
                ],
                "return": []
            },
            "maybe_add_run": {
                "return": [],
                "ctx": [
                    "set",
                    "keys",
                    "ctx",
                    "extras",
                    "None",
                    "TargetContext",
                    "TestContext",
                    "click.Context",
                    "ContextMember"
                ]
            },
            "invoke": {
                "ctx": [
                    "Context",
                    "ctx",
                    "click",
                    "click.Context",
                    "None"
                ],
                "return": []
            },
            "list_commands": {
                "return": [
                    "List[str]"
                ],
                "ctx": [
                    "helper",
                    "ctx",
                    "Context",
                    "List[tuple]",
                    "servers",
                    "List"
                ]
            }
        }
    },
    "typer.completion": {
        "global": {
            "_install_completion_no_auto_placeholder_function": {
                "return": [],
                "show_completion": [],
                "install_completion": [
                    "click",
                    "Option",
                    "help"
                ]
            },
            "_install_completion_placeholder_function": {
                "return": [
                    "None",
                    "Option"
                ],
                "install_completion": [],
                "show_completion": []
            },
            "get_completion_inspect_parameters": {
                "return": [
                    "Tuple[Any, Any]",
                    "Tuple",
                    "Tuple[Unknown, Unknown]",
                    "Parameter",
                    "Tuple[Parameter, Parameter]",
                    "tuple"
                ]
            },
            "install_callback": {
                "return": [],
                "param": [
                    "Option",
                    "Parameter",
                    "Argument",
                    "param"
                ],
                "ctx": [],
                "value": [
                    "None",
                    "str",
                    "Optional[str]",
                    "value",
                    "False",
                    "Optional[str, None]"
                ]
            },
            "shell_complete": {
                "return": [
                    "int"
                ],
                "ctx_args": [
                    "Context",
                    "Mapping",
                    "ChainMap",
                    "dict",
                    "click",
                    "Mapping[str, Any]",
                    "BaseCommand"
                ],
                "complete_var": [],
                "instruction": [],
                "prog_name": [
                    "str",
                    "upper",
                    "click"
                ],
                "cli": []
            },
            "show_callback": {
                "ctx": [
                    "Context",
                    "None",
                    "value",
                    "ctx",
                    "click.Context",
                    "Optional[ForwardingPort]"
                ],
                "param": [
                    "Option",
                    "Parameter",
                    "param",
                    "Argument"
                ],
                "value": [
                    "value",
                    "str",
                    "Optional[str]",
                    "None",
                    "False",
                    "bool"
                ],
                "return": [
                    "value",
                    "None"
                ]
            }
        }
    },
    "typer.core": {
        "TyperArgument": {
            "__init__": {
                "hidden": [
                    "False",
                    "bool"
                ],
                "callback": [
                    "Callable",
                    "callback"
                ],
                "expose_value": [
                    "True",
                    "bool",
                    "False",
                    "Any",
                    "argparse"
                ],
                "help": [
                    "None",
                    "help",
                    "Optional[str]",
                    "self.help",
                    "str",
                    "Any",
                    "Optional",
                    "Optional[Any]"
                ],
                "default": [
                    "Any",
                    "default",
                    "None",
                    "Optional",
                    "Optional[Any]"
                ],
                "is_eager": [],
                "nargs": [
                    "nargs"
                ],
                "autocompletion": [],
                "rich_help_panel": [
                    "bool",
                    "Optional[str]"
                ],
                "metavar": [],
                "required": [
                    "None",
                    "required",
                    "bool",
                    "Optional",
                    "Optional[bool]",
                    "False"
                ],
                "show_envvar": [],
                "envvar": [],
                "show_choices": [
                    "True",
                    "bool"
                ],
                "show_default": [],
                "shell_complete": [
                    "Callable",
                    "None",
                    "click",
                    "Optional[Callable]",
                    "Any"
                ],
                "type": [
                    "Optional[ParamType]",
                    "ParamType",
                    "None",
                    "Choice",
                    "type",
                    "Optional",
                    "callback"
                ],
                "param_decls": []
            },
            "_extract_default_help_str": {
                "return": [],
                "ctx": [
                    "Context",
                    "ctx",
                    "Parameter",
                    "ParamType"
                ]
            },
            "_get_default_string": {
                "default_value": [
                    "Any",
                    "None"
                ],
                "ctx": [],
                "show_default_is_str": [
                    "bool"
                ],
                "return": []
            },
            "get_help_record": {
                "return": [],
                "ctx": [
                    "Context",
                    "ctx"
                ]
            },
            "make_metavar": {
                "ctx": [
                    "Context",
                    "click.Context",
                    "ctx",
                    "click",
                    "msg",
                    "echo"
                ],
                "return": []
            }
        },
        "TyperCommand": {
            "__init__": {
                "add_help_option": [
                    "True",
                    "bool",
                    "False",
                    "help"
                ],
                "return": [
                    "None"
                ],
                "context_settings": [],
                "hidden": [
                    "False",
                    "hidden",
                    "bool"
                ],
                "help": [
                    "Optional[str]",
                    "None",
                    "help",
                    "Optional",
                    "dest",
                    "str",
                    "Union[str, None]"
                ],
                "name": [],
                "rich_help_panel": [
                    "None",
                    "Optional[str]"
                ],
                "no_args_is_help": [],
                "callback": [
                    "Callable",
                    "callback",
                    "None"
                ],
                "short_help": [],
                "deprecated": [
                    "bool",
                    "False",
                    "deprecated",
                    "None",
                    "hidden",
                    "Nonebool"
                ],
                "epilog": [
                    "epilog",
                    "str",
                    "None",
                    "help"
                ],
                "options_metavar": [
                    "str"
                ],
                "params": [],
                "rich_markup_mode": []
            },
            "_main_shell_completion": {
                "ctx_args": [],
                "complete_var": [],
                "prog_name": [
                    "str",
                    "typer",
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "format_help": {
                "ctx": [
                    "Context",
                    "ctx",
                    "click.Context",
                    "click"
                ],
                "return": [],
                "formatter": [
                    "HelpFormatter",
                    "formatter",
                    "section",
                    "Option",
                    "opts"
                ]
            },
            "format_options": {
                "return": [
                    "None",
                    "List[str]",
                    "rv",
                    "Tuple[str, str]",
                    "Context",
                    "Formatter"
                ],
                "formatter": [],
                "ctx": [
                    "Context",
                    "ctx",
                    "Option"
                ]
            },
            "main": {
                "complete_var": [],
                "args": [
                    "args",
                    "main",
                    "List[str]"
                ],
                "return": [
                    "main",
                    "None"
                ],
                "prog_name": [
                    "str",
                    "None",
                    "Optional[str]"
                ],
                "extra": [
                    "dict",
                    "Dict[str, Any]",
                    "extra",
                    "Dict",
                    "Mapping",
                    "Any"
                ],
                "windows_expand_args": [],
                "standalone_mode": []
            }
        },
        "TyperGroup": {
            "__init__": {
                "return": [],
                "name": [
                    "None",
                    "name",
                    "Optional[str]"
                ],
                "rich_help_panel": [
                    "None",
                    "Optional[SomePanelType]",
                    "..."
                ],
                "attrs": [],
                "commands": [],
                "rich_markup_mode": []
            },
            "_main_shell_completion": {
                "return": [
                    "None",
                    "cvar",
                    "pass"
                ],
                "ctx_args": [],
                "prog_name": [
                    "str",
                    "None",
                    "typer"
                ],
                "complete_var": []
            },
            "format_help": {
                "ctx": [],
                "return": [],
                "formatter": [
                    "HelpFormatter",
                    "formatter",
                    "Group"
                ]
            },
            "format_options": {
                "return": [
                    "None",
                    "List[str]",
                    "rv",
                    "packages",
                    "Context"
                ],
                "ctx": [],
                "formatter": [
                    "HelpFormatter",
                    "formatter",
                    "ConsoleStream",
                    "formatter.width"
                ]
            },
            "list_commands": {
                "return": [
                    "List[str]",
                    "self.commands",
                    "list",
                    "n",
                    "List",
                    "str"
                ],
                "ctx": [
                    "Context",
                    "ctx",
                    "commands.command",
                    "discord.py",
                    "commands",
                    "List",
                    "List[str]",
                    "consent",
                    "list"
                ]
            },
            "main": {
                "complete_var": [],
                "prog_name": [
                    "None",
                    "Optional",
                    "Optional[str]"
                ],
                "args": [],
                "windows_expand_args": [],
                "return": [
                    "main",
                    "None"
                ],
                "extra": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict",
                    "extra",
                    "Mapping",
                    "Any",
                    "List",
                    "Mapping[str, Any]"
                ],
                "standalone_mode": [
                    "True",
                    "False",
                    "bool",
                    "click"
                ]
            }
        },
        "TyperOption": {
            "__init__": {
                "autocompletion": [
                    "autocompletion",
                    "Any",
                    "None",
                    "Optional[bool]"
                ],
                "count": [
                    "count",
                    "bool",
                    "False",
                    "multiple",
                    "Optional[bool]",
                    "None"
                ],
                "allow_from_autoenv": [],
                "callback": [
                    "Callable",
                    "callback",
                    "Optional[Callable]",
                    "value",
                    "None",
                    "param"
                ],
                "envvar": [],
                "confirmation_prompt": [],
                "default": [],
                "hide_input": [],
                "metavar": [
                    "str",
                    "metavar",
                    "None"
                ],
                "is_flag": [
                    "bool",
                    "None",
                    "Option",
                    "click",
                    "False",
                    "Optional[bool]"
                ],
                "expose_value": [],
                "multiple": [
                    "False",
                    "bool",
                    "count",
                    "multiple",
                    "True"
                ],
                "hidden": [
                    "bool",
                    "hidden",
                    "None",
                    "False",
                    "count"
                ],
                "prompt": [
                    "bool",
                    "False",
                    "prompt",
                    "multiple"
                ],
                "nargs": [],
                "prompt_required": [
                    "bool",
                    "True",
                    "multiple",
                    "False",
                    "Optional[bool]"
                ],
                "required": [
                    "Optional",
                    "None",
                    "Optional[bool]",
                    "required",
                    "bool",
                    "Optional[Any]",
                    "Union[bool, None]",
                    "multiple",
                    "False",
                    "Union[Type, None]"
                ],
                "rich_help_panel": [],
                "help": [
                    "None",
                    "help",
                    "str",
                    "Optional[str]",
                    "Optional[Any]",
                    "required"
                ],
                "shell_complete": [
                    "Optional[Callable]",
                    "Callable",
                    "None",
                    "Any"
                ],
                "show_choices": [],
                "is_eager": [
                    "False",
                    "bool",
                    "argparse",
                    "Optional[bool]",
                    "click"
                ],
                "show_default": [
                    "False",
                    "bool",
                    "True",
                    "multiple",
                    "click.option"
                ],
                "show_envvar": [
                    "bool",
                    "False"
                ],
                "type": [
                    "ParamType",
                    "type",
                    "None",
                    "Choice",
                    "str",
                    "click.ParamType",
                    "click",
                    "StringParamType",
                    "IntParamType",
                    "Optional[ParamType]",
                    "int"
                ],
                "param_decls": []
            },
            "_extract_default_help_str": {
                "ctx": [],
                "return": [
                    "str",
                    "loop"
                ]
            },
            "_get_default_string": {
                "default_value": [
                    "None",
                    "Any",
                    "str",
                    "Optional[Any]"
                ],
                "show_default_is_str": [
                    "bool"
                ],
                "return": [
                    "None",
                    "str"
                ],
                "ctx": [
                    "click.Context",
                    "ctx",
                    "Context",
                    "click"
                ]
            },
            "get_help_record": {
                "ctx": [
                    "Context",
                    "ctx",
                    "Parameter",
                    "click.Context"
                ],
                "return": [
                    "self.hidden",
                    "help",
                    "None",
                    "tuple[str, str]",
                    "Optional",
                    "rv",
                    "Tuple[str, str]",
                    "Tuple"
                ]
            },
            "make_metavar": {
                "return": [],
                "ctx": []
            }
        },
        "global": {
            "_extract_default_help_str": {
                "return": [
                    "obj"
                ],
                "ctx": [],
                "obj": []
            },
            "_get_default_string": {
                "return": [
                    "str"
                ],
                "ctx": [],
                "show_default_is_str": [],
                "default_value": [],
                "obj": [
                    "TyperOption",
                    "obj",
                    "default",
                    "typer",
                    "isinstance",
                    "argparse.Argument"
                ]
            },
            "_main": {
                "return": [
                    "None"
                ],
                "complete_var": [],
                "windows_expand_args": [],
                "self": [
                    "self",
                    "ClassName",
                    "Any",
                    "click.Group",
                    "Self"
                ],
                "args": [
                    "args",
                    "None",
                    "Any",
                    "List[str]",
                    "Optional",
                    "List",
                    "Sequence[str]"
                ],
                "rich_markup_mode": [
                    "None",
                    "str"
                ],
                "extra": [
                    "Dict[str, Any]",
                    "Dict",
                    "Mapping",
                    "extra",
                    "Any",
                    "None"
                ],
                "prog_name": [
                    "None",
                    "Optional",
                    "Optional[str]",
                    "str",
                    "Any",
                    "Optional[Any]"
                ],
                "standalone_mode": []
            },
            "_typer_format_options": {
                "return": [],
                "ctx": [
                    "str",
                    "Tuple",
                    "alias",
                    "Context",
                    "ctx",
                    "helper",
                    "List",
                    "rv",
                    "Tuple[str, str]"
                ],
                "formatter": [
                    "HelpFormatter",
                    "formatter",
                    "section"
                ],
                "self": [
                    "self",
                    "HobbitCommand",
                    "typer",
                    "BaseCommand",
                    "HelpFormatter",
                    "HobbitGroup",
                    "Group",
                    "Typer"
                ]
            },
            "_split_opt": {
                "return": [],
                "opt": []
            },
            "_typer_param_setup_autocompletion_compat": {
                "return": [
                    "None"
                ],
                "autocompletion": [],
                "self": [
                    "self",
                    "None",
                    "get",
                    "typer"
                ]
            },
            "_typer_main_shell_completion": {
                "return": [],
                "prog_name": [
                    "str",
                    "None"
                ],
                "ctx_args": [],
                "self": [
                    "self",
                    "Typer",
                    "TyperMain",
                    "Click",
                    "Main",
                    "ShellCompleter",
                    "typer"
                ],
                "complete_var": [
                    "Optional[str]",
                    "None",
                    "click",
                    ".completion",
                    "str",
                    "cvar"
                ]
            },
            "global": {
                "DEFAULT_MARKUP_MODE": [
                    "None",
                    "str",
                    "Union[str, None]",
                    "Optional[str]"
                ]
            }
        }
    },
    "typer.main": {
        "Typer": {
            "__call__": {
                "args": [
                    "tuple",
                    "args",
                    "Any",
                    "None",
                    "Tuple[Any, ...]"
                ],
                "kwargs": [],
                "return": [
                    "LogRecord",
                    "record",
                    "Optional[float]",
                    "e",
                    "Union[None, datetime.timedelta, float]",
                    "datetime.timedelta",
                    "reduce",
                    "except",
                    "Callable",
                    "None"
                ]
            },
            "__init__": {
                "add_completion": [
                    "True",
                    "bool"
                ],
                "add_help_option": [],
                "deprecated": [
                    "Default",
                    "bool",
                    "False",
                    "Union[bool, Default]",
                    "deprecated",
                    "typing.Optional[bool]"
                ],
                "context_settings": [
                    "Dict",
                    "Optional[Dict]",
                    "Dict[str, Any]",
                    "None",
                    "Default",
                    "TyperInfo",
                    "Context"
                ],
                "cls": [
                    "cls",
                    "Default",
                    "None",
                    "TyperInfo",
                    "Optional[Type]",
                    "type"
                ],
                "help": [],
                "callback": [
                    "Default",
                    "callback",
                    "Optional[Callable]",
                    "TyperInfo",
                    "None",
                    "Callable",
                    "ctx",
                    "value"
                ],
                "hidden": [
                    "Default",
                    "bool",
                    "hidden",
                    "False"
                ],
                "invoke_without_command": [
                    "Default",
                    "bool",
                    "False",
                    "TyperInfo"
                ],
                "no_args_is_help": [
                    "Default",
                    "None",
                    "bool",
                    "False"
                ],
                "epilog": [],
                "chain": [
                    "Default",
                    "bool",
                    "False",
                    "chain",
                    "None"
                ],
                "pretty_exceptions_show_locals": [
                    "True",
                    "False"
                ],
                "pretty_exceptions_short": [
                    "bool",
                    "True",
                    "False"
                ],
                "name": [
                    "Default",
                    "name",
                    "None",
                    "Optional[str]",
                    "TyperInfo",
                    "Optional",
                    "typer"
                ],
                "pretty_exceptions_enable": [],
                "rich_help_panel": [],
                "result_callback": [],
                "subcommand_metavar": [
                    "None",
                    "Default",
                    "Optional[str]",
                    "str"
                ],
                "short_help": [],
                "rich_markup_mode": [],
                "options_metavar": []
            },
            "add_typer": {
                "add_help_option": [
                    "Default",
                    "True",
                    "False",
                    "bool",
                    "typer",
                    "Optional[bool]",
                    "Union[bool, Default]"
                ],
                "callback": [
                    "callback",
                    "Optional[Callable]",
                    "None",
                    "Callable",
                    "Optional[callable]",
                    "value"
                ],
                "context_settings": [
                    "Optional[Dict]",
                    "Dict",
                    "ContextSettings",
                    "dict"
                ],
                "epilog": [
                    "Optional[str]",
                    "epilog",
                    "str",
                    "None",
                    "Default",
                    "help"
                ],
                "cls": [
                    "Default",
                    "cls",
                    "click.Command",
                    "None",
                    "typer",
                    "typer.Typer",
                    "typing",
                    "Command"
                ],
                "return": [],
                "hidden": [],
                "invoke_without_command": [
                    "Default",
                    "bool",
                    "False",
                    "Union[Default, bool]",
                    "click"
                ],
                "no_args_is_help": [
                    "Default",
                    "bool",
                    "typer",
                    "False",
                    "None"
                ],
                "help": [],
                "name": [],
                "options_metavar": [
                    "Default",
                    "str",
                    "click",
                    "typer"
                ],
                "result_callback": [],
                "typer_instance": [
                    "Typer",
                    "TyperInfo",
                    "typer",
                    "None",
                    "typer.Typer"
                ],
                "short_help": [],
                "deprecated": [],
                "subcommand_metavar": [],
                "rich_help_panel": [],
                "chain": [
                    "bool",
                    "chain",
                    "False",
                    "Default"
                ]
            },
            "callback": {
                "return": [
                    "f",
                    "callback",
                    "Callable",
                    "typing"
                ],
                "add_help_option": [],
                "cls": [
                    "Default",
                    "None"
                ],
                "chain": [],
                "epilog": [
                    "Default",
                    "None"
                ],
                "context_settings": [],
                "hidden": [],
                "deprecated": [
                    "Default",
                    "False"
                ],
                "invoke_without_command": [
                    "Default",
                    "False",
                    "bool"
                ],
                "options_metavar": [
                    "Default"
                ],
                "no_args_is_help": [
                    "Default",
                    "False",
                    "Default[bool]"
                ],
                "result_callback": [],
                "rich_help_panel": [
                    "None",
                    "Default"
                ],
                "subcommand_metavar": [
                    "Default",
                    "None"
                ],
                "help": [],
                "short_help": [
                    "Default"
                ]
            },
            "command": {
                "add_help_option": [
                    "True",
                    "bool",
                    "False"
                ],
                "deprecated": [
                    "False",
                    "hidden",
                    "bool",
                    "deprecated"
                ],
                "cls": [],
                "hidden": [],
                "help": [
                    "help",
                    "None",
                    "str",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "no_args_is_help": [
                    "bool",
                    "False"
                ],
                "name": [],
                "return": [
                    "Callable",
                    "Command",
                    "f",
                    "command",
                    "decorator",
                    "function"
                ],
                "context_settings": [
                    "dict",
                    "Optional[dict]",
                    "None",
                    "Mapping",
                    "click"
                ],
                "epilog": [],
                "short_help": [
                    "None",
                    "str",
                    "Optional",
                    "help"
                ],
                "options_metavar": [],
                "rich_help_panel": []
            }
        },
        "global": {
            "_is_macos": {
                "return": []
            },
            "_is_linux_or_bsd": {
                "return": []
            },
            "determine_type_convertor": {
                "return": [
                    "Convertor",
                    "convertor",
                    "None",
                    "ConvertingItem"
                ],
                "type_": [
                    "Enum",
                    "Type",
                    "issubclass",
                    "Type[Any]",
                    "Type[Path]",
                    "Path",
                    "PathFinder",
                    "Type[Enum]"
                ]
            },
            "generate_list_convertor": {
                "convertor": [
                    "Convertor",
                    "ConvertingItem",
                    "convertor"
                ],
                "return": [],
                "default_value": []
            },
            "except_hook": {
                "tb": [
                    "tb",
                    "Traceback",
                    "types.TracebackType",
                    "TracebackException"
                ],
                "return": [],
                "exc_type": [],
                "exc_value": []
            },
            "generate_tuple_convertor": {
                "types": [
                    "types",
                    "List[Type]",
                    "tuple",
                    "Sequence[Type]"
                ],
                "return": []
            },
            "generate_enum_convertor": {
                "return": [
                    "convertor",
                    "Convertor",
                    "value",
                    "function",
                    "callable",
                    "Callable",
                    "None"
                ],
                "enum": [
                    "Enum",
                    "enum",
                    "IntEnum",
                    "value"
                ]
            },
            "get_callback": {
                "context_param_name": [],
                "callback": [],
                "convertors": [
                    "convertors",
                    "None",
                    "dict",
                    "typing"
                ],
                "pretty_exceptions_short": [
                    "Exception",
                    "kwargs",
                    "Type",
                    "bool",
                    "Type[Exception]",
                    "dict",
                    "Any",
                    "output",
                    "exceptions"
                ],
                "return": [
                    "None",
                    "wrapper",
                    "Optional[Callable]",
                    "Callable",
                    "typing"
                ],
                "params": []
            },
            "get_click_param": {
                "param": [
                    "ParameterInfo",
                    "ArgumentInfo",
                    "OptionInfo",
                    "inspect.Parameter"
                ],
                "return": [
                    "TyperArgument",
                    "TyperOption",
                    "convertor",
                    "Any"
                ]
            },
            "get_click_type": {
                "return": [
                    "TyperChoice",
                    "click",
                    "click.IntRange",
                    "click.ParamType",
                    "click.DateTime",
                    "click.File",
                    "click.INT"
                ],
                "annotation": [
                    "annotation",
                    "Enum",
                    "int",
                    "type",
                    "Path",
                    "FileBinaryWrite",
                    "issubclass",
                    "Type",
                    "UUID",
                    "datetime",
                    "FileTextWrite",
                    "str"
                ],
                "parameter_info": []
            },
            "get_command_from_info": {
                "command_info": [],
                "return": [
                    "cls",
                    "Command",
                    "click",
                    "help",
                    "command",
                    "BaseCommand",
                    "Group"
                ],
                "pretty_exceptions_short": [
                    "bool",
                    "False",
                    "click",
                    "callback",
                    "deprecated",
                    "set"
                ],
                "rich_markup_mode": [
                    "bool",
                    "cls",
                    "False",
                    "str",
                    "epilog",
                    "click",
                    "hidden"
                ]
            },
            "get_command": {
                "return": [],
                "typer_instance": []
            },
            "get_command_name": {
                "return": [],
                "name": [
                    "name",
                    "str",
                    "pass",
                    "None"
                ]
            },
            "get_group": {
                "return": [
                    "TyperInfo",
                    "group",
                    "typer",
                    "typer.Group",
                    "Group",
                    "CommandGroup",
                    "Typer"
                ],
                "typer_instance": []
            },
            "get_group_from_info": {
                "group_info": [
                    "Dict",
                    "Any"
                ],
                "return": [],
                "pretty_exceptions_short": [],
                "rich_markup_mode": []
            },
            "get_param_callback": {
                "callback": [],
                "convertor": [
                    "Convertor",
                    "convertor",
                    "ConvertingItem",
                    "None",
                    "Optional[Convertor]"
                ],
                "return": [
                    "None",
                    "callback",
                    "value",
                    "wrapper",
                    "Callable",
                    "Optional[Callable]"
                ]
            },
            "get_param_completion": {
                "callback": [
                    "callback",
                    "Callable",
                    "Optional[Callable]",
                    "typing",
                    "None"
                ],
                "return": [
                    "Callable",
                    "wrapper",
                    "callback",
                    "None",
                    "function",
                    "Optional[Callable]",
                    "typing"
                ]
            },
            "get_install_completion_arguments": {
                "return": [
                    "tuple"
                ]
            },
            "launch": {
                "locate": [],
                "return": [],
                "wait": [
                    "bool",
                    "False",
                    "wait"
                ],
                "url": []
            },
            "param_path_convertor": {
                "return": [
                    "None",
                    "Optional[Path]",
                    "Optional"
                ],
                "value": [
                    "Path",
                    "None",
                    "value",
                    "Optional"
                ]
            },
            "lenient_issubclass": {
                "return": [
                    "bool",
                    "False",
                    "and",
                    "cls"
                ],
                "class_or_tuple": [
                    "issubclass",
                    "Tuple",
                    "Union",
                    "Type",
                    "Tuple[Type, ...]",
                    "tuple"
                ],
                "cls": [
                    "type",
                    "cls"
                ]
            },
            "get_params_convertors_ctx_param_name_from_function": {
                "return": [
                    "convertors",
                    "tuple",
                    "Tuple[Dict, Dict, str]",
                    "list",
                    "Any"
                ],
                "callback": [
                    "callback",
                    "Callable",
                    "function",
                    "Callable[..., Any]",
                    "method",
                    "def",
                    "Coroutine",
                    "Union[Callable, Coroutine]"
                ]
            },
            "solve_typer_info_defaults": {
                "return": [],
                "typer_info": [
                    "dict",
                    "help"
                ]
            },
            "solve_typer_info_help": {
                "typer_info": [],
                "return": [
                    "str",
                    "DefaultPlaceholder",
                    "inspect.cleandoc",
                    "cleandoc",
                    "doc"
                ]
            },
            "run": {
                "function": [
                    "function",
                    "None"
                ],
                "return": [
                    "None",
                    "bool",
                    "List[str]",
                    "functions",
                    "run",
                    "int",
                    "list"
                ]
            }
        }
    },
    "typer.models": {
        "global": {
            "Default": {
                "value": [
                    "DefaultPlaceholder",
                    "Any",
                    "value"
                ],
                "return": []
            }
        },
        "ArgumentInfo": {
            "__init__": {
                "allow_dash": [
                    "bool",
                    "exists",
                    "False",
                    "hidden"
                ],
                "case_sensitive": [],
                "autocompletion": [
                    "click.Path",
                    "bool",
                    "str",
                    "autocompletion",
                    "exists",
                    "debug",
                    "incomplete",
                    "Optional[bool]",
                    "Optional[Callable]"
                ],
                "clamp": [
                    "clamp",
                    "str",
                    "False",
                    "bool",
                    "max",
                    "click.Path",
                    "debug"
                ],
                "atomic": [],
                "default": [],
                "callback": [],
                "default_factory": [
                    "bool",
                    "str",
                    "click.Path",
                    "Optional[Callable]",
                    "debug",
                    "False",
                    "click",
                    "Optional[Callable[[], Any]]",
                    "Optional",
                    "exists"
                ],
                "encoding": [],
                "dir_okay": [],
                "click_type": [],
                "errors": [
                    "str",
                    "errors"
                ],
                "envvar": [],
                "hidden": [
                    "False",
                    "bool",
                    "hidden",
                    "str",
                    "click.Path"
                ],
                "is_eager": [
                    "False"
                ],
                "help": [],
                "metavar": [
                    "str",
                    "metavar",
                    "None",
                    "exists"
                ],
                "exists": [
                    "exists",
                    "False",
                    "bool",
                    "str",
                    "writable",
                    "dest",
                    "readable"
                ],
                "expose_value": [
                    "True",
                    "bool",
                    "False"
                ],
                "max": [],
                "min": [
                    "min",
                    "float",
                    "Optional[float]",
                    "click.Path",
                    "str",
                    "exists",
                    "bool",
                    "None",
                    "IntRange",
                    "max",
                    "int"
                ],
                "file_okay": [
                    "True",
                    "bool",
                    "str",
                    "exists",
                    "click.Path",
                    "False",
                    "writable"
                ],
                "param_decls": [
                    "None",
                    "tuple",
                    "Optional[Sequence[str]]",
                    "Sequence",
                    "Optional[List[str]]"
                ],
                "mode": [],
                "path_type": [
                    "str",
                    "exists",
                    "bool",
                    "click.Path",
                    "False",
                    "None",
                    "Path",
                    "PathLike",
                    "pathlib.Path",
                    "source"
                ],
                "parser": [],
                "resolve_path": [
                    "str",
                    "False",
                    "bool",
                    "debug",
                    "click.Path",
                    "exists"
                ],
                "readable": [
                    "bool",
                    "True",
                    "exists",
                    "readable",
                    "click.Path",
                    "debug",
                    "dest",
                    "str",
                    "Path"
                ],
                "show_envvar": [
                    "True",
                    "str",
                    "bool",
                    "hidden",
                    "exists",
                    "False",
                    "click.Path"
                ],
                "formats": [
                    "formats",
                    "Any",
                    "None",
                    "debug",
                    "str",
                    "dict"
                ],
                "shell_complete": [
                    "Optional[Callable]",
                    "Callable",
                    "None",
                    "Optional[Callable[..., Any]]",
                    "str",
                    "Optional[Callable[[Context, Parameter, str], List[CompletionItem]]]",
                    "Optional[Callable[..., List[CompletionItem]]]",
                    "Optional[Callable[[...], List[str]]]",
                    "incomplete"
                ],
                "rich_help_panel": [
                    "str",
                    "None",
                    "Optional[str]",
                    "exists",
                    "click.Path",
                    "bool",
                    "Path",
                    "debug"
                ],
                "show_choices": [],
                "writable": [
                    "str",
                    "False",
                    "writable",
                    "bool",
                    "click.Path"
                ],
                "show_default": [
                    "True",
                    "bool",
                    "str",
                    "click.Path",
                    "click",
                    "hidden"
                ],
                "lazy": [
                    "bool",
                    "click.Path",
                    "lazy",
                    "exists",
                    "str",
                    "None"
                ]
            }
        },
        "DefaultPlaceholder": {
            "__bool__": {
                "return": [
                    "bool",
                    "self.value",
                    "False",
                    "boolean",
                    "self.measurements",
                    "None",
                    "self.greenlet"
                ]
            },
            "__init__": {
                "value": []
            }
        },
        "CommandInfo": {
            "__init__": {
                "add_help_option": [
                    "bool",
                    "True",
                    "False"
                ],
                "callback": [],
                "help": [
                    "None",
                    "help",
                    "Optional[str]",
                    "self.help",
                    "str",
                    "Optional"
                ],
                "context_settings": [],
                "rich_help_panel": [
                    "None",
                    "Optional[str]"
                ],
                "cls": [],
                "deprecated": [],
                "short_help": [],
                "hidden": [],
                "epilog": [],
                "no_args_is_help": [],
                "name": [],
                "options_metavar": []
            }
        },
        "DeveloperExceptionConfig": {
            "__init__": {
                "return": [
                    "None"
                ],
                "pretty_exceptions_show_locals": [
                    "True",
                    "False",
                    "bool"
                ],
                "pretty_exceptions_enable": [],
                "pretty_exceptions_short": []
            }
        },
        "OptionInfo": {
            "__init__": {
                "allow_dash": [
                    "False",
                    "bool",
                    "exists",
                    "click.Path"
                ],
                "atomic": [
                    "False",
                    "bool",
                    "exists",
                    "click.Path",
                    "str",
                    "atomic"
                ],
                "confirmation_prompt": [],
                "count": [],
                "clamp": [
                    "False",
                    "clamp",
                    "bool",
                    "click.Path",
                    "exists"
                ],
                "allow_from_autoenv": [
                    "bool",
                    "True"
                ],
                "case_sensitive": [],
                "autocompletion": [
                    "autocompletion",
                    "Optional[Callable]",
                    "None",
                    "Optional[bool]"
                ],
                "dir_okay": [
                    "bool",
                    "str",
                    "True",
                    "click.Path",
                    "False",
                    "writable",
                    "click",
                    "exists"
                ],
                "envvar": [
                    "envvar",
                    "None",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "default_factory": [],
                "expose_value": [
                    "bool",
                    "True",
                    "click.Path",
                    "debug"
                ],
                "default": [],
                "callback": [
                    "callback",
                    "Optional[Callable]",
                    "None",
                    "exists",
                    "click.Path",
                    "value",
                    "Callable",
                    "False",
                    "bool",
                    "str"
                ],
                "flag_value": [
                    "Optional[bool]",
                    "None",
                    "Optional[Any]",
                    "bool",
                    "click",
                    "Any",
                    "True"
                ],
                "hide_input": [
                    "bool",
                    "False"
                ],
                "formats": [
                    "formats",
                    "str",
                    "exists",
                    "bool",
                    "click.Path",
                    "False",
                    "tuple"
                ],
                "hidden": [
                    "str",
                    "False",
                    "hidden",
                    "bool",
                    "click.Path",
                    "exists"
                ],
                "help": [
                    "str",
                    "help",
                    "None",
                    "Optional[str]",
                    "bool"
                ],
                "encoding": [],
                "click_type": [
                    "click.ParamType",
                    "click.INT",
                    "ParamType",
                    "click.Int",
                    "click",
                    "str",
                    "UUIDParameterType",
                    "FloatRange",
                    "click.IntParamType",
                    "click.STRING",
                    "exists"
                ],
                "errors": [],
                "is_flag": [],
                "is_eager": [],
                "file_okay": [
                    "True",
                    "click.Path",
                    "bool",
                    "str",
                    "writable",
                    "Path",
                    "exists",
                    "False"
                ],
                "prompt": [],
                "prompt_required": [],
                "lazy": [],
                "param_decls": [
                    "None",
                    "tuple",
                    "Optional[Sequence[str]]",
                    "List[str]",
                    "Optional[Union[str, List[str]]]",
                    "Union"
                ],
                "exists": [],
                "max": [
                    "float",
                    "Optional[float]",
                    "max",
                    "int",
                    "None",
                    "clamp",
                    "click.Path",
                    "bool",
                    "False",
                    "Optional[int]",
                    "exists",
                    "str"
                ],
                "min": [
                    "Optional[float]",
                    "float",
                    "None",
                    "min",
                    "exists",
                    "max",
                    "Optional[int]",
                    "Optional",
                    "clamp",
                    "int",
                    "Path",
                    "str",
                    "bool",
                    "click.Path"
                ],
                "parser": [
                    "parser",
                    "OptionParser",
                    "click",
                    "click.OptionParser",
                    "None",
                    "Optional[Any]",
                    "Any"
                ],
                "metavar": [],
                "readable": [],
                "rich_help_panel": [],
                "show_choices": [],
                "resolve_path": [],
                "mode": [
                    "str",
                    "mode"
                ],
                "path_type": [
                    "bool",
                    "click.Path",
                    "Path",
                    "str",
                    "exists",
                    "None",
                    "pathlib.Path",
                    "os.PathLike",
                    "source"
                ],
                "writable": [],
                "show_default": [
                    "True",
                    "bool",
                    "False",
                    "hidden",
                    "str",
                    "clamp"
                ],
                "show_envvar": [
                    "hidden",
                    "bool",
                    "str",
                    "click.Path",
                    "True",
                    "False"
                ],
                "shell_complete": []
            }
        },
        "ParamMeta": {
            "__init__": {
                "return": [],
                "name": [],
                "default": [],
                "annotation": [
                    "inspect.Parameter.empty",
                    "annotation",
                    "Any",
                    "None",
                    "typing",
                    "Parameter.empty"
                ]
            }
        },
        "ParameterInfo": {
            "__init__": {
                "atomic": [],
                "allow_dash": [
                    "False",
                    "bool"
                ],
                "autocompletion": [
                    "self.autocompletion",
                    "autocompletion"
                ],
                "clamp": [],
                "callback": [
                    "Callable",
                    "callback",
                    "Optional[Callable]"
                ],
                "case_sensitive": [
                    "True",
                    "bool",
                    "None"
                ],
                "encoding": [],
                "click_type": [
                    "click.ParamType",
                    "click.STRING",
                    "parser",
                    "None",
                    "int",
                    "Optional[click.ParamType]",
                    "click.INT",
                    "click.Path",
                    "float",
                    "bool",
                    "click.Int",
                    "ParamType"
                ],
                "formats": [
                    "None"
                ],
                "expose_value": [
                    "True",
                    "bool"
                ],
                "file_okay": [
                    "bool",
                    "True",
                    "False",
                    "exists"
                ],
                "hidden": [
                    "False",
                    "bool"
                ],
                "dir_okay": [],
                "default_factory": [],
                "metavar": [
                    "None",
                    "Optional[str]"
                ],
                "mode": [
                    "mode"
                ],
                "min": [],
                "is_eager": [],
                "errors": [
                    "str",
                    "errors",
                    "self.errors"
                ],
                "max": [],
                "exists": [],
                "envvar": [],
                "readable": [],
                "default": [],
                "resolve_path": [
                    "False"
                ],
                "show_choices": [
                    "True",
                    "bool"
                ],
                "lazy": [
                    "None",
                    "lazy",
                    "bool",
                    "self.lazy",
                    "True",
                    "Optional",
                    "Optional[bool]"
                ],
                "shell_complete": [
                    "Any"
                ],
                "writable": [],
                "help": [],
                "path_type": [
                    "PathLike",
                    "Path",
                    "pathlib.Path",
                    "None",
                    "Any",
                    "os.PathLike",
                    "pathlib",
                    "str"
                ],
                "show_envvar": [],
                "show_default": [
                    "True",
                    "False",
                    "bool"
                ],
                "rich_help_panel": [
                    "None",
                    "click.Path",
                    "str",
                    "Optional[str]",
                    "Path",
                    "Any"
                ],
                "parser": [],
                "param_decls": []
            }
        },
        "TyperInfo": {
            "__init__": {
                "add_help_option": [
                    "Default",
                    "True",
                    "bool"
                ],
                "cls": [
                    "Default",
                    "None",
                    "self.cls",
                    "Optional[Type]",
                    "cls"
                ],
                "chain": [
                    "Default",
                    "bool",
                    "False",
                    "chain",
                    "None"
                ],
                "callback": [
                    "Default",
                    "callback",
                    "None",
                    "self.callback"
                ],
                "epilog": [
                    "Default",
                    "self.epilog",
                    "None"
                ],
                "help": [
                    "Default",
                    "help"
                ],
                "deprecated": [],
                "hidden": [],
                "no_args_is_help": [],
                "short_help": [
                    "Default",
                    "None"
                ],
                "rich_help_panel": [],
                "context_settings": [],
                "typer_instance": [
                    "Default",
                    "None"
                ],
                "invoke_without_command": [
                    "bool",
                    "Default"
                ],
                "subcommand_metavar": [
                    "Default",
                    "Optional[str]",
                    "str",
                    "None"
                ],
                "name": [
                    "Default",
                    "name",
                    "Optional",
                    "Optional[str]"
                ],
                "options_metavar": [
                    "Default"
                ],
                "result_callback": [
                    "Optional[Callable]",
                    "Callable",
                    "None"
                ]
            }
        },
        "TyperPath": {
            "shell_complete": {
                "return": [],
                "ctx": [
                    "Context",
                    "ctx",
                    "click.Context",
                    "convert"
                ],
                "param": [],
                "incomplete": [
                    "incomplete",
                    "str",
                    "Any",
                    "None"
                ]
            }
        }
    },
    "typer.rich_utils": {
        "global": {
            "_get_help_text": {
                "return": [
                    "Text",
                    "yield",
                    "group",
                    "Iterator",
                    "Generator[Text, None, None]",
                    "rich"
                ],
                "obj": [
                    "help",
                    "obj",
                    "MultiCommand",
                    "Command",
                    "obj.help",
                    "Group",
                    "click.Group",
                    "Parameter",
                    "deprecated",
                    "click.MultiCommand",
                    "click"
                ],
                "markup_mode": []
            },
            "_get_parameter_help": {
                "return": [],
                "param": [
                    "TyperOption",
                    "Parameter",
                    "param",
                    "TyperArgument",
                    "help",
                    "inspect",
                    "typer",
                    "click"
                ],
                "markup_mode": [
                    "str",
                    "enum"
                ],
                "ctx": [
                    "Context",
                    "ctx",
                    "click.Context"
                ]
            },
            "_make_command_help": {
                "return": [],
                "help_text": [
                    "None",
                    "Any",
                    "str"
                ],
                "markup_mode": [
                    "None",
                    "int",
                    "str"
                ]
            },
            "_make_rich_text": {
                "style": [],
                "markup_mode": [],
                "text": [
                    "str",
                    "text",
                    "Text",
                    "None"
                ],
                "return": [
                    "highlighter",
                    "Markdown",
                    "style",
                    "Text"
                ]
            },
            "_print_commands_panel": {
                "return": [
                    "None"
                ],
                "commands": [
                    "commands",
                    "for",
                    "None",
                    "List[Command]",
                    "click",
                    "tuple",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Panel",
                    "name",
                    "title"
                ],
                "markup_mode": [
                    "str",
                    "False"
                ],
                "console": [],
                "cmd_len": []
            },
            "_get_rich_console": {
                "stderr": [
                    "bool",
                    "stderr",
                    "False"
                ],
                "return": [
                    "rich",
                    "Console",
                    "None",
                    "rich.console.Console",
                    "rich.Console",
                    "highlighter"
                ]
            },
            "_print_options_panel": {
                "return": [
                    "None"
                ],
                "console": [
                    "Console",
                    "rich",
                    "console",
                    "Panel",
                    "rich.console.Console",
                    "rich.panel",
                    "rich.console"
                ],
                "name": [
                    "str",
                    "name",
                    "Panel"
                ],
                "markup_mode": [],
                "ctx": [],
                "params": []
            },
            "global": {
                "ALIGN_ERRORS_PANEL": [],
                "ALIGN_COMMANDS_PANEL": [
                    "str"
                ],
                "ALIGN_OPTIONS_PANEL": [
                    "str"
                ],
                "COLOR_SYSTEM": []
            },
            "rich_abort_error": {
                "return": []
            },
            "rich_format_error": {
                "return": [],
                "self": [
                    "self",
                    "None"
                ]
            },
            "rich_render_text": {
                "text": [
                    "str",
                    "text"
                ],
                "return": [
                    "str",
                    "segment.text",
                    "text"
                ]
            },
            "rich_format_help": {
                "obj": [
                    "click.Group",
                    "click.Command",
                    "obj.help",
                    "obj",
                    "help",
                    "MultiCommand",
                    "Group",
                    "click",
                    "obj.epilog"
                ],
                "ctx": [],
                "markup_mode": [],
                "return": []
            },
            "rich_to_html": {
                "input_text": [
                    "str",
                    "None",
                    "RichText",
                    "rich"
                ],
                "return": []
            }
        }
    },
    "typer.testing": {
        "CliRunner": {
            "invoke": {
                "catch_exceptions": [],
                "app": [],
                "args": [
                    "args",
                    "tuple[str, ...]",
                    "Tuple[str, ...]",
                    "None",
                    "tuple"
                ],
                "color": [
                    "False",
                    "bool",
                    "color",
                    "invoke"
                ],
                "env": [
                    "dict",
                    "Mapping",
                    "env",
                    "MutableMapping",
                    "Mapping[str, str]",
                    "Dict[str, str]",
                    "os.environ",
                    "collections.abc",
                    "None"
                ],
                "input": [
                    "input",
                    "str",
                    "invoke",
                    "None",
                    "bytes"
                ],
                "extra": [],
                "return": [
                    "Result",
                    "result",
                    "click.testing",
                    "invoke",
                    "CliRunner"
                ]
            }
        }
    },
    "typer.utils": {
        "MixedAnnotatedAndDefaultStyleError": {
            "__init__": {
                "annotated_param_type": [
                    "Any",
                    "int",
                    "Dict[int, str]",
                    "typing",
                    "str"
                ],
                "argument_name": [],
                "default_param_type": []
            },
            "__str__": {
                "return": []
            },
            "global": {
                "annotated_param_type": [],
                "argument_name": [
                    "DefaultFactoryAndDefaultValueError",
                    "str",
                    "MixedAnnotatedAndDefaultStyleError",
                    "MultipleTyperAnnotationsError",
                    "param.name"
                ],
                "default_param_type": []
            }
        },
        "AnnotatedParamWithDefaultValueError": {
            "__init__": {
                "param_type": [],
                "argument_name": [
                    "str",
                    "None",
                    "Any",
                    "typing"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "global": {
                "param_type": [
                    "ParameterInfo",
                    "Type[ParameterInfo]",
                    "ArgumentInfo",
                    "MixedAnnotatedAndDefaultStyleError",
                    "AnnotatedParamWithDefaultValueError",
                    "OptionInfo",
                    "typing"
                ],
                "argument_name": [
                    "str",
                    "DefaultFactoryAndDefaultValueError",
                    "MultipleTyperAnnotationsError",
                    "MixedAnnotatedAndDefaultStyleError",
                    "param.name"
                ]
            }
        },
        "DefaultFactoryAndDefaultValueError": {
            "__init__": {
                "argument_name": [],
                "param_type": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "global": {
                "argument_name": [
                    "str",
                    "DefaultFactoryAndDefaultValueError",
                    "MixedAnnotatedAndDefaultStyleError",
                    "MultipleTyperAnnotationsError"
                ],
                "param_type": []
            }
        },
        "MultipleTyperAnnotationsError": {
            "__init__": {
                "argument_name": []
            },
            "__str__": {
                "return": []
            },
            "global": {
                "argument_name": [
                    "DefaultFactoryAndDefaultValueError",
                    "str",
                    "MixedAnnotatedAndDefaultStyleError",
                    "MultipleTyperAnnotationsError"
                ]
            }
        },
        "global": {
            "_param_type_to_user_string": {
                "return": [
                    "str",
                    "Argument",
                    "ArgumentInfo"
                ],
                "param_type": [
                    "ArgumentInfo",
                    "is",
                    "OptionInfo",
                    "type",
                    "elif"
                ]
            },
            "get_params_from_function": {
                "func": [],
                "return": [
                    "params",
                    "Params",
                    "Dict"
                ]
            },
            "_split_annotation_from_typer_annotations": {
                "return": [],
                "base_annotation": []
            }
        }
    }
}