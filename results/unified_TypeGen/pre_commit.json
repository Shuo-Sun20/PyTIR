{
    "pre_commit.clientlib": {
        "global": {
            "_entry": {
                "modname": [
                    "str"
                ],
                "return": []
            },
            "check_min_version": {
                "version": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "parse_version": {
                "return": [
                    "tuple[int, ...]",
                    "tuple[typing.Union[int,...]]"
                ],
                "s": [
                    "str"
                ]
            },
            "check_type_tag": {
                "return": [
                    "None"
                ],
                "tag": []
            },
            "transform_stage": {
                "return": [],
                "stage": []
            },
            "warn_unknown_keys_repo": {
                "extra": [
                    "typing.Iterable[str]"
                ],
                "dct": [],
                "return": [
                    "None"
                ],
                "orig_keys": [
                    "set[str]",
                    "typing.Any",
                    "list[str]",
                    "set[typing.Any]",
                    "typing.Iterable[str]"
                ]
            },
            "warn_unknown_keys_root": {
                "dct": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "extra": [],
                "orig_keys": [
                    "set[str]",
                    "list[str]",
                    "typing.Any",
                    "set[typing.Any]",
                    "typing.Iterable[typing.Hashable]",
                    "extra",
                    "typing.Iterable[str]",
                    "typing.Iterable[typing.Any]",
                    "list[typing.Any]"
                ]
            },
            "warn_for_stages_on_repo_init": {
                "return": [
                    "None"
                ],
                "directory": [],
                "repo": []
            }
        },
        "DeprecatedDefaultStagesWarning": {
            "apply_default": {
                "dct": [
                    "typing.Any",
                    "dict[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "check": {
                "dct": [],
                "return": [
                    "None"
                ]
            },
            "remove_default": {
                "return": [],
                "dct": [
                    "typing.Any",
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "global": {
                "key": [
                    "str",
                    "key",
                    "StagesMigrationNoDefault"
                ]
            }
        },
        "StagesMigrationNoDefault": {
            "apply_default": {
                "return": [],
                "dct": []
            },
            "check": {
                "return": [],
                "dct": []
            },
            "global": {
                "default": [],
                "key": []
            },
            "remove_default": {
                "return": [],
                "dct": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Any"
                ]
            }
        },
        "StagesMigration": {
            "apply_default": {
                "return": [
                    "None"
                ],
                "dct": [
                    "dict[typing.Any, typing.Any]"
                ]
            }
        },
        "DeprecatedStagesWarning": {
            "check": {
                "dct": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "None"
                ]
            },
            "apply_default": {
                "dct": [],
                "return": [
                    "None"
                ]
            },
            "global": {
                "key": [
                    "str"
                ]
            },
            "remove_default": {
                "return": [
                    "None"
                ],
                "dct": []
            }
        },
        "NotAllowed": {
            "check": {
                "dct": [],
                "return": []
            }
        },
        "OptionalSensibleRegexAtHook": {
            "check": {
                "return": [
                    "None"
                ],
                "dct": [
                    "typing.Dict[str, str]",
                    "dict"
                ]
            }
        },
        "OptionalSensibleRegexAtTop": {
            "check": {
                "return": [],
                "dct": []
            }
        },
        "WarnMutableRev": {
            "check": {
                "return": [
                    "None"
                ],
                "dct": []
            }
        }
    },
    "pre_commit.all_languages": {
        "global": {
            "global": {
                "languages": []
            }
        }
    },
    "pre_commit.color": {
        "global": {
            "_enable": {
                "return": [
                    "None"
                ]
            },
            "add_color_option": {
                "return": [
                    "None"
                ],
                "parser": []
            },
            "format_color": {
                "color": [
                    "str"
                ],
                "text": [],
                "return": [],
                "use_color_setting": []
            },
            "use_color": {
                "setting": [],
                "return": []
            }
        }
    },
    "pre_commit.commands.autoupdate": {
        "global": {
            "_check_hooks_still_exist_at_rev": {
                "return": [
                    "None"
                ],
                "info": [
                    "typing.Any",
                    "repo",
                    "RepositoryInfo"
                ],
                "repo_config": []
            },
            "_original_lines": {
                "path": [
                    "str"
                ],
                "retry": [
                    "bool"
                ],
                "rev_infos": [
                    "typing.Sequence[typing.Any]",
                    "typing.Sized"
                ],
                "return": [
                    "tuple[typing.Any, typing.Any]",
                    "tuple[list[typing.Any], list[typing.Any]]"
                ]
            },
            "_update_one": {
                "return": [
                    "tuple[typing.Any, typing.Any, typing.Any]"
                ],
                "freeze": [],
                "tags_only": [],
                "i": [],
                "repo": []
            },
            "_write_new_config": {
                "return": [
                    "None"
                ],
                "rev_infos": [
                    "list[typing.Any]",
                    "list",
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable",
                    "idxs"
                ],
                "path": []
            },
            "autoupdate": {
                "config_file": [
                    "str"
                ],
                "freeze": [],
                "return": [],
                "jobs": [],
                "repos": [
                    "typing.Iterable[str]",
                    "tuple",
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Tuple[str, ...]",
                    "tuple[str, ...]"
                ],
                "tags_only": [
                    "typing.Any",
                    "bool"
                ]
            }
        },
        "RevInfo": {
            "global": {
                "frozen": [
                    "str",
                    "typing.Optional[str]"
                ],
                "hook_ids": [
                    "frozenset[str]",
                    "manifest"
                ],
                "repo": [],
                "rev": []
            },
            "from_config": {
                "return": [
                    "cls",
                    "typing.Any"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ]
            },
            "update": {
                "freeze": [],
                "return": [
                    "typing.Any",
                    "self",
                    "update"
                ],
                "tags_only": []
            }
        }
    },
    "pre_commit.commands.clean": {
        "global": {
            "clean": {
                "return": [
                    "int"
                ],
                "store": [
                    "store",
                    "CreatedFiles",
                    "ImportContextAction"
                ]
            }
        }
    },
    "pre_commit.commands.gc": {
        "global": {
            "_gc_repos": {
                "return": [
                    "int"
                ],
                "store": []
            },
            "_mark_used_repos": {
                "return": [],
                "all_repos": [
                    "dict[typing.Any, typing.Any]"
                ],
                "repo": [],
                "unused_repos": [],
                "store": []
            },
            "gc": {
                "return": [],
                "store": []
            }
        }
    },
    "pre_commit.commands.hook_impl": {
        "global": {
            "_check_args_length": {
                "return": [],
                "hook_type": [
                    "str"
                ],
                "args": []
            },
            "_ns": {
                "all_files": [
                    "bool"
                ],
                "commit_object_name": [
                    "str"
                ],
                "color": [
                    "bool"
                ],
                "commit_msg_filename": [
                    "str"
                ],
                "hook_type": [],
                "local_branch": [
                    "Optional[str]",
                    "str"
                ],
                "pre_rebase_branch": [],
                "remote_branch": [
                    "Optional[str]",
                    "str"
                ],
                "return": [
                    "argparse.Namespace"
                ],
                "remote_name": [],
                "remote_url": [],
                "rewrite_command": [
                    "str",
                    "Optional[str]"
                ],
                "to_ref": [
                    "str"
                ],
                "is_squash_merge": [],
                "from_ref": [],
                "pre_rebase_upstream": [
                    "Optional[str]",
                    "str"
                ],
                "checkout_type": [],
                "prepare_commit_message_source": []
            },
            "_pre_push_ns": {
                "args": [
                    "list[typing.Any]",
                    "tuple[typing.Any, ...]"
                ],
                "return": [],
                "color": [
                    "bool",
                    "str",
                    "color"
                ],
                "stdin": []
            },
            "_rev_exists": {
                "rev": [],
                "return": []
            },
            "_run_legacy": {
                "return": [
                    "tuple[int, typing.Any]",
                    "Tuple[int, typing.Any]",
                    "typing.Any"
                ],
                "args": [
                    "typing.Iterable[typing.Any]",
                    "args",
                    "tuple[str, ...]"
                ],
                "hook_dir": [
                    "str"
                ],
                "hook_type": [
                    "str"
                ]
            },
            "_run_ns": {
                "return": [
                    "typing.Any"
                ],
                "color": [],
                "hook_type": [],
                "args": [],
                "stdin": []
            },
            "_validate_config": {
                "return": [
                    "None"
                ],
                "retv": [
                    "int",
                    "typing.Union[int, str]",
                    "typing.Any",
                    "typing.Union[int, str, None]"
                ],
                "config": [],
                "skip_on_missing_config": [
                    "bool",
                    "typing.Union[bool, str, typing.Any]"
                ]
            },
            "hook_impl": {
                "color": [
                    "bool"
                ],
                "args": [],
                "hook_type": [
                    "str"
                ],
                "config": [],
                "store": [
                    "typing.Any"
                ],
                "hook_dir": [],
                "return": [],
                "skip_on_missing_config": []
            }
        }
    },
    "pre_commit.commands.init_templatedir": {
        "global": {
            "init_templatedir": {
                "return": [],
                "store": [
                    "str"
                ],
                "skip_on_missing_config": [
                    "bool"
                ],
                "directory": [
                    "str"
                ],
                "config_file": [],
                "hook_types": []
            }
        }
    },
    "pre_commit.commands.install_uninstall": {
        "global": {
            "_hook_paths": {
                "return": [],
                "git_dir": [
                    "Optional[str]",
                    "str"
                ],
                "hook_type": []
            },
            "_hook_types": {
                "return": [
                    "typing.List[str]",
                    "List[str]",
                    "list[str]"
                ],
                "cfg_filename": [],
                "hook_types": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[typing.List[str]]"
                ]
            },
            "_install_hook_script": {
                "config_file": [
                    "str"
                ],
                "git_dir": [
                    "Optional[str]",
                    "str"
                ],
                "skip_on_missing_config": [
                    "bool"
                ],
                "hook_type": [],
                "overwrite": [
                    "bool"
                ],
                "return": []
            },
            "_uninstall_hook_script": {
                "hook_type": [
                    "str"
                ],
                "return": []
            },
            "install": {
                "return": [
                    "int"
                ],
                "skip_on_missing_config": [
                    "bool"
                ],
                "overwrite": [],
                "config_file": [
                    "typing.Any",
                    "str"
                ],
                "hooks": [
                    "bool",
                    "typing.Any"
                ],
                "store": [
                    "typing.Any",
                    "store"
                ],
                "git_dir": [],
                "hook_types": []
            },
            "install_hooks": {
                "config_file": [
                    "str"
                ],
                "return": [],
                "store": [
                    "Store"
                ]
            },
            "is_our_script": {
                "return": [
                    "bool"
                ],
                "filename": [
                    "str"
                ]
            },
            "uninstall": {
                "return": [
                    "int"
                ],
                "hook_types": [
                    "typing.Iterable[str]"
                ],
                "config_file": []
            }
        }
    },
    "pre_commit.commands.migrate_config": {
        "global": {
            "_is_header_line": {
                "line": [
                    "str"
                ],
                "return": []
            },
            "_fix_stage": {
                "n": [],
                "return": []
            },
            "_migrate_composed": {
                "contents": [
                    "str"
                ],
                "return": []
            },
            "_preserve_style": {
                "return": [],
                "n": [
                    "style",
                    "typing.Union[str, None]",
                    "typing.Any",
                    "n"
                ],
                "s": [
                    "str"
                ]
            },
            "_migrate_map": {
                "return": [],
                "contents": []
            },
            "migrate_config": {
                "quiet": [],
                "config_file": [
                    "str"
                ],
                "return": [
                    "int"
                ]
            }
        }
    },
    "pre_commit.commands.run": {
        "Classifier": {
            "__init__": {
                "return": [
                    "None"
                ],
                "filenames": []
            },
            "_types_for_file": {
                "return": [
                    "typing.Iterable[str]",
                    "typing.Any",
                    "typing.List[str]"
                ],
                "filename": [
                    "str"
                ]
            },
            "by_types": {
                "exclude_types": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator[str, None, None]",
                    "None",
                    "names"
                ],
                "names": [
                    "typing.Iterable[str]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[str]"
                ],
                "types": [
                    "typing.Iterable[typing.Any]",
                    "Iterable[typing.Any]",
                    "list[SomeType]",
                    "types",
                    "frozenset[typing.Any]"
                ],
                "types_or": [
                    "Iterable[typing.Any]",
                    "frozenset[typing.Any]",
                    "typing.Iterable[typing.Any]",
                    "tags",
                    "frozenset",
                    "Set[typing.Any]",
                    "typing.Any"
                ]
            },
            "filenames_for_hook": {
                "hook": [
                    "typing.Any",
                    "hook"
                ],
                "return": []
            },
            "from_config": {
                "filenames": [
                    "Iterable[str]",
                    "typing.Iterable[str]"
                ],
                "return": [
                    "Classifier"
                ],
                "include": [],
                "exclude": []
            }
        },
        "global": {
            "_all_filenames": {
                "return": [
                    "typing.Iterable[str]",
                    "typing.Union[tuple, str, typing.Iterable[str]]"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            },
            "_compute_cols": {
                "return": [
                    "int"
                ],
                "hooks": [
                    "name",
                    "list[typing.Any]",
                    "hook"
                ]
            },
            "_full_msg": {
                "return": [
                    "str"
                ],
                "end_color": [
                    "Color"
                ],
                "postfix": [
                    "str"
                ],
                "cols": [],
                "start": [],
                "end_msg": [],
                "use_color": [
                    "bool"
                ]
            },
            "_get_skips": {
                "return": [
                    "set[typing.Any]",
                    "set[str]"
                ],
                "environ": [
                    "dict"
                ]
            },
            "_has_unstaged_config": {
                "return": [
                    "bool"
                ],
                "config_file": [
                    "str"
                ]
            },
            "_has_unmerged_paths": {
                "return": []
            },
            "_len_cjk": {
                "return": [
                    "int"
                ],
                "msg": [
                    "str",
                    "typing.Iterable[typing.Any]"
                ]
            },
            "_get_diff": {
                "return": []
            },
            "_run_hooks": {
                "hooks": [
                    "list[typing.Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "config": [
                    "dict[str, typing.Any]"
                ],
                "skips": [
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "return": [
                    "None",
                    "typing.Any",
                    "retval"
                ],
                "args": [
                    "argparse.Namespace"
                ]
            },
            "_run_single_hook": {
                "diff_before": [
                    "str"
                ],
                "return": [
                    "tuple[bool, Any]",
                    "tuple",
                    "bool",
                    "tuple[bool, str]",
                    "tuple[bool, unknown]"
                ],
                "classifier": [
                    "Any",
                    "classifier"
                ],
                "verbose": [
                    "bool"
                ],
                "hook": [
                    "verbose",
                    "hook.verbose",
                    "typing.Any",
                    "languages[hook.language]",
                    "Hook",
                    "HookConfig"
                ],
                "use_color": [
                    "bool"
                ],
                "skips": [
                    "typing.Union[set, list]",
                    "typing.Iterable[typing.Any]",
                    "typing.Container[typing.Any]",
                    "typing.Collection[typing.Any]"
                ],
                "cols": []
            },
            "_start_msg": {
                "cols": [],
                "return": [],
                "start": [
                    "str"
                ],
                "end_len": []
            },
            "_subtle_line": {
                "s": [
                    "str"
                ],
                "return": [],
                "use_color": [
                    "bool"
                ]
            },
            "filter_by_include_exclude": {
                "return": [],
                "names": [
                    "typing.Iterable[str]"
                ],
                "include": [],
                "exclude": []
            },
            "run": {
                "return": [
                    "int",
                    "typing.Union[int, typing.Any]"
                ],
                "config_file": [],
                "environ": [],
                "store": [
                    "directory",
                    "typing.Any",
                    "args.hook",
                    "config",
                    "Store"
                ],
                "args": []
            }
        }
    },
    "pre_commit.commands.sample_config": {
        "global": {
            "sample_config": {
                "return": []
            }
        }
    },
    "pre_commit.commands.try_repo": {
        "global": {
            "_repo_ref": {
                "ref": [
                    "Optional[str]"
                ],
                "repo": [
                    "str"
                ],
                "return": [
                    "tuple[str, str]",
                    "tuple[str, Optional[str]]",
                    "tuple[typing.Any, typing.Any]",
                    "None",
                    "ref"
                ],
                "tmpdir": []
            },
            "try_repo": {
                "args": [
                    "argparse.Namespace",
                    "args"
                ],
                "return": [
                    "bool",
                    "Any",
                    "None",
                    "str"
                ]
            }
        }
    },
    "pre_commit.commands.validate_config": {
        "global": {
            "validate_config": {
                "filenames": [],
                "return": []
            }
        }
    },
    "pre_commit.commands.validate_manifest": {
        "global": {
            "validate_manifest": {
                "return": [
                    "ret"
                ],
                "filenames": []
            }
        }
    },
    "pre_commit.envcontext": {
        "global": {
            "envcontext": {
                "return": [
                    "typing.Generator[typing.Union[None,None,None]]"
                ],
                "patch": [
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[typing.Tuple[typing.Any, typing.Any]]",
                    "typing.Iterable[tuple[typing.Any, typing.Any]]"
                ],
                "_env": [
                    "typing.Optional[typing.MutableMapping[str, str]]"
                ]
            },
            "format_env": {
                "return": [
                    "str"
                ],
                "env": [],
                "parts": []
            }
        },
        "Var": {
            "global": {
                "default": [
                    "str"
                ],
                "name": []
            }
        }
    },
    "pre_commit.error_handler": {
        "global": {
            "_log_and_exit": {
                "formatted": [
                    "str"
                ],
                "msg": [],
                "ret_code": [],
                "exc": [],
                "return": []
            },
            "error_handler": {
                "return": []
            }
        }
    },
    "pre_commit.file_lock": {
        "global": {
            "lock": {
                "return": [
                    "typing.Generator",
                    "typing.Generator[None, None, None]"
                ],
                "path": [
                    "str"
                ],
                "blocked_cb": [
                    "Callable"
                ]
            },
            "_locked": {
                "blocked_cb": [
                    "Callable",
                    "Callable[..., typing.Any]",
                    "Callable[..., None]"
                ],
                "fileno": [
                    "int"
                ],
                "return": []
            }
        }
    },
    "pre_commit.git": {
        "global": {
            "check_for_cygwin_mismatch": {
                "return": [
                    "None"
                ]
            },
            "commit": {
                "repo": [
                    "str"
                ],
                "return": []
            },
            "get_all_files": {
                "return": [
                    "list[str]",
                    "zsplit"
                ]
            },
            "get_best_candidate_tag": {
                "git_repo": [],
                "return": [
                    "str"
                ],
                "rev": [
                    "str"
                ]
            },
            "get_root": {
                "return": [
                    "str"
                ]
            },
            "get_git_common_dir": {
                "git_root": [],
                "return": [
                    "str"
                ]
            },
            "get_git_dir": {
                "return": [
                    "str"
                ],
                "git_root": []
            },
            "get_changed_files": {
                "old": [],
                "return": [
                    "List[str]",
                    "list[str]",
                    "typing.Any",
                    "Iterable[str]",
                    "Union[list[str], set[str]]",
                    "list[typing.Any]",
                    "Iterable[typing.Any]"
                ],
                "new": [
                    "str",
                    "typing.Any",
                    "new"
                ]
            },
            "git_path": {
                "return": [
                    "str"
                ],
                "repo": [],
                "name": [
                    "str"
                ]
            },
            "has_diff": {
                "repo": [
                    "str"
                ],
                "return": [],
                "args": []
            },
            "get_conflicted_files": {
                "return": []
            },
            "head_rev": {
                "return": [
                    "str"
                ],
                "remote": []
            },
            "has_core_hookpaths_set": {
                "return": []
            },
            "init_repo": {
                "return": [],
                "path": [
                    "str"
                ],
                "remote": [
                    "str"
                ]
            },
            "is_in_merge_conflict": {
                "return": []
            },
            "no_git_env": {
                "return": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "_env": []
            },
            "get_staged_files": {
                "cwd": [],
                "return": [
                    "list[str]"
                ]
            },
            "intent_to_add_files": {
                "return": [
                    "list[str]",
                    "typing.Any",
                    "list[typing.Any]",
                    "stdout"
                ]
            },
            "zsplit": {
                "return": [],
                "s": [
                    "str"
                ]
            },
            "parse_merge_msg_for_conflicts": {
                "return": [
                    "list[str]"
                ],
                "merge_msg": []
            }
        }
    },
    "pre_commit.hook": {
        "Hook": {
            "create": {
                "return": [],
                "src": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "typing.Any"
                ],
                "dct": []
            },
            "global": {
                "always_run": [],
                "alias": [
                    "str"
                ],
                "args": [
                    "Sequence[str]"
                ],
                "additional_dependencies": [
                    "Sequence[str]",
                    "collections.abc"
                ],
                "entry": [],
                "language_version": [],
                "log_file": [
                    "str"
                ],
                "language": [
                    "str"
                ],
                "exclude": [
                    "str"
                ],
                "exclude_types": [
                    "Sequence[str]"
                ],
                "id": [],
                "minimum_pre_commit_version": [],
                "pass_filenames": [
                    "bool"
                ],
                "fail_fast": [
                    "bool"
                ],
                "prefix": [
                    "Prefix"
                ],
                "stages": [],
                "types": [
                    "Sequence[str]"
                ],
                "src": [],
                "files": [
                    "str",
                    "types"
                ],
                "verbose": [
                    "bool"
                ],
                "name": [],
                "types_or": [],
                "description": [],
                "require_serial": []
            }
        }
    },
    "pre_commit.lang_base": {
        "global": {
            "assert_no_additional_deps": {
                "return": [
                    "None"
                ],
                "additional_deps": [
                    "typing.List[str]",
                    "typing.Iterable[str]"
                ],
                "lang": [
                    "str"
                ]
            },
            "_shuffled": {
                "seq": [],
                "return": []
            },
            "assert_version_default": {
                "binary": [],
                "return": [
                    "None"
                ],
                "version": []
            },
            "basic_get_default_version": {
                "return": [
                    "str",
                    "Any"
                ]
            },
            "basic_run_hook": {
                "color": [
                    "bool",
                    "str"
                ],
                "return": [
                    "subprocess.CompletedProcess",
                    "int",
                    "typing.Any"
                ],
                "entry": [
                    "typing.Any",
                    "str"
                ],
                "is_local": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "require_serial": [],
                "args": [
                    "list[str]"
                ],
                "file_args": [
                    "list[str]"
                ]
            },
            "basic_health_check": {
                "prefix": [
                    "prefix"
                ],
                "language_version": [],
                "return": []
            },
            "environment_dir": {
                "d": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "prefix": [],
                "language_version": []
            },
            "exe_exists": {
                "exe": [
                    "str"
                ],
                "return": [
                    "bool"
                ]
            },
            "hook_cmd": {
                "entry": [
                    "str"
                ],
                "return": [
                    "tuple[str, ...]"
                ],
                "args": []
            },
            "no_env": {
                "return": [
                    "contextlib.AbstractContextManager[None]",
                    "yield",
                    "typing.ContextManager[None]"
                ],
                "prefix": [],
                "version": []
            },
            "no_install": {
                "return": [
                    "None"
                ],
                "additional_dependencies": [],
                "prefix": [
                    "prefix",
                    "typing.Any"
                ],
                "version": []
            },
            "run_xargs": {
                "cmd": [
                    "str"
                ],
                "require_serial": [
                    "bool"
                ],
                "return": [],
                "file_args": [],
                "color": []
            },
            "setup_cmd": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "cmd": [],
                "prefix": [],
                "return": [
                    "None"
                ]
            },
            "target_concurrency": {
                "return": [
                    "int"
                ]
            }
        },
        "Language": {
            "get_default_version": {
                "return": [
                    "None",
                    "typing.Any",
                    "str",
                    "Any"
                ]
            },
            "health_check": {
                "prefix": [],
                "return": [],
                "version": []
            },
            "in_env": {
                "prefix": [],
                "return": [
                    "None",
                    "typing.Any"
                ],
                "version": [
                    "str"
                ]
            },
            "install_environment": {
                "prefix": [],
                "version": [],
                "return": [],
                "additional_dependencies": []
            },
            "run_hook": {
                "args": [
                    "list[str]",
                    "list"
                ],
                "entry": [
                    "str"
                ],
                "require_serial": [
                    "typing.Any"
                ],
                "is_local": [
                    "bool"
                ],
                "file_args": [],
                "prefix": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "color": []
            }
        }
    },
    "pre_commit.languages.conda": {
        "global": {
            "get_env_patch": {
                "env": [
                    "str"
                ],
                "return": [
                    "tuple[typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,typing.Any]]]]",
                    "tuple[typing.Union[tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,typing.Any]],tuple[typing.Union[str,typing.Any]]]]",
                    "tuple[typing.Union[tuple[typing.Union[str,UNSET]],tuple[typing.Union[str,env]],tuple[typing.Union[str,path]]]]"
                ]
            },
            "in_env": {
                "return": [
                    "None",
                    "typing.ContextManager[None]",
                    "with"
                ],
                "version": [
                    "str"
                ],
                "prefix": []
            },
            "install_environment": {
                "version": [],
                "prefix": [
                    "Workspace",
                    "object",
                    "cwd",
                    "pathlib.Path",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ],
                "additional_dependencies": []
            },
            "_conda_exe": {
                "return": []
            }
        }
    },
    "pre_commit.languages.coursier": {
        "global": {
            "get_env_patch": {
                "target_dir": [
                    "str"
                ],
                "return": [
                    "Tuple[Tuple[str, Tuple[str, str, Var]], Tuple[str, str]]",
                    "str"
                ]
            },
            "in_env": {
                "return": [
                    "typing.ContextManager[None]",
                    "None",
                    "with"
                ],
                "prefix": [
                    "str",
                    "Path",
                    "prefix"
                ],
                "version": [
                    "str",
                    "int"
                ]
            },
            "install_environment": {
                "version": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "additional_dependencies": [],
                "prefix": []
            }
        }
    },
    "pre_commit.languages.dart": {
        "global": {
            "get_env_patch": {
                "venv": [
                    "str"
                ],
                "return": []
            },
            "in_env": {
                "return": [
                    "None",
                    "typing.ContextManager[None]",
                    "typing.Generator[None, None, None]"
                ],
                "prefix": [
                    "str",
                    "Any"
                ],
                "version": [
                    "str"
                ]
            },
            "install_environment": {
                "prefix": [],
                "version": [
                    "str",
                    "typing.Any"
                ],
                "additional_dependencies": [],
                "return": []
            }
        }
    },
    "pre_commit.languages.docker": {
        "global": {
            "_get_container_id": {
                "return": [
                    "str"
                ]
            },
            "_get_docker_path": {
                "path": [],
                "return": [
                    "str"
                ]
            },
            "_is_in_docker": {
                "return": []
            },
            "build_docker_image": {
                "pull": [
                    "bool"
                ],
                "return": [
                    "None"
                ],
                "prefix": [
                    "typing.Any",
                    "str",
                    "prefix"
                ]
            },
            "get_docker_tty": {
                "color": [
                    "bool"
                ],
                "return": [
                    "tuple"
                ]
            },
            "docker_tag": {
                "return": [
                    "str"
                ],
                "prefix": [
                    "typing.Any",
                    "object"
                ]
            },
            "docker_cmd": {
                "color": [
                    "typing.Any",
                    "str",
                    "bool",
                    "color"
                ],
                "return": []
            },
            "install_environment": {
                "additional_dependencies": [],
                "version": [],
                "return": [
                    "None"
                ],
                "prefix": [
                    "str"
                ]
            },
            "md5": {
                "return": [
                    "str"
                ],
                "s": [
                    "Any",
                    "s",
                    "bytes"
                ]
            },
            "run_hook": {
                "args": [
                    "list[str]",
                    "typing.Any",
                    "tuple[str, ...]"
                ],
                "file_args": [
                    "typing.Any",
                    "list[str]",
                    "list[PathLike]"
                ],
                "entry": [
                    "ConfigEntry",
                    "Hook",
                    "entry"
                ],
                "prefix": [
                    "str"
                ],
                "require_serial": [],
                "return": [],
                "color": [
                    "bool",
                    "color"
                ],
                "is_local": []
            },
            "get_docker_user": {
                "return": [
                    "tuple"
                ]
            }
        }
    },
    "pre_commit.languages.docker_image": {
        "global": {
            "run_hook": {
                "is_local": [
                    "bool"
                ],
                "file_args": [
                    "list[str]"
                ],
                "args": [],
                "color": [
                    "bool",
                    "str",
                    "typing.Any",
                    "color"
                ],
                "require_serial": [],
                "return": [],
                "entry": [],
                "prefix": []
            }
        }
    },
    "pre_commit.languages.dotnet": {
        "global": {
            "_nuget_config_no_sources": {
                "return": [
                    "typing.ContextManager[typing.Any]"
                ]
            },
            "in_env": {
                "return": [
                    "typing.ContextManager[None]",
                    "None",
                    "typing.Generator[None, None, None]"
                ],
                "prefix": [],
                "version": [
                    "str",
                    "int"
                ]
            },
            "install_environment": {
                "return": [
                    "None"
                ],
                "additional_dependencies": [],
                "prefix": [],
                "version": []
            },
            "get_env_patch": {
                "venv": [],
                "return": [
                    "tuple[tuple[str, tuple[str, str, Var]]]",
                    "tuple[tuple[str, str, Var]]",
                    "tuple[tuple[str, tuple[str, str, Var]], str]"
                ]
            }
        }
    },
    "pre_commit.languages.fail": {
        "global": {
            "run_hook": {
                "file_args": [
                    "Iterable[str]"
                ],
                "entry": [
                    "str"
                ],
                "args": [
                    "list",
                    "list[str]",
                    "tuple"
                ],
                "color": [],
                "prefix": [
                    "str"
                ],
                "require_serial": [
                    "bool"
                ],
                "return": [],
                "is_local": []
            }
        }
    },
    "pre_commit.languages.golang": {
        "global": {
            "_get_url": {
                "version": [
                    "str"
                ],
                "return": [
                    "str"
                ]
            },
            "_install_go": {
                "return": [
                    "None"
                ],
                "dest": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            },
            "_infer_go_version": {
                "version": [],
                "return": [
                    "str"
                ]
            },
            "get_env_patch": {
                "venv": [
                    "str",
                    "venv"
                ],
                "version": [
                    "str"
                ],
                "return": [
                    "tuple[tuple[str, str], tuple[str, str], tuple[str, tuple[str, str, str, str, Var]]]",
                    "tuple[tuple[str, Union[tuple[str, str, Var], str]], ...]",
                    "tuple[tuple[str, tuple[str, str, Var]]]",
                    "tuple[tuple[str, str], tuple[str, str], tuple[str, tuple[str, str, str, str, str]]]",
                    "tuple[tuple[str, Union[tuple[str, str, Var], str]]]",
                    "tuple[tuple[str, tuple[str, str, Var]], ...]",
                    "tuple[tuple[str, Union[tuple[str, str, str], str]], ...]",
                    "tuple[tuple[str, str], tuple[str, tuple[str, str, str, str, Var]]]",
                    "tuple[tuple[str, Union[tuple[str, str, str], str]]]",
                    "os.path.join"
                ]
            },
            "_open_archive": {
                "bio": [
                    "IO[bytes]",
                    "bio"
                ],
                "return": []
            },
            "get_default_version": {
                "return": [
                    "str"
                ]
            },
            "install_environment": {
                "additional_dependencies": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "prefix": [],
                "version": []
            },
            "in_env": {
                "return": [
                    "typing.ContextManager[None]",
                    "contextlib.AbstractContextManager[None]"
                ],
                "version": [],
                "prefix": [
                    "str",
                    "Any"
                ]
            }
        },
        "ExtractAll": {
            "extractall": {
                "path": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            }
        }
    },
    "pre_commit.languages.haskell": {
        "global": {
            "get_env_patch": {
                "target_dir": [
                    "str"
                ],
                "return": []
            },
            "install_environment": {
                "return": [
                    "None"
                ],
                "version": [
                    "str"
                ],
                "additional_dependencies": [],
                "prefix": []
            },
            "in_env": {
                "return": [
                    "typing.ContextManager[None]",
                    "None",
                    "with"
                ],
                "prefix": [
                    "str",
                    "Path"
                ],
                "version": [
                    "str"
                ]
            }
        }
    },
    "pre_commit.languages.julia": {
        "global": {
            "get_env_patch": {
                "return": [
                    "tuple[tuple[str, str], tuple[str, typing.Any]]",
                    "tuple[tuple[str, str], tuple[str, str]]",
                    "tuple[tuple[str, typing.Any], tuple[str, typing.Any]]",
                    "tuple[tuple[str, str], tuple[str, typing.Union[str, UNSET]]]"
                ],
                "version": [
                    "str"
                ],
                "target_dir": [
                    "str"
                ]
            },
            "in_env": {
                "return": [
                    "typing.ContextManager[None]",
                    "contextlib.AbstractContextManager[None]"
                ],
                "prefix": [],
                "version": [
                    "str"
                ]
            },
            "install_environment": {
                "return": [
                    "None"
                ],
                "additional_dependencies": [],
                "version": [],
                "prefix": [
                    "Path",
                    "path",
                    "prefix",
                    "prefix.path"
                ]
            },
            "run_hook": {
                "args": [],
                "is_local": [
                    "bool"
                ],
                "prefix": [],
                "entry": [],
                "require_serial": [],
                "return": [
                    "typing.Any",
                    "int"
                ],
                "color": [
                    "bool"
                ],
                "file_args": []
            }
        }
    },
    "pre_commit.languages.lua": {
        "global": {
            "get_env_patch": {
                "d": [
                    "str"
                ],
                "return": [
                    "tuple[tuple[str, tuple[Union[str, Var], ...]], ...]",
                    "tuple[tuple[str, tuple[str, str, Var]], tuple[str, tuple[str, str]], tuple[str, tuple[str]]]",
                    "tuple[tuple[str, tuple[str, str, ...]], ...]",
                    "tuple[tuple[str, tuple[str, ...]], ...]",
                    "tuple[tuple[str, tuple[Union[str, tuple[str, ...]]]], ...]",
                    "tuple[tuple[str, tuple[Union[str, Var], ...]]]"
                ]
            },
            "install_environment": {
                "return": [
                    "None"
                ],
                "additional_dependencies": [],
                "prefix": [
                    "str",
                    "star",
                    "Path",
                    "pathlib.Path",
                    "prefix",
                    "PathLike",
                    "int"
                ],
                "version": []
            },
            "in_env": {
                "version": [
                    "str"
                ],
                "return": [
                    "typing.ContextManager[None]",
                    "None",
                    "yield",
                    "with"
                ],
                "prefix": []
            },
            "_get_lua_version": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "pre_commit.languages.node": {
        "global": {
            "health_check": {
                "return": [],
                "prefix": [
                    "str"
                ],
                "version": []
            },
            "get_default_version": {
                "return": [
                    "str"
                ]
            },
            "in_env": {
                "prefix": [
                    "str",
                    "prefix"
                ],
                "return": [
                    "typing.ContextManager[None]",
                    "None",
                    "with"
                ],
                "version": [
                    "str",
                    "version"
                ]
            },
            "get_env_patch": {
                "venv": [
                    "str"
                ],
                "return": []
            },
            "install_environment": {
                "return": [
                    "None"
                ],
                "version": [
                    "str"
                ],
                "prefix": [
                    "Prefix",
                    "prefix",
                    "Path",
                    "exists",
                    "typing.Any"
                ],
                "additional_dependencies": []
            }
        }
    },
    "pre_commit.languages.perl": {
        "global": {
            "get_env_patch": {
                "venv": [
                    "str"
                ],
                "return": []
            },
            "in_env": {
                "return": [
                    "with",
                    "None",
                    "typing.ContextManager[None]"
                ],
                "version": [
                    "str",
                    "int"
                ],
                "prefix": [
                    "str",
                    "Path"
                ]
            },
            "install_environment": {
                "additional_dependencies": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "prefix": [
                    "typing.Any",
                    "str"
                ],
                "version": []
            }
        }
    },
    "pre_commit.languages.pygrep": {
        "global": {
            "_process_filename_at_once": {
                "return": [
                    "typing.Any",
                    "retv"
                ],
                "filename": [
                    "str"
                ],
                "pattern": [
                    "typing.Pattern"
                ]
            },
            "_process_filename_at_once_negated": {
                "return": [],
                "filename": [
                    "str"
                ],
                "pattern": [
                    "typing.Pattern"
                ]
            },
            "_process_filename_by_line_negated": {
                "return": [
                    "None"
                ],
                "pattern": [
                    "str"
                ],
                "filename": [
                    "str",
                    "filename"
                ]
            },
            "_process_filename_by_line": {
                "pattern": [],
                "return": [
                    "retv"
                ],
                "filename": [
                    "str",
                    "pathlib.Path",
                    "bytes"
                ]
            },
            "run_hook": {
                "color": [
                    "bool"
                ],
                "args": [],
                "entry": [
                    "str"
                ],
                "file_args": [
                    "list[str]",
                    "typing.Iterable[str]",
                    "typing.Sequence[str]"
                ],
                "is_local": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "require_serial": [
                    "bool"
                ],
                "return": []
            },
            "main": {
                "return": [
                    "int"
                ],
                "argv": [
                    "typing.Optional[list[str]]"
                ]
            }
        },
        "Choice": {
            "global": {
                "multiline": [
                    "bool",
                    "argparse.ArgumentParser"
                ],
                "negate": []
            }
        }
    },
    "pre_commit.languages.python": {
        "global": {
            "_find_by_py_launcher": {
                "return": [
                    "typing.Optional[str]",
                    "Optional[str]"
                ],
                "version": [
                    "str"
                ]
            },
            "_impl_exe_name": {
                "return": [
                    "str"
                ]
            },
            "_find_by_sys_executable": {
                "return": [
                    "Optional[str]",
                    "Optional[Any]",
                    "None"
                ]
            },
            "_read_pyvenv_cfg": {
                "filename": [],
                "return": []
            },
            "_sys_executable_matches": {
                "version": [],
                "return": []
            },
            "_version_info": {
                "return": [],
                "exe": []
            },
            "bin_dir": {
                "return": [],
                "venv": []
            },
            "get_default_version": {
                "return": []
            },
            "health_check": {
                "version": [
                    "str",
                    "typing.Any",
                    "int"
                ],
                "return": [
                    "typing.Optional[str]",
                    "else"
                ],
                "prefix": [
                    "Path",
                    "path"
                ]
            },
            "get_env_patch": {
                "return": [
                    "tuple[tuple[str, typing.Union[str, tuple[str, str, typing.Any]]], ...]",
                    "tuple[tuple[str, str], tuple[str, str], tuple[str, str], tuple[str, tuple[str, str, str]]]",
                    "tuple[tuple[str, typing.Union[str, typing.Any, tuple[str, str, typing.Any]]], ...]",
                    "tuple[tuple[str, typing.Union[str, typing.Any, tuple[typing.Any, str, typing.Any]]], ...]",
                    "Var",
                    "tuple[tuple[str, typing.Union[str, None, tuple[str, str, Var]]], ...]",
                    "tuple[tuple[str, typing.Union[str, tuple[str, str, Var]]], ...]",
                    "venv",
                    "Any"
                ],
                "venv": [
                    "str"
                ]
            },
            "in_env": {
                "return": [
                    "None",
                    "typing.ContextManager[None]",
                    "with"
                ],
                "prefix": [],
                "version": []
            },
            "install_environment": {
                "version": [
                    "str"
                ],
                "additional_dependencies": [
                    "tuple[str, ...]",
                    "Iterable[str]",
                    "list[str]"
                ],
                "prefix": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "norm_version": {
                "return": [
                    "Optional[str]"
                ],
                "version": []
            }
        }
    },
    "pre_commit.languages.r": {
        "global": {
            "_cmd_from_hook": {
                "args": [
                    "list[typing.Any]",
                    "tuple[typing.Any, ...]",
                    "list[str]",
                    "typing.Iterable[typing.Any]",
                    "tuple[str, ...]"
                ],
                "return": [
                    "tuple[typing.Any, ...]"
                ],
                "entry": [
                    "str"
                ],
                "is_local": [],
                "prefix": []
            },
            "_execute_r": {
                "args": [
                    "tuple",
                    "tuple[typing.Any]",
                    "tuple[typing.Any, ...]"
                ],
                "return": [
                    "str"
                ],
                "code": [],
                "version": [
                    "str",
                    "Version"
                ],
                "cli_opts": [],
                "prefix": [
                    "str"
                ],
                "cwd": []
            },
            "_entry_validate": {
                "entry": [
                    "list[typing.Any]",
                    "list[str]",
                    "tuple[typing.Any, ...]"
                ],
                "return": [
                    "None"
                ]
            },
            "_execute_r_in_renv": {
                "return": [],
                "args": [
                    "tuple"
                ],
                "code": [
                    "typing.Any",
                    "str"
                ],
                "cwd": [],
                "prefix": [],
                "version": []
            },
            "_execute_vanilla_r": {
                "args": [
                    "tuple"
                ],
                "code": [],
                "version": [],
                "prefix": [
                    "str",
                    "typing.Any"
                ],
                "return": [
                    "typing.Any"
                ],
                "cwd": []
            },
            "_prefix_if_file_entry": {
                "return": [],
                "is_local": [
                    "bool"
                ],
                "entry": [],
                "prefix": []
            },
            "_r_code_in_tempfile": {
                "return": [
                    "typing.Iterator[str]",
                    "str"
                ],
                "code": []
            },
            "_inline_r_setup": {
                "return": [
                    "str"
                ],
                "code": []
            },
            "_read_executable_version": {
                "envdir": [],
                "version": [
                    "str"
                ],
                "prefix": [
                    "str"
                ],
                "return": []
            },
            "_read_installed_version": {
                "prefix": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "envdir": [
                    "str",
                    "PathLike",
                    "typing.Union[str, PathLike]",
                    "Path"
                ]
            },
            "_write_current_r_version": {
                "return": [
                    "None"
                ],
                "envdir": [
                    "str",
                    "typing.Union[str, os.PathLike]"
                ],
                "prefix": [],
                "version": [
                    "str",
                    "Any"
                ]
            },
            "_rscript_exec": {
                "return": [
                    "str"
                ]
            },
            "health_check": {
                "return": [],
                "version": [
                    "str",
                    "typing.Any"
                ],
                "prefix": []
            },
            "get_env_patch": {
                "return": [
                    "tuple[tuple[str, str], tuple[str, Any]]",
                    "tuple[tuple[str, str], Any]",
                    "tuple[tuple[str, str], str]"
                ],
                "venv": []
            },
            "in_env": {
                "return": [
                    "typing.ContextManager[None]",
                    "with",
                    "None"
                ],
                "version": [
                    "str"
                ],
                "prefix": []
            },
            "run_hook": {
                "entry": [],
                "args": [],
                "color": [
                    "bool"
                ],
                "require_serial": [],
                "return": [
                    "typing.Any"
                ],
                "file_args": [],
                "is_local": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ]
            },
            "install_environment": {
                "version": [
                    "str",
                    "float"
                ],
                "prefix": [],
                "additional_dependencies": [
                    "typing.Optional[typing.Iterable[str]]",
                    "typing.List[str]",
                    "typing.Iterable[typing.Any]",
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.List[str]]",
                    "typing.Iterable[str]",
                    "list[str]",
                    "args"
                ],
                "return": []
            }
        }
    },
    "pre_commit.languages.ruby": {
        "global": {
            "_extract_resource": {
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "dest": []
            },
            "_install_rbenv": {
                "return": [],
                "version": [],
                "prefix": [
                    "path",
                    "typing.Any",
                    "Params",
                    "str",
                    "MozbuildObject",
                    "Prefix",
                    "prefix"
                ]
            },
            "_install_ruby": {
                "prefix": [
                    "str",
                    "typing.Any"
                ],
                "version": [
                    "str"
                ],
                "return": []
            },
            "_resource_bytesio": {
                "return": [
                    "typing.BinaryIO",
                    "typing.IO[bytes]"
                ],
                "filename": [
                    "str"
                ]
            },
            "in_env": {
                "prefix": [],
                "version": [
                    "str"
                ],
                "return": []
            },
            "get_default_version": {
                "return": []
            },
            "get_env_patch": {
                "language_version": [],
                "venv": [],
                "return": []
            },
            "install_environment": {
                "return": [
                    "None"
                ],
                "additional_dependencies": [
                    "typing.Iterable[typing.Any]",
                    "Iterable[typing.Any]"
                ],
                "prefix": [
                    "str",
                    "pathlib.Path",
                    "star",
                    "prefix",
                    "os.path.join",
                    "Path",
                    "typing.Any"
                ],
                "version": []
            }
        }
    },
    "pre_commit.languages.rust": {
        "global": {
            "_add_dependencies": {
                "return": [
                    "None"
                ],
                "prefix": [
                    "str"
                ],
                "additional_dependencies": []
            },
            "_rust_toolchain": {
                "return": [
                    "str"
                ],
                "language_version": [
                    "str",
                    "C.DEFAULT",
                    "Enum",
                    "LanguageVersion",
                    "int"
                ]
            },
            "get_default_version": {
                "return": [
                    "str"
                ]
            },
            "get_env_patch": {
                "target_dir": [],
                "version": [
                    "str"
                ],
                "return": []
            },
            "in_env": {
                "version": [
                    "str"
                ],
                "prefix": [
                    "str",
                    "Any",
                    "Path",
                    "prefix"
                ],
                "return": [
                    "contextlib.AbstractContextManager[None]",
                    "typing.ContextManager[None]"
                ]
            },
            "install_environment": {
                "version": [
                    "str"
                ],
                "return": [],
                "prefix": [],
                "additional_dependencies": [
                    "typing.Iterable[str]",
                    "Iterable[str]",
                    "Collection[str]"
                ]
            },
            "install_rust_with_toolchain": {
                "toolchain": [],
                "return": [],
                "envdir": [
                    "str"
                ]
            }
        }
    },
    "pre_commit.languages.script": {
        "global": {
            "run_hook": {
                "color": [
                    "bool"
                ],
                "is_local": [
                    "bool"
                ],
                "file_args": [],
                "require_serial": [
                    "bool"
                ],
                "return": [],
                "args": [
                    "list[str]",
                    "on"
                ],
                "entry": [],
                "prefix": []
            }
        }
    },
    "pre_commit.languages.swift": {
        "global": {
            "get_env_patch": {
                "venv": [],
                "return": [
                    "tuple[tuple[str, tuple[str, str, Var]]]",
                    "tuple[tuple[str, tuple[Any, str, Var]]]",
                    "tuple[tuple[str, tuple[Any, str, Any]]]",
                    "tuple[tuple[str, tuple[Any, str, str]]]",
                    "tuple[tuple[str, tuple[Any, str, Var], Var]]",
                    "tuple[tuple[str, tuple[Any, str, Var], str]]",
                    "Var"
                ]
            },
            "in_env": {
                "return": [
                    "contextlib.AbstractContextManager[None]",
                    "typing.ContextManager[None]"
                ],
                "version": [],
                "prefix": [
                    "str",
                    "Path",
                    "prefix",
                    "Any"
                ]
            },
            "install_environment": {
                "additional_dependencies": [
                    "list[str]"
                ],
                "return": [
                    "None"
                ],
                "prefix": [
                    "typing.Any",
                    "Any",
                    "CustomPrefixType",
                    "Path",
                    "prefix"
                ],
                "version": []
            }
        }
    },
    "pre_commit.logging_handler": {
        "LoggingHandler": {
            "emit": {
                "return": [],
                "record": [
                    "logging.LogRecord"
                ]
            },
            "__init__": {
                "use_color": [],
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "logging_handler": {
                "return": [],
                "use_color": []
            }
        }
    },
    "pre_commit.main": {
        "global": {
            "_add_config_option": {
                "parser": [
                    "argparse.ArgumentParser"
                ],
                "return": [
                    "None"
                ]
            },
            "_add_hook_type_option": {
                "parser": [],
                "return": []
            },
            "_adjust_args_and_chdir": {
                "args": [
                    "argparse.Namespace"
                ],
                "return": []
            },
            "main": {
                "argv": [
                    "list[str]",
                    "Optional[list[str]]"
                ],
                "return": [
                    "typing.Any"
                ]
            },
            "_add_run_options": {
                "return": [
                    "None"
                ],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        }
    },
    "pre_commit.meta_hooks.check_hooks_apply": {
        "global": {
            "check_all_hooks_match_files": {
                "config_file": [],
                "return": []
            },
            "main": {
                "return": [
                    "int",
                    "retv"
                ],
                "argv": [
                    "typing.Optional[list[str]]"
                ]
            }
        }
    },
    "pre_commit.meta_hooks.check_useless_excludes": {
        "global": {
            "check_useless_excludes": {
                "config_file": [
                    "str"
                ],
                "return": [
                    "typing.Any"
                ]
            },
            "exclude_matches_any": {
                "return": [
                    "bool"
                ],
                "filenames": [
                    "list[str]"
                ],
                "include": [],
                "exclude": []
            },
            "main": {
                "return": [
                    "int"
                ],
                "argv": []
            }
        }
    },
    "pre_commit.meta_hooks.identity": {
        "global": {
            "main": {
                "return": [],
                "argv": [
                    "Optional[list[str]]",
                    "list[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "pre_commit.output": {
        "global": {
            "write": {
                "s": [],
                "stream": [
                    "io.BufferedWriter"
                ],
                "return": []
            },
            "write_line_b": {
                "logfile_name": [
                    "Optional[str]"
                ],
                "s": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "typing.Optional[bytes]"
                ],
                "return": [
                    "None"
                ],
                "stream": []
            },
            "write_line": {
                "kwargs": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "s": [
                    "Optional[str]"
                ]
            }
        }
    },
    "pre_commit.parse_shebang": {
        "global": {
            "normalize_cmd": {
                "env": [
                    "typing.Optional[typing.Dict[typing.Any, typing.Any]]",
                    "Optional[dict[typing.Any, typing.Any]]",
                    "typing.Optional[typing.Any]",
                    "Optional[typing.Any]",
                    "typing.Any"
                ],
                "cmd": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": []
            },
            "find_executable": {
                "env": [
                    "Optional[dict]",
                    "None"
                ],
                "return": [],
                "exe": [
                    "str"
                ]
            },
            "parse_filename": {
                "filename": [
                    "str"
                ],
                "return": [
                    "tuple",
                    "Union[tuple, Any]"
                ]
            },
            "normexe": {
                "env": [],
                "return": [
                    "str",
                    "orig",
                    "None",
                    "exe",
                    "Optional[str]"
                ],
                "orig": []
            }
        },
        "ExecutableNotFoundError": {
            "to_output": {
                "return": []
            }
        }
    },
    "pre_commit.prefix": {
        "Prefix": {
            "global": {
                "prefix_dir": [
                    "str"
                ]
            },
            "path": {
                "parts": [],
                "return": []
            },
            "exists": {
                "return": [],
                "parts": []
            },
            "star": {
                "end": [
                    "str"
                ],
                "return": [
                    "tuple[typing.Any]",
                    "tuple[typing.Union[str,...]]"
                ]
            }
        }
    },
    "pre_commit.repository": {
        "global": {
            "_cloned_repository_hooks": {
                "return": [],
                "root_config": [
                    "typing.Any",
                    "RuntimeConfig"
                ],
                "repo_config": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "store": []
            },
            "_hook": {
                "return": [
                    "typing.Any",
                    "ret"
                ],
                "hook_dicts": [
                    "rest",
                    "typing.Tuple[typing.Dict[typing.Any, typing.Any], ...]",
                    "tuple[dict, ...]",
                    "typing.Sequence[typing.Dict[typing.Any, typing.Any]]",
                    "typing.Tuple[typing.Union[dict, typing.Iterable[typing.Tuple[typing.Any, typing.Any]]], ...]",
                    "tuple[typing.Any, ...]"
                ],
                "root_config": []
            },
            "_hook_install": {
                "return": [
                    "None"
                ],
                "hook": []
            },
            "_non_cloned_repository_hooks": {
                "root_config": [
                    "RuntimeConfig",
                    "typing.Any"
                ],
                "return": [
                    "tuple[Hook]"
                ],
                "repo_config": [],
                "store": []
            },
            "_state": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "additional_deps": [
                    "typing.Any",
                    "typing.Iterable[Any]",
                    "typing.Set",
                    "typing.Iterable[typing.Any]",
                    "typing.List[typing.Any]"
                ]
            },
            "_hook_installed": {
                "return": [],
                "hook": []
            },
            "_state_filename_v1": {
                "return": [
                    "str"
                ],
                "venv": [
                    "str",
                    "Path",
                    "os.PathLike",
                    "PathLike",
                    "Union[str, os.PathLike]"
                ]
            },
            "_read_state": {
                "venv": [
                    "Path",
                    "str"
                ],
                "return": []
            },
            "_repository_hooks": {
                "store": [
                    "typing.Any",
                    "store",
                    "RepositoryStore",
                    "ConfigStore",
                    "StoreInterface"
                ],
                "return": [
                    "typing.Any",
                    "Any",
                    "list[SessionRunHook]",
                    "list[typing.Any]"
                ],
                "root_config": [],
                "repo_config": [
                    "dict[str, typing.Any]",
                    "dict"
                ]
            },
            "all_hooks": {
                "return": [
                    "tuple[typing.Any]",
                    "tuple[str]"
                ],
                "store": [],
                "root_config": [
                    "dict[str, typing.Any]",
                    "typing.Mapping",
                    "typing.Dict[str, typing.Any]"
                ]
            },
            "_state_filename_v2": {
                "return": [
                    "str"
                ],
                "venv": [
                    "str",
                    "PathLike",
                    "Path",
                    "os.PathLike",
                    "Union[str, os.PathLike]",
                    "Union[str, PathLike]"
                ]
            },
            "install_hook_envs": {
                "hooks": [],
                "store": [
                    "DummyBackupStore",
                    "store",
                    "BackupStore"
                ],
                "return": []
            }
        }
    },
    "pre_commit.staged_files_only": {
        "global": {
            "_git_apply": {
                "return": [
                    "None"
                ],
                "patch": []
            },
            "_intent_to_add_cleared": {
                "return": [
                    "typing.Generator[None, None, None]",
                    "contextlib.AbstractContextManager[None]",
                    "typing.ContextManager[None]",
                    "contextlib.AbstractContextManager[typing.Any]",
                    "None"
                ]
            },
            "_unstaged_changes_cleared": {
                "return": [],
                "patch_dir": [
                    "str"
                ]
            },
            "staged_files_only": {
                "return": [
                    "typing.Generator[None, None, None]",
                    "contextlib.AbstractContextManager[None]",
                    "typing.ContextManager[None]",
                    "yield",
                    "None"
                ],
                "patch_dir": []
            }
        }
    },
    "pre_commit.store": {
        "Store": {
            "__init__": {
                "return": [
                    "None"
                ],
                "directory": []
            },
            "_complete_clone": {
                "return": [],
                "git_cmd": [
                    "typing.Any",
                    "str",
                    "list[str]"
                ],
                "ref": []
            },
            "_create_config_table": {
                "db": [
                    "executescript",
                    "DatabaseConnection"
                ],
                "return": []
            },
            "_new_repo": {
                "repo": [
                    "str"
                ],
                "make_strategy": [
                    "Callable",
                    "function",
                    "callable"
                ],
                "return": [],
                "deps": [],
                "ref": []
            },
            "_shallow_clone": {
                "return": [],
                "git_cmd": [],
                "ref": [
                    "str"
                ]
            },
            "clone": {
                "return": [],
                "ref": [],
                "repo": [],
                "deps": []
            },
            "connect": {
                "return": [
                    "db",
                    "connect"
                ],
                "db_path": []
            },
            "delete_configs": {
                "configs": [
                    "list[str]",
                    "List[str]"
                ],
                "return": []
            },
            "db_repo_name": {
                "return": [
                    "str"
                ],
                "repo": [],
                "deps": [
                    "typing.Iterable[str]",
                    "list[str]",
                    "tuple[str]"
                ]
            },
            "delete_repo": {
                "ref": [],
                "path": [],
                "return": [
                    "None"
                ],
                "db_repo_name": []
            },
            "mark_config_used": {
                "return": [],
                "path": [
                    "str",
                    "PathLike"
                ]
            },
            "select_all_configs": {
                "return": [
                    "list[typing.Any]"
                ]
            },
            "exclusive_lock": {
                "return": [
                    "Generator",
                    "Generator[None, None, None]"
                ]
            },
            "select_all_repos": {
                "return": []
            },
            "make_local": {
                "return": [
                    "Repository"
                ],
                "deps": [
                    "deps",
                    "typing.Union[list, dict]",
                    "typing.Any",
                    "list",
                    "dict",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "global": {
            "_get_default_directory": {
                "return": [
                    "str"
                ]
            },
            "_make_local_repo": {
                "directory": [
                    "str"
                ],
                "return": []
            }
        }
    },
    "pre_commit.util": {
        "Pty": {
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self"
                ]
            },
            "__exit__": {
                "exc_value": [
                    "typing.Optional[Exception]"
                ],
                "traceback": [
                    "typing.Optional[types.TracebackType]"
                ],
                "exc_type": [],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None",
                    "CalledProcessError",
                    "stderr"
                ]
            },
            "close_w": {
                "return": [
                    "None"
                ]
            },
            "close_r": {
                "return": []
            }
        },
        "CalledProcessError": {
            "__bytes__": {
                "return": [
                    "bytes"
                ]
            },
            "__init__": {
                "stderr": [],
                "return": [
                    "None"
                ],
                "cmd": [
                    "typing.Any",
                    "list[str]",
                    "cmd",
                    "str"
                ],
                "returncode": [
                    "int"
                ],
                "stdout": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "_handle_readonly": {
                "return": [],
                "func": [
                    "function",
                    "callable"
                ],
                "path": [
                    "str"
                ],
                "exc": []
            },
            "_setdefault_kwargs": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[str, int]",
                    "kwargs",
                    "MutableMapping[str, int]"
                ]
            },
            "_handle_readonly_old": {
                "path": [],
                "func": [],
                "excinfo": [],
                "return": []
            },
            "_oserror_to_output": {
                "return": [],
                "e": []
            },
            "clean_path_on_failure": {
                "path": [],
                "return": [
                    "typing.Generator[typing.Union[None,None,None]]"
                ]
            },
            "cmd_output_b": {
                "check": [],
                "cmd": [
                    "tuple[str, ...]",
                    "typing.Sequence[str]",
                    "Sequence[str]"
                ],
                "return": [
                    "tuple[int, bytes, bytes]",
                    "tuple[typing.Any, typing.Any, typing.Any]"
                ],
                "kwargs": []
            },
            "cmd_output": {
                "cmd": [
                    "typing.Tuple[typing.Any, ...]",
                    "typing.Any"
                ],
                "return": [
                    "tuple[int, str, str]",
                    "Tuple[int, str, str]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ]
            },
            "cmd_output_p": {
                "check": [],
                "return": [
                    "None",
                    "buf",
                    "typing.Union[typing.Any, typing.Any, tuple[typing.Any, typing.Any, None]]",
                    "typing.Union[typing.Any, typing.Any, typing.Tuple[typing.Any, typing.Any, None]]",
                    "typing.Union[Output, tuple[int, typing.Any, None]]",
                    "typing.Union[typing.Any, typing.Tuple[typing.Any, typing.Any, None]]",
                    "typing.Union[Output, typing.Tuple[int, typing.Any, None]]"
                ],
                "kwargs": [],
                "cmd": []
            },
            "make_executable": {
                "filename": [
                    "str"
                ],
                "return": []
            },
            "force_bytes": {
                "return": [
                    "bytes"
                ],
                "exc": [
                    "Exception",
                    "object",
                    "Any"
                ]
            },
            "win_exe": {
                "return": [
                    "str",
                    "typing.Any"
                ],
                "s": []
            },
            "resource_text": {
                "return": [],
                "filename": []
            },
            "rmtree": {
                "return": [
                    "None",
                    "typing.None"
                ],
                "path": []
            }
        }
    },
    "pre_commit.xargs": {
        "global": {
            "_command_length": {
                "return": [],
                "cmd": [
                    "tuple[str, ...]",
                    "typing.Iterable[str]"
                ]
            },
            "_environ_size": {
                "_env": [
                    "os.environ",
                    "os.environb",
                    "None",
                    "typing.Optional[dict]"
                ],
                "return": [
                    "size",
                    "int"
                ]
            },
            "_get_platform_max_length": {
                "return": [
                    "int"
                ]
            },
            "_thread_mapper": {
                "return": [],
                "maxsize": []
            },
            "cpu_count": {
                "return": [
                    "int"
                ]
            },
            "xargs": {
                "cmd": [
                    "str"
                ],
                "color": [
                    "bool"
                ],
                "_max_length": [],
                "target_concurrency": [],
                "kwargs": [],
                "return": [],
                "varargs": []
            },
            "partition": {
                "return": [
                    "tuple"
                ],
                "cmd": [],
                "varargs": [],
                "_max_length": [],
                "target_concurrency": []
            }
        }
    },
    "pre_commit.yaml": {
        "global": {
            "yaml_dump": {
                "kwargs": [],
                "o": [
                    "dict",
                    "typing.Any"
                ],
                "return": [
                    "str"
                ]
            }
        }
    },
    "pre_commit.yaml_rewrite": {
        "MappingKey": {
            "global": {
                "k": [
                    "yaml.nodes.Node",
                    "yaml.nodes.ScalarNode",
                    "ScalarNode",
                    "Node",
                    "k"
                ]
            },
            "match": {
                "n": [],
                "return": []
            }
        },
        "global": {
            "_match": {
                "gen": [
                    "typing.Iterable[typing.Any]"
                ],
                "m": [],
                "return": []
            },
            "match": {
                "return": [
                    "typing.Generator[ScalarNode, None, None]"
                ],
                "matcher": [
                    "typing.Iterable[typing.Any]"
                ],
                "n": []
            }
        },
        "MappingValue": {
            "global": {
                "k": [
                    "yaml.nodes.ScalarNode",
                    "ScalarNode",
                    "Node",
                    "yaml.nodes.Node",
                    "value",
                    "str"
                ]
            },
            "match": {
                "return": [],
                "n": [
                    "MappingNode"
                ]
            }
        },
        "_Matcher": {
            "match": {
                "n": [
                    "int",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "SequenceItem": {
            "match": {
                "n": [
                    "SequenceNode",
                    "Node",
                    "typing.Union[SequenceNode, typing.Any]",
                    "typing.Union[SequenceNode, Node]",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            }
        }
    }
}