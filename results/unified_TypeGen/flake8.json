{
    "flake8.api.legacy": {
        "StyleGuide": {
            "excluded": {
                "return": [],
                "filename": [],
                "parent": []
            },
            "__init__": {
                "application": [],
                "return": [
                    "None"
                ]
            },
            "init_report": {
                "return": [],
                "reporter": [
                    "formatter.BaseFormatter"
                ]
            },
            "input_file": {
                "line_offset": [
                    "int"
                ],
                "return": [
                    "filename",
                    "None"
                ],
                "lines": [],
                "expected": [
                    "expected",
                    "None",
                    "pass",
                    "str",
                    "list",
                    "Any",
                    "List[str]"
                ],
                "filename": [
                    "filename",
                    "str"
                ]
            },
            "check_files": {
                "paths": [
                    "None",
                    "paths",
                    "options",
                    "Path",
                    "SomeType",
                    "List[PathLike]"
                ],
                "return": [
                    "Report"
                ]
            }
        },
        "Report": {
            "__init__": {
                "application": [],
                "return": [
                    "None"
                ]
            },
            "get_statistics": {
                "return": [
                    "List[str]",
                    "s",
                    "message",
                    "s.message",
                    "s.count"
                ],
                "violation": []
            }
        },
        "global": {
            "get_style_guide": {
                "kwargs": [
                    "dict",
                    "kwargs",
                    "None"
                ],
                "return": []
            }
        }
    },
    "flake8": {
        "global": {
            "configure_logging": {
                "verbosity": [
                    "int",
                    "verbosity",
                    "None"
                ],
                "return": [
                    "None",
                    "return"
                ],
                "filename": [
                    "filename",
                    "str",
                    "None",
                    "Optional[str]",
                    "fileobj",
                    "Union[str, None, IO]",
                    "Union[str, None]"
                ],
                "logformat": [
                    "str",
                    "logformat",
                    "logging.Formatter"
                ]
            }
        }
    },
    "flake8.checker": {
        "FileChecker": {
            "__init__": {
                "options": [
                    "options",
                    "None",
                    "self.options"
                ],
                "filename": [
                    "filename",
                    "str"
                ],
                "return": [
                    "None"
                ],
                "plugins": []
            },
            "__repr__": {
                "return": []
            },
            "_extract_syntax_information": {
                "exception": [
                    "tokenize.TokenError",
                    "exception",
                    "SyntaxError",
                    "Exception",
                    "TokenError"
                ],
                "return": []
            },
            "_make_processor": {
                "return": []
            },
            "check_physical_eol": {
                "prev_physical": [],
                "return": [],
                "token": []
            },
            "handle_newline": {
                "return": [],
                "token_type": [
                    "tokenize",
                    "tokenize.NEWLINE",
                    "int",
                    "NAME"
                ]
            },
            "process_tokens": {
                "return": []
            },
            "report": {
                "column": [],
                "error_code": [
                    "None",
                    "str",
                    "text"
                ],
                "line_number": [
                    "int",
                    "report",
                    "self.results",
                    "column"
                ],
                "return": [],
                "text": []
            },
            "run_ast_checks": {
                "return": []
            },
            "run_check": {
                "plugin": [
                    "plugin",
                    "parameters",
                    "obj",
                    "plugin.obj",
                    "None"
                ],
                "return": [
                    "plugin.obj",
                    "None",
                    "Type[BaseChecker]",
                    "except",
                    "params",
                    "Exception",
                    "List[Any]",
                    "list",
                    "pass",
                    "Any",
                    "checker"
                ],
                "arguments": [
                    "dict",
                    "arguments"
                ]
            },
            "run_checks": {
                "return": [
                    "self.statistics",
                    "statistics",
                    "TypeOfStatistics",
                    "tuple",
                    "Tuple[TypeOfDisplayName, TypeOfResults, TypeOfStatistics]",
                    "self.results",
                    "Any",
                    "Tuple[Any, Any, Any]",
                    "dict"
                ]
            },
            "run_logical_checks": {
                "return": []
            },
            "run_physical_checks": {
                "return": [
                    "None",
                    "filename",
                    "str",
                    "PathLike",
                    "put",
                    "join",
                    "delete"
                ],
                "physical_line": []
            }
        },
        "Manager": {
            "__init__": {
                "return": [
                    "None",
                    "pass"
                ],
                "plugins": [],
                "style_guide": [],
                "argv": [
                    "argv",
                    "sys.argv",
                    "None",
                    "List[str]",
                    "cli",
                    "list[str]"
                ]
            },
            "_job_count": {
                "return": [
                    "int"
                ]
            },
            "_handle_results": {
                "results": [],
                "return": [],
                "filename": [
                    "str",
                    "filename"
                ]
            },
            "_process_statistics": {
                "return": [
                    "None"
                ]
            },
            "report": {
                "return": []
            },
            "run": {
                "return": [
                    "None"
                ]
            },
            "start": {
                "return": []
            },
            "run_serial": {
                "return": [
                    "None"
                ]
            },
            "run_parallel": {
                "return": [
                    "None"
                ]
            },
            "stop": {
                "return": []
            }
        },
        "global": {
            "_mp_init": {
                "return": [
                    "None"
                ],
                "argv": []
            },
            "_mp_run": {
                "return": [
                    "FileChecker"
                ],
                "filename": []
            },
            "_mp_prefork": {
                "return": [
                    "contextlib.AbstractContextManager",
                    "None",
                    "contextlib",
                    "contextlib.GeneratorContextManager",
                    "contextlib.AbstractContextManager[None]"
                ],
                "options": [
                    "options",
                    "project",
                    "plugins"
                ],
                "plugins": [
                    "plugins",
                    "List",
                    "List[BaseAdminPlugin]",
                    "options",
                    "CoveragePlugin",
                    "Plugin",
                    "List[BasePlugin]"
                ]
            },
            "_try_initialize_processpool": {
                "job_count": [
                    "int",
                    "multiprocessing.Pool"
                ],
                "return": [],
                "argv": []
            },
            "find_offset": {
                "mapping": [],
                "return": [
                    "None"
                ],
                "offset": [
                    "None",
                    "offset",
                    "float"
                ]
            },
            "global": {
                "_mp_plugins": [],
                "_mp_options": [
                    "mp",
                    "None"
                ]
            }
        }
    },
    "flake8.discover_files": {
        "global": {
            "expand_paths": {
                "exclude": [
                    "exclude",
                    "Any",
                    "list",
                    "Set[str]",
                    "set",
                    "tuple",
                    "None"
                ],
                "filename_patterns": [
                    "fnmatch",
                    "utils.fnmatch",
                    "str",
                    "List[str]"
                ],
                "stdin_display_name": [
                    "str"
                ],
                "return": [],
                "paths": []
            },
            "_filenames_from": {
                "predicate": [
                    "predicate",
                    "Callable",
                    "arg",
                    "bool",
                    "function",
                    "None"
                ],
                "arg": [
                    "str",
                    "arg",
                    "os.PathLike",
                    "Path",
                    "PathLike",
                    "os",
                    "os.path",
                    "pathlib"
                ],
                "return": [
                    "yield",
                    "Iterator[str]",
                    "PathGenerator",
                    "Iterable[str]",
                    "Generator[str, None, None]",
                    "Iterable",
                    "Path",
                    "os.walk",
                    "Sequence",
                    "PathLike"
                ]
            }
        }
    },
    "flake8.exceptions": {
        "FailedToLoadPlugin": {
            "__init__": {
                "exception": [],
                "return": [],
                "plugin_name": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str",
                    "FORMAT",
                    "self.FORMAT",
                    "exc"
                ]
            }
        },
        "PluginExecutionFailed": {
            "__init__": {
                "filename": [
                    "filename",
                    "None"
                ],
                "exception": [],
                "plugin_name": [],
                "return": []
            },
            "__str__": {
                "return": []
            }
        },
        "PluginRequestedUnknownParameters": {
            "__init__": {
                "exception": [
                    "exception"
                ],
                "return": [
                    "None",
                    "Exception",
                    "PluginManager",
                    "List[PluginManager]"
                ],
                "plugin_name": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str",
                    "FORMAT",
                    "self.FORMAT"
                ]
            }
        }
    },
    "flake8.formatting.base": {
        "BaseFormatter": {
            "after_init": {
                "return": []
            },
            "__init__": {
                "options": [
                    "color",
                    "options",
                    "Values",
                    "argparse.Namespace",
                    "OptionParser",
                    "options.color"
                ],
                "return": [
                    "None"
                ]
            },
            "_write": {
                "return": [],
                "output": []
            },
            "beginning": {
                "filename": [
                    "filename",
                    "Path",
                    "pathlib",
                    "str",
                    "None",
                    "Any"
                ],
                "return": []
            },
            "finished": {
                "return": [],
                "filename": [
                    "filename",
                    "Path",
                    "None",
                    "pathlib",
                    "str"
                ]
            },
            "format": {
                "return": [
                    "None",
                    "execute",
                    "str"
                ],
                "error": [
                    "Exception",
                    "error"
                ]
            },
            "handle": {
                "return": [],
                "error": []
            },
            "show_statistics": {
                "return": [
                    "None"
                ],
                "statistics": [
                    "Statistics",
                    "ALNS",
                    "statistics",
                    "iterate"
                ]
            },
            "show_source": {
                "return": [
                    "str",
                    "indent"
                ],
                "error": [
                    "Validator",
                    "error",
                    "None"
                ]
            },
            "show_benchmarks": {
                "return": [
                    "None"
                ],
                "benchmarks": [
                    "benchmarks",
                    "Any",
                    "Iterable[Tuple]",
                    "value",
                    "List[Tuple]",
                    "statistic",
                    "ItemsView[str, Any]"
                ]
            },
            "start": {
                "return": []
            },
            "stop": {
                "return": [
                    "None"
                ]
            },
            "write": {
                "source": [
                    "source"
                ],
                "return": [
                    "None"
                ],
                "line": [
                    "write",
                    "line",
                    "str",
                    "source",
                    "None"
                ]
            }
        }
    },
    "flake8.formatting._windows_color": {
        "global": {
            "_enable": {
                "return": []
            }
        }
    },
    "flake8.formatting.default": {
        "Default": {
            "after_init": {
                "return": []
            }
        },
        "FilenameOnly": {
            "format": {
                "return": [
                    "None",
                    "format",
                    "Optional[Any]",
                    "Optional[T]",
                    "Optional[Unknown]",
                    "str"
                ],
                "error": [
                    "Error",
                    "filename",
                    "error",
                    "error.filename"
                ]
            },
            "after_init": {
                "return": []
            },
            "show_source": {
                "error": [],
                "return": []
            }
        },
        "SimpleFormatter": {
            "format": {
                "return": [
                    "str",
                    "COLORS",
                    "format",
                    "error.text",
                    "color",
                    "col",
                    "None"
                ],
                "error": [
                    "Violation",
                    "error",
                    "Error",
                    "error.text",
                    "filename",
                    "error.filename",
                    "Report",
                    "error.code"
                ]
            },
            "global": {
                "error_format": [
                    "SimpleFormatter",
                    "str",
                    "Pylint",
                    "FilenameOnly",
                    "format",
                    "Default"
                ]
            }
        },
        "Nothing": {
            "format": {
                "return": [
                    "None",
                    "execute",
                    "str",
                    "format",
                    "True",
                    "error",
                    "pass",
                    "False"
                ],
                "error": [
                    "Exception",
                    "error",
                    "pass",
                    "Any"
                ]
            },
            "show_source": {
                "error": [
                    "error",
                    "None",
                    "DependencyError",
                    "NotAllowedDependencyException"
                ],
                "return": [
                    "None"
                ]
            }
        }
    },
    "flake8.main.application": {
        "Application": {
            "__init__": {
                "return": []
            },
            "_run": {
                "return": [
                    "None",
                    "pass"
                ],
                "argv": [
                    "argv",
                    "tuple",
                    "None",
                    "initialize",
                    "List[str]",
                    "list[str]",
                    "sys.argv"
                ]
            },
            "initialize": {
                "return": [
                    "initialize",
                    "None"
                ],
                "argv": [
                    "List[str]",
                    "argv",
                    "sys.argv",
                    "None",
                    "List"
                ]
            },
            "exit_code": {
                "return": [
                    "int"
                ]
            },
            "make_guide": {
                "return": []
            },
            "make_file_checker_manager": {
                "return": [
                    "None",
                    "pass"
                ],
                "argv": [
                    "argv",
                    "List[str]",
                    "Manager",
                    "sys.argv"
                ]
            },
            "make_formatter": {
                "return": [
                    "None",
                    "Formatter",
                    "pass"
                ]
            },
            "report_benchmarks": {
                "return": [
                    "None"
                ]
            },
            "report": {
                "return": [
                    "None",
                    "report"
                ]
            },
            "report_errors": {
                "return": []
            },
            "run": {
                "return": [
                    "None"
                ],
                "argv": []
            },
            "report_statistics": {
                "return": [
                    "None",
                    "self.options.statistics"
                ]
            },
            "run_checks": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "flake8.main.cli": {
        "global": {
            "main": {
                "argv": [],
                "return": []
            }
        }
    },
    "flake8.main.debug": {
        "global": {
            "information": {
                "return": [
                    "version",
                    "dict",
                    "Dict",
                    "platform",
                    "List[dict]"
                ],
                "plugins": [
                    "plugins",
                    "PluginManager",
                    "version",
                    "plugin",
                    "PluginDownload"
                ],
                "version": []
            }
        }
    },
    "flake8.main.options": {
        "JobsArgument": {
            "__init__": {
                "return": [
                    "None"
                ],
                "arg": [
                    "str",
                    "arg"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str",
                    "self.name"
                ]
            }
        },
        "global": {
            "register_default_options": {
                "return": [],
                "option_manager": [
                    "ArgumentParser",
                    "OptionParser",
                    "argparse",
                    "ArgumentManager",
                    "OptionManager",
                    "help",
                    "ConfigManager",
                    "argparse.ArgumentParser",
                    "optparse.OptionParser",
                    "optparse",
                    "click.Option"
                ]
            },
            "stage1_arg_parser": {
                "return": [
                    "ArgumentParser",
                    "parser",
                    "argparse.ArgumentParser",
                    "None"
                ]
            }
        }
    },
    "flake8.options.aggregator": {
        "global": {
            "aggregate_options": {
                "cfg": [
                    "cfg",
                    "Config",
                    "configparser.ConfigParser",
                    "ConfigParser",
                    "dict"
                ],
                "cfg_dir": [
                    "str",
                    "os.PathLike",
                    "cfg"
                ],
                "argv": [],
                "manager": [],
                "return": []
            }
        }
    },
    "flake8.options.config": {
        "global": {
            "_find_config_file": {
                "path": [
                    "PathLike",
                    "path",
                    "str",
                    "pathlib.Path",
                    "os.path"
                ],
                "return": []
            },
            "load_config": {
                "config": [
                    "None",
                    "str",
                    "config",
                    "Optional[str]",
                    "isolated",
                    "typing",
                    "Union",
                    "Union[str]",
                    "Union[str, None]"
                ],
                "isolated": [
                    "False",
                    "bool",
                    "isolated"
                ],
                "extra": [],
                "return": []
            },
            "_stat_key": {
                "return": [
                    "Tuple[int, int]",
                    "tuple[int, int]",
                    "st",
                    "Tuple",
                    "tuple"
                ],
                "s": [
                    "s",
                    "str",
                    "PathLike"
                ]
            },
            "parse_config": {
                "return": [],
                "option_manager": [
                    "None",
                    "Any",
                    "OptionManager",
                    "pass",
                    "object",
                    "Option",
                    "cfg"
                ],
                "cfg_dir": [],
                "cfg": []
            }
        }
    },
    "flake8.options.manager": {
        "Option": {
            "__init__": {
                "return": [],
                "comma_separated_list": [
                    "bool",
                    "False"
                ],
                "choices": [],
                "default": [
                    "default",
                    "self.default",
                    "argparse",
                    "str",
                    "bool"
                ],
                "dest": [
                    "dest",
                    "str",
                    "argparse",
                    "None"
                ],
                "const": [
                    "const",
                    "self.const",
                    "Any",
                    "None",
                    "argparse",
                    "str",
                    "bool"
                ],
                "help": [
                    "str",
                    "help",
                    "self.help",
                    "None"
                ],
                "nargs": [
                    "nargs",
                    "None",
                    "argparse",
                    "Optional[str]",
                    "int"
                ],
                "long_option_name": [],
                "action": [],
                "metavar": [],
                "normalize_paths": [],
                "short_option_name": [
                    "str",
                    "None",
                    "Union"
                ],
                "type": [
                    "type",
                    "functools.partial",
                    "self.type",
                    "int",
                    "argparse"
                ],
                "required": [],
                "parse_from_config": []
            },
            "__repr__": {
                "return": [
                    "str",
                    "parts"
                ]
            },
            "normalize": {
                "return": [
                    "value",
                    "normalize",
                    "dict",
                    "None",
                    "str"
                ],
                "normalize_args": [
                    "tuple",
                    "Tuple[Any, ...]",
                    "None",
                    "Any",
                    "value"
                ],
                "value": [
                    "list",
                    "value",
                    "str",
                    "utils",
                    "Union[str, List]"
                ]
            },
            "to_argparse": {
                "return": [
                    "tuple",
                    "tuple[Any, Any]",
                    "Tuple[Any, Any]",
                    "dict",
                    "tuple[list[str], dict]"
                ]
            }
        },
        "OptionManager": {
            "__init__": {
                "formatter_names": [
                    "tuple",
                    "set",
                    "Tuple[str, ...]",
                    "Sequence[str]"
                ],
                "parents": [
                    "ArgumentParser",
                    "parents",
                    "List[ArgumentParser]",
                    "List[argparse.ArgumentParser]",
                    "argparse.ArgumentParser",
                    "argparse",
                    "List"
                ],
                "version": [
                    "version",
                    "str"
                ],
                "return": [
                    "None",
                    "candidates"
                ],
                "plugin_versions": []
            },
            "add_option": {
                "args": [
                    "args",
                    "Option",
                    "tuple",
                    "None",
                    "OptionManager"
                ],
                "return": [],
                "kwargs": [
                    "dict",
                    "kwargs",
                    "Option"
                ]
            },
            "extend_default_select": {
                "error_codes": [
                    "Iterable[Any]",
                    "Iterable",
                    "list",
                    "ErrorCode"
                ],
                "return": []
            },
            "parse_args": {
                "args": [
                    "args",
                    "optparse",
                    "List[str]",
                    "None",
                    "list",
                    "argparse"
                ],
                "return": [],
                "values": []
            },
            "extend_default_ignore": {
                "return": [],
                "error_codes": [
                    "ErrorCode",
                    "extend",
                    "List[ErrorCode]",
                    "Set[ErrorCode]",
                    "list",
                    "List[int]",
                    "set",
                    "Set[str]"
                ]
            },
            "register_plugins": {
                "return": [],
                "plugins": []
            }
        },
        "global": {
            "_flake8_normalize": {
                "return": [
                    "ret",
                    "Any"
                ],
                "normalize_paths": [
                    "bool",
                    "False"
                ],
                "args": [
                    "args",
                    "tuple",
                    "Tuple[Any, ...]",
                    "value",
                    "Tuple"
                ],
                "comma_separated_list": [
                    "False",
                    "bool"
                ],
                "value": [
                    "value",
                    "str",
                    "ret"
                ]
            }
        }
    },
    "flake8.options.parse_args": {
        "global": {
            "parse_args": {
                "return": [
                    "opts",
                    "Tuple[List, Namespace]",
                    "Tuple[Any, Any]",
                    "tuple"
                ],
                "argv": []
            }
        }
    },
    "flake8.plugins.finder": {
        "global": {
            "_check_required_plugins": {
                "expected": [
                    "expected",
                    "name",
                    "Set[str]",
                    "List[str]"
                ],
                "return": [],
                "plugins": [
                    "package",
                    "plugins",
                    "Plugin",
                    "plugin.package",
                    "PageTypePlugin",
                    "Iterable[Any]",
                    "Set"
                ]
            },
            "_classify_plugins": {
                "opts": [
                    "opts",
                    "BaseConfigurator",
                    "Command",
                    "BaseAdminView",
                    "Options"
                ],
                "plugins": [],
                "return": [
                    "disabled",
                    "Plugins",
                    "tree",
                    "reporters"
                ]
            },
            "_find_importlib_plugins": {
                "return": [
                    "Plugin",
                    "Generator[Plugin, None, None]",
                    "Generator",
                    "None",
                    "Iterator[Plugin]",
                    "yield"
                ]
            },
            "_find_local_plugins": {
                "cfg": [
                    "cfg",
                    "None",
                    "Any",
                    "cfgpath"
                ],
                "return": [
                    "Plugin",
                    "Generator",
                    "Generator[Plugin, None, None]",
                    "Iterator[Plugin]",
                    "None",
                    "Generator[Plugin]",
                    "LocalPlugins"
                ]
            },
            "_flake8_plugins": {
                "eps": [
                    "eps",
                    "None",
                    "iterable",
                    "for",
                    "list",
                    "Tuple"
                ],
                "return": [],
                "version": [
                    "version",
                    "str",
                    "ep",
                    "ep.name",
                    "name",
                    "Plugin",
                    "float"
                ],
                "name": []
            },
            "_import_plugins": {
                "return": [],
                "plugins": [
                    "List",
                    "plugins",
                    "Iterable[Any]",
                    "List[Any]",
                    "Iterable",
                    "None"
                ],
                "opts": []
            },
            "_load_plugin": {
                "return": [
                    "LoadedPlugin",
                    "obj"
                ],
                "plugin": []
            },
            "_parameters_for": {
                "return": [
                    "parameters",
                    "None"
                ],
                "func": [
                    "func",
                    "Callable",
                    "Type",
                    "Union[Callable, Type]",
                    "typing",
                    "type",
                    "True"
                ]
            },
            "_parse_option": {
                "cfg": [],
                "cfg_opt_name": [
                    "cfg",
                    "str",
                    "pass"
                ],
                "return": [],
                "opt": []
            },
            "find_plugins": {
                "cfg": [
                    "cfg",
                    "PluginConfig",
                    "None",
                    "opts"
                ],
                "opts": [],
                "return": []
            },
            "load_plugins": {
                "plugins": [
                    "plugins",
                    "List",
                    "list",
                    "CoveragePlugin"
                ],
                "opts": [],
                "return": []
            },
            "parse_plugin_options": {
                "return": [
                    "PluginOptions"
                ],
                "require_plugins": [
                    "frozenset",
                    "set",
                    "tuple",
                    "PluginOptions",
                    "None",
                    "List[str]"
                ],
                "cfg": [
                    "cfg",
                    "ConfigParser",
                    "Dict",
                    "MergedConfigParser",
                    "Config",
                    "dict"
                ],
                "cfg_dir": [
                    "str",
                    "Path",
                    "PathLike"
                ],
                "enable_extensions": [
                    "frozenset",
                    "PluginOptions",
                    "Set",
                    "Iterable",
                    "Tuple"
                ]
            }
        },
        "Plugins": {
            "all_plugins": {
                "return": [
                    "Generator",
                    "self.checkers.tree",
                    "yield",
                    "T",
                    "Generator[Any, None, None]",
                    "Generator[YieldType, SendType, ReturnType]",
                    "Iterator"
                ]
            },
            "global": {
                "disabled": [
                    "list[LoadedPlugin]",
                    "disabled",
                    "LoadedPlugin",
                    "Plugins"
                ],
                "reporters": [],
                "checkers": [
                    "Checkers",
                    "NamedTuple",
                    "LoadedPlugin",
                    "tree",
                    "checkers"
                ]
            },
            "versions_str": {
                "return": [
                    "str"
                ]
            }
        },
        "PluginOptions": {
            "blank": {
                "return": [
                    "cls",
                    "blank"
                ]
            },
            "global": {
                "require_plugins": [
                    "frozenset[str]",
                    "frozenset",
                    "PluginOptions"
                ],
                "local_plugin_paths": [],
                "enable_extensions": []
            }
        },
        "LoadedPlugin": {
            "global": {
                "parameters": [
                    "parameters",
                    "dict[str, bool]"
                ],
                "plugin": [],
                "obj": []
            }
        },
        "Checkers": {
            "global": {
                "physical_line": [],
                "tree": [],
                "logical_line": []
            }
        },
        "Plugin": {
            "global": {
                "version": [
                    "str",
                    "version",
                    "Plugin"
                ],
                "package": [
                    "str",
                    "Plugin",
                    "NamedTuple"
                ],
                "entry_point": []
            }
        }
    },
    "flake8.plugins.pycodestyle": {
        "global": {
            "pycodestyle_logical": {
                "blank_before": [
                    "None",
                    "bool",
                    "int"
                ],
                "checker_state": [
                    "None"
                ],
                "hang_closing": [
                    "bool"
                ],
                "blank_lines": [
                    "int",
                    "None",
                    "float"
                ],
                "indent_level": [
                    "int"
                ],
                "line_number": [
                    "int",
                    "None"
                ],
                "indent_char": [],
                "max_doc_length": [
                    "int"
                ],
                "previous_indent_level": [],
                "lines": [
                    "lines",
                    "List[str]",
                    "Sequence[str]",
                    "Tuple[str, ...]"
                ],
                "noqa": [],
                "previous_logical": [],
                "tokens": [
                    "tokens",
                    "tokenize",
                    "List[Token]",
                    "line",
                    "tokenize.TokenInfo",
                    "TokenInfo"
                ],
                "verbose": [
                    "bool",
                    "verbose",
                    "False",
                    "None"
                ],
                "return": [],
                "previous_unindented_logical_line": [
                    "str"
                ],
                "indent_size": [],
                "logical_line": []
            },
            "pycodestyle_physical": {
                "lines": [
                    "lines",
                    "List[str]",
                    "list[str]",
                    "list"
                ],
                "noqa": [
                    "noqa",
                    "bool",
                    "False"
                ],
                "line_number": [
                    "int"
                ],
                "physical_line": [],
                "total_lines": [
                    "int",
                    "lines"
                ],
                "max_line_length": [
                    "sys.maxsize",
                    "int",
                    "None"
                ],
                "multiline": [
                    "multiline",
                    "bool"
                ],
                "indent_char": [],
                "return": []
            }
        }
    },
    "flake8.plugins.pyflakes": {
        "FlakesChecker": {
            "add_options": {
                "return": [],
                "parser": []
            },
            "__init__": {
                "tree": [
                    "tree"
                ],
                "return": [
                    "None"
                ],
                "filename": []
            },
            "parse_options": {
                "return": [
                    "None",
                    "options"
                ],
                "options": [
                    "options",
                    "doctests",
                    "argparse.Namespace",
                    "argparse",
                    "builtins",
                    "options.doctests"
                ]
            },
            "run": {
                "return": [
                    "col",
                    "Tuple[int, int, str, Type]",
                    "str"
                ]
            }
        }
    },
    "flake8.plugins.reporter": {
        "global": {
            "make": {
                "return": [
                    "obj",
                    "make",
                    "None"
                ],
                "reporters": [],
                "options": [
                    "quiet",
                    "options.quiet",
                    "options",
                    "Dict"
                ]
            }
        }
    },
    "flake8.processor": {
        "FileProcessor": {
            "__init__": {
                "return": [],
                "filename": [
                    "filename",
                    "None",
                    "self.filename",
                    "str"
                ],
                "lines": [],
                "options": []
            },
            "_noqa_line_range": {
                "min_line": [
                    "int"
                ],
                "max_line": [
                    "int",
                    "None"
                ],
                "return": [
                    "dict",
                    "joined"
                ]
            },
            "build_logical_line_tokens": {
                "return": [
                    "mapping",
                    "Tuple",
                    "None",
                    "tuple"
                ]
            },
            "build_logical_line": {
                "return": [
                    "Tuple",
                    "Tuple[str, str, List]"
                ]
            },
            "delete_first_token": {
                "return": []
            },
            "generate_tokens": {
                "return": [
                    "TokenInfo",
                    "tokenize.TokenInfo",
                    "Generator",
                    "Iterator"
                ]
            },
            "fstring_start": {
                "lineno": [
                    "int",
                    "lineno"
                ],
                "return": [
                    "None"
                ]
            },
            "build_ast": {
                "return": []
            },
            "keyword_arguments_for": {
                "return": [
                    "ret",
                    "compile",
                    "arguments",
                    "List[str]",
                    "Dict"
                ],
                "parameters": [],
                "arguments": [
                    "Dict",
                    "arguments",
                    "in",
                    "dict",
                    "Mapping",
                    "Set"
                ]
            },
            "multiline_string": {
                "return": [
                    "Generator[str, None, None]",
                    "typing",
                    "yield",
                    "Generator",
                    "self.lines",
                    "Iterator[str]"
                ],
                "token": [
                    "token",
                    "Token",
                    "end"
                ]
            },
            "noqa_line_for": {
                "line_number": [],
                "return": []
            },
            "should_ignore_file": {
                "return": []
            },
            "read_lines_from_filename": {
                "return": [
                    "List[str]",
                    "List",
                    "open"
                ]
            },
            "read_lines": {
                "return": [
                    "lines",
                    "Iterator",
                    "List",
                    "Iterator[str]",
                    "parse",
                    "List[str]",
                    "None"
                ]
            },
            "reset_blank_before": {
                "return": [
                    "None",
                    "True",
                    "int",
                    "False",
                    "bool"
                ]
            },
            "tstring_start": {
                "return": [
                    "None"
                ],
                "lineno": []
            },
            "strip_utf_bom": {
                "return": [
                    "None",
                    "self.lines"
                ]
            },
            "next_line": {
                "return": [
                    "str",
                    "line",
                    "None"
                ]
            },
            "visited_new_blank_line": {
                "return": [
                    "None"
                ]
            },
            "update_checker_state_for": {
                "return": [
                    "None"
                ],
                "plugin": [
                    "Plugin",
                    "plugin.parameters",
                    "parameters",
                    "plugin"
                ]
            },
            "update_state": {
                "return": [],
                "mapping": []
            },
            "read_lines_from_stdin": {
                "return": []
            },
            "next_logical_line": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "count_parentheses": {
                "token_text": [
                    "str",
                    "in"
                ],
                "current_parentheses_count": [],
                "return": []
            },
            "expand_indent": {
                "return": [
                    "int",
                    "bool"
                ],
                "line": []
            },
            "is_eol_token": {
                "return": [
                    "NEWLINE",
                    "bool",
                    "False",
                    "in",
                    "or"
                ],
                "token": []
            },
            "is_multiline_string": {
                "return": [
                    "False",
                    "token.type"
                ],
                "token": [
                    "tokenize",
                    "TokenInfo",
                    "string",
                    "line",
                    "token",
                    "tokenize.TokenInfo",
                    "token.string",
                    "tokenize.STRING"
                ]
            },
            "token_is_newline": {
                "return": [
                    "bool",
                    "NEWLINE",
                    "None",
                    "False",
                    "in"
                ],
                "token": [
                    "token",
                    "NEWLINE",
                    "list",
                    "Tuple",
                    "List",
                    "tuple",
                    "Tuple[str, ...]",
                    "Token",
                    "sequence"
                ]
            },
            "mutate_string": {
                "text": [
                    "text",
                    "str",
                    "index"
                ],
                "return": [
                    "text",
                    "str",
                    "end"
                ]
            }
        }
    },
    "flake8.statistics": {
        "Statistic": {
            "__init__": {
                "return": [],
                "message": [],
                "error_code": [],
                "count": [
                    "int",
                    "count",
                    "float"
                ],
                "filename": [
                    "filename",
                    "None",
                    "str",
                    "self.filename"
                ]
            },
            "create_from": {
                "return": [
                    "cls",
                    "count",
                    "text",
                    "error",
                    "message",
                    "error.code"
                ],
                "error": []
            },
            "increment": {
                "return": []
            }
        },
        "Statistics": {
            "error_codes": {
                "return": [
                    "list",
                    "key.code",
                    "ErrorCode"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "statistics_for": {
                "filename": [
                    "filename",
                    "None",
                    "str"
                ],
                "prefix": [
                    "prefix",
                    "matches",
                    "key",
                    "filename"
                ],
                "return": [
                    "yield",
                    "typing",
                    "generator",
                    "Iterator[T]",
                    "Generator[T, None, None]",
                    "Generator[Any, None, None]",
                    "YieldType",
                    "Generator[YieldType, SendType, ReturnType]",
                    "Iterator[UnknownType]",
                    "Generator[Unknown, None, None]",
                    "Iterator",
                    "Any",
                    "None"
                ]
            },
            "record": {
                "return": [],
                "error": [
                    "Error",
                    "Key",
                    "Statistic",
                    "error"
                ]
            }
        },
        "Key": {
            "global": {
                "code": [
                    "error.code",
                    "str",
                    "code",
                    "Statistic",
                    "Key"
                ],
                "filename": []
            },
            "create_from": {
                "return": [],
                "error": []
            },
            "matches": {
                "filename": [
                    "filename",
                    "str",
                    "None",
                    "self.filename"
                ],
                "return": [
                    "bool",
                    "None"
                ],
                "prefix": []
            }
        }
    },
    "flake8.style_guide": {
        "DecisionEngine": {
            "__init__": {
                "return": [],
                "options": []
            },
            "decision_for": {
                "code": [
                    "code",
                    "str",
                    "int",
                    "self.cache",
                    "self.cache[code]",
                    "LOG.debug"
                ],
                "return": []
            },
            "make_decision": {
                "code": [],
                "return": []
            },
            "was_selected": {
                "code": [
                    "str",
                    "code"
                ],
                "return": []
            },
            "was_ignored": {
                "code": [],
                "return": []
            }
        },
        "StyleGuide": {
            "__repr__": {
                "return": []
            },
            "__init__": {
                "stats": [
                    "stats",
                    "None"
                ],
                "filename": [
                    "filename",
                    "str",
                    "None",
                    "self.filename"
                ],
                "formatter": [],
                "decider": [
                    "None",
                    "DecisionComponent",
                    "DecisionEngine",
                    "decider",
                    "TestDecisionComponent"
                ],
                "options": []
            },
            "applies_to": {
                "filename": [],
                "return": []
            },
            "handle_error": {
                "code": [],
                "physical_line": [],
                "filename": [
                    "str"
                ],
                "column_number": [],
                "text": [
                    "Violation",
                    "text"
                ],
                "return": [
                    "int"
                ],
                "line_number": [
                    "int",
                    "Violation"
                ]
            },
            "copy": {
                "filename": [
                    "Optional[str]",
                    "self.filename",
                    "or",
                    "str",
                    "None",
                    "copy",
                    "StyleGuide",
                    "PathLike",
                    "Optional[PathLike]",
                    "Path",
                    "typing",
                    "decode"
                ],
                "extend_ignore_with": [],
                "return": []
            },
            "processing_file": {
                "return": [
                    "ContextManager",
                    "contextlib",
                    "AbstractContextManager",
                    "contextlib.ContextManager"
                ],
                "filename": []
            },
            "should_report_error": {
                "code": [
                    "decider",
                    "code"
                ],
                "return": []
            }
        },
        "StyleGuideManager": {
            "__init__": {
                "return": [
                    "None"
                ],
                "decider": [
                    "DecisionComponent",
                    "None",
                    "DecisionEngine",
                    "decider",
                    "Optional[DecisionComponent]"
                ],
                "formatter": [
                    "Formatter",
                    "logging",
                    "StyleGuide",
                    "formatter"
                ],
                "options": []
            },
            "_style_guide_for": {
                "filename": [],
                "return": [
                    "g.filename",
                    "filename",
                    "g",
                    "StyleGuide"
                ]
            },
            "handle_error": {
                "column_number": [],
                "physical_line": [],
                "return": [
                    "None",
                    "guide"
                ],
                "code": [
                    "code",
                    "str"
                ],
                "filename": [
                    "filename",
                    "str"
                ],
                "line_number": [
                    "int",
                    "text"
                ],
                "text": [
                    "str",
                    "text",
                    "UserString",
                    "None",
                    "Text"
                ]
            },
            "populate_style_guides_with": {
                "options": [],
                "return": []
            },
            "processing_file": {
                "filename": [
                    "str",
                    "Path",
                    "filename",
                    "pathlib",
                    "PathLike"
                ],
                "return": [
                    "guide",
                    "ContextManager"
                ]
            }
        },
        "global": {
            "_select_ignore": {
                "return": [],
                "option": [],
                "default": [
                    "list",
                    "default",
                    "tuple",
                    "None"
                ],
                "extend": [],
                "extended_default": [
                    "list",
                    "ret",
                    "default",
                    "extend"
                ]
            },
            "_explicitly_chosen": {
                "option": [
                    "option",
                    "List",
                    "Optional[List]",
                    "Tuple",
                    "list",
                    "None",
                    "or"
                ],
                "extend": [],
                "return": [
                    "tuple",
                    "ret",
                    "extend"
                ]
            }
        }
    },
    "flake8.utils": {
        "global": {
            "_tokenize_files_to_codes_mapping": {
                "value": [],
                "return": []
            },
            "fnmatch": {
                "filename": [
                    "str",
                    "filename",
                    "fnmatch.fnmatch"
                ],
                "patterns": [
                    "List",
                    "patterns",
                    "List[str]",
                    "Iterable[str]",
                    "Optional",
                    "Sequence",
                    "filename",
                    "fnmatch"
                ],
                "return": []
            },
            "get_python_version": {
                "return": []
            },
            "is_using_stdin": {
                "return": [
                    "False",
                    "bool",
                    "Set",
                    "set",
                    "str",
                    "stdin"
                ],
                "paths": [
                    "paths",
                    "str",
                    "Set[str]",
                    "in",
                    "Iterable[str]",
                    "List[str]",
                    "Tuple[str, ...]",
                    "list",
                    "Tuple",
                    "set"
                ]
            },
            "matches_filename": {
                "log_message": [
                    "str"
                ],
                "logger": [],
                "path": [
                    "str",
                    "os.path",
                    "path",
                    "os.PathLike",
                    "pathlib.Path"
                ],
                "return": [],
                "patterns": [
                    "str",
                    "patterns",
                    "fnmatch",
                    "List[str]",
                    "Iterable[str]"
                ]
            },
            "normalize_path": {
                "return": [
                    "path",
                    "str",
                    "separator",
                    "rstrip",
                    "pathlib",
                    "os.curdir"
                ],
                "parent": [],
                "path": []
            },
            "normalize_paths": {
                "parent": [
                    "os.curdir",
                    "parent",
                    "str",
                    "os.path"
                ],
                "return": [
                    "List[str]",
                    "List",
                    "paths",
                    "List[Any]",
                    "list",
                    "List[Path]"
                ],
                "paths": []
            },
            "normalize_pypi_name": {
                "return": [],
                "s": []
            },
            "parse_comma_separated_list": {
                "return": [
                    "list",
                    "str",
                    "List",
                    "List[str]"
                ],
                "value": [
                    "value",
                    "str"
                ],
                "regexp": []
            },
            "parse_files_to_codes_mapping": {
                "return": [],
                "value_": []
            },
            "stdin_get_lines": {
                "return": []
            },
            "stdin_get_value": {
                "return": []
            }
        },
        "_Token": {
            "global": {
                "tp": [
                    "str",
                    "tp"
                ],
                "src": [
                    "str",
                    "src"
                ]
            }
        }
    },
    "flake8.violation": {
        "Violation": {
            "global": {
                "column_number": [
                    "int",
                    "Violation",
                    "NamedTuple"
                ],
                "line_number": [
                    "NamedTuple",
                    "int",
                    "Violation"
                ],
                "filename": [],
                "code": [],
                "physical_line": [],
                "text": []
            },
            "is_inline_ignored": {
                "return": [
                    "False",
                    "self.code",
                    "bool"
                ],
                "disable_noqa": []
            }
        },
        "global": {
            "_find_noqa": {
                "return": [
                    "None",
                    "Union[re.Match, None]",
                    "re.Match",
                    "Match",
                    "search",
                    "re",
                    "Optional[Match]"
                ],
                "physical_line": [
                    "str",
                    "re.Pattern",
                    "search"
                ]
            }
        }
    }
}