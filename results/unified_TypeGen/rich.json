{
    "rich": {
        "global": {
            "inspect": {
                "dunder": [
                    "bool"
                ],
                "obj": [],
                "help": [
                    "bool"
                ],
                "all": [
                    "bool"
                ],
                "value": [
                    "bool"
                ],
                "title": [
                    "typing.Optional[str]"
                ],
                "sort": [
                    "bool"
                ],
                "docs": [],
                "return": [
                    "Inspect",
                    "Any"
                ],
                "methods": [
                    "bool"
                ],
                "private": [
                    "bool"
                ],
                "console": [
                    "Optional[Console]",
                    "rich.console.Console"
                ]
            },
            "get_console": {
                "return": [
                    "typing.Any",
                    "Console",
                    "logging.StreamHandler",
                    "logging.Handler"
                ]
            },
            "print": {
                "end": [],
                "sep": [
                    "str"
                ],
                "objects": [
                    "tuple",
                    "Tuple[Any, ...]",
                    "Any"
                ],
                "return": [
                    "None"
                ],
                "flush": [
                    "bool"
                ],
                "file": [
                    "Optional[TextIO]"
                ]
            },
            "print_json": {
                "check_circular": [],
                "default": [
                    "typing.Optional[typing.Callable]",
                    "typing.Any",
                    "typing.Union[typing.Callable, None]"
                ],
                "ensure_ascii": [
                    "bool"
                ],
                "data": [
                    "typing.Any",
                    "data",
                    "None",
                    "typing.Optional[typing.Any]",
                    "typing.Union[str, dict, list, None]",
                    "json"
                ],
                "highlight": [
                    "bool"
                ],
                "indent": [
                    "int"
                ],
                "json": [
                    "typing.Optional[Json]",
                    "json"
                ],
                "return": [
                    "None"
                ],
                "skip_keys": [],
                "sort_keys": [],
                "allow_nan": [
                    "bool"
                ]
            },
            "global": {
                "_console": [
                    "None"
                ]
            },
            "reconfigure": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [],
                "return": []
            }
        }
    },
    "rich.__main__": {
        "ColorBox": {
            "__rich_console__": {
                "return": [
                    "typing.Generator[Segment, None, None]",
                    "typing.Iterator[Segment]"
                ],
                "options": [
                    "typing.Any"
                ],
                "console": []
            },
            "__rich_measure__": {
                "console": [
                    "rich.console.Console",
                    "Console",
                    "typing.Any",
                    "console",
                    "object",
                    "rich"
                ],
                "options": [
                    "object",
                    "Options"
                ],
                "return": [
                    "Measurement"
                ]
            }
        },
        "global": {
            "make_test_card": {
                "return": [
                    "Table",
                    "Any"
                ]
            }
        }
    },
    "rich._emoji_replace": {
        "global": {
            "_emoji_replace": {
                "text": [
                    "str"
                ],
                "_emoji_sub": [],
                "default_variant": [],
                "return": []
            }
        }
    },
    "rich._extension": {
        "global": {
            "load_ipython_extension": {
                "ip": [
                    "IPython.core.interactiveshell.InteractiveShell",
                    "IPython.InteractiveShell",
                    "IPython"
                ],
                "return": []
            }
        }
    },
    "rich._fileno": {
        "global": {
            "get_fileno": {
                "file_like": [],
                "return": [
                    "Optional[int]"
                ]
            }
        }
    },
    "rich._inspect": {
        "Inspect": {
            "__init__": {
                "all": [],
                "help": [],
                "dunder": [
                    "bool"
                ],
                "methods": [
                    "bool"
                ],
                "title": [],
                "docs": [],
                "value": [
                    "bool"
                ],
                "obj": [
                    "typing.Any"
                ],
                "private": [
                    "bool"
                ],
                "sort": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            },
            "__rich__": {
                "return": [
                    "Panel"
                ]
            },
            "_get_signature": {
                "name": [
                    "str",
                    "typing.Optional[str]"
                ],
                "return": [
                    "None",
                    "Text",
                    "str",
                    "Optional[Text]"
                ],
                "obj": []
            },
            "_get_formatted_doc": {
                "object_": [],
                "return": []
            },
            "_make_title": {
                "obj": [
                    "typing.Any"
                ],
                "return": []
            },
            "_render": {
                "return": [
                    "typing.Iterator[typing.Union[str, Panel, Text]]",
                    "typing.Generator[typing.Union[str, Panel, Text], None, None]"
                ]
            }
        },
        "global": {
            "_first_paragraph": {
                "return": [
                    "str"
                ],
                "doc": [
                    "str"
                ]
            },
            "get_object_types_mro": {
                "return": [
                    "tuple"
                ],
                "obj": [
                    "typing.Any",
                    "typing.Union[typing.Any, typing.Type]",
                    "typing.Union[typing.Type, typing.Any]"
                ]
            },
            "is_object_one_of_types": {
                "return": [
                    "bool"
                ],
                "fully_qualified_types_names": [
                    "set[str]",
                    "Set[str]",
                    "in",
                    "list[str]"
                ],
                "obj": [
                    "typing.Any"
                ]
            },
            "get_object_types_mro_as_strings": {
                "obj": [],
                "return": [
                    "list[str]"
                ]
            }
        }
    },
    "rich._log_render": {
        "LogRender": {
            "__call__": {
                "level": [],
                "line_no": [],
                "link_path": [
                    "str",
                    "Optional[str]",
                    "None"
                ],
                "console": [
                    "typing.Any",
                    "console",
                    "rich.console.Console"
                ],
                "log_time": [],
                "time_format": [
                    "str",
                    "callable",
                    "Union[str, Callable]",
                    "Optional[Union[str, Callable]]"
                ],
                "return": [],
                "path": [
                    "path",
                    "str",
                    "None",
                    "False",
                    "if",
                    "pathlib.Path",
                    "Optional[str]",
                    "True"
                ],
                "renderables": []
            },
            "__init__": {
                "level_width": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "show_level": [
                    "bool"
                ],
                "time_format": [
                    "str"
                ],
                "show_path": [
                    "bool"
                ],
                "omit_repeated_times": [],
                "show_time": []
            }
        }
    },
    "rich._loop": {
        "global": {
            "loop_first": {
                "return": [
                    "typing.Iterator[tuple[bool, typing.Any]]",
                    "typing.Iterator"
                ],
                "values": [
                    "typing.Iterable[typing.Any]",
                    "list"
                ]
            },
            "loop_last": {
                "return": [
                    "typing.Iterator[tuple[bool, typing.Any]]"
                ],
                "values": []
            },
            "loop_first_last": {
                "return": [],
                "values": []
            }
        }
    },
    "rich._null_file": {
        "NullFile": {
            "__exit__": {
                "return": [
                    "None"
                ],
                "__t": [
                    "typing.Optional[typing.Type[BaseException]]"
                ],
                "__traceback": [
                    "typing.Optional[types.TracebackType]"
                ],
                "__value": [
                    "typing.Optional[Exception]",
                    "typing.Optional[BaseException]"
                ]
            },
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self",
                    "ClassName"
                ]
            },
            "fileno": {
                "return": [
                    "int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[str]"
                ]
            },
            "__next__": {
                "return": []
            },
            "isatty": {
                "return": []
            },
            "read": {
                "__n": [
                    "int"
                ],
                "return": []
            },
            "flush": {
                "return": [
                    "None"
                ]
            },
            "readable": {
                "return": [
                    "bool"
                ]
            },
            "readline": {
                "__limit": [
                    "int"
                ],
                "return": [
                    "str"
                ]
            },
            "seek": {
                "__whence": [],
                "return": [],
                "__offset": []
            },
            "readlines": {
                "return": [],
                "__hint": [
                    "int"
                ]
            },
            "writable": {
                "return": [
                    "bool"
                ]
            },
            "truncate": {
                "__size": [
                    "int"
                ],
                "return": []
            },
            "write": {
                "return": [
                    "int"
                ],
                "text": []
            },
            "writelines": {
                "return": [
                    "None"
                ],
                "__lines": []
            },
            "seekable": {
                "return": [
                    "bool"
                ]
            },
            "tell": {
                "return": []
            },
            "close": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "rich._pick": {
        "global": {
            "pick_bool": {
                "return": [
                    "typing.Any",
                    "typing.Optional[bool]"
                ],
                "values": [
                    "typing.Iterable[bool]",
                    "bool"
                ]
            }
        }
    },
    "rich._ratio": {
        "Edge": {
            "global": {
                "minimum_size": [],
                "size": [
                    "Optional[int]",
                    "size"
                ],
                "ratio": []
            }
        },
        "E": {
            "global": {
                "minimum_size": [
                    "int"
                ],
                "size": [],
                "ratio": []
            }
        },
        "global": {
            "ratio_distribute": {
                "return": [
                    "list[typing.Any]"
                ],
                "ratios": [
                    "list[float]",
                    "list[typing.Union[int, float]]"
                ],
                "total": [
                    "int"
                ],
                "minimums": []
            },
            "ratio_reduce": {
                "return": [
                    "list[typing.Any]"
                ],
                "maximums": [
                    "typing.Iterable[typing.Union[float, int]]",
                    "typing.Iterable[typing.Union[bool, int]]",
                    "typing.Iterable[typing.Union[bool, int, float]]"
                ],
                "total": [
                    "int",
                    "float"
                ],
                "ratios": [
                    "typing.Iterable[float]"
                ],
                "values": [
                    "list[typing.Any]",
                    "Sequence[typing.Any]"
                ]
            },
            "ratio_resolve": {
                "edges": [
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "total": [
                    "float",
                    "int",
                    "total"
                ],
                "return": []
            }
        }
    },
    "rich._stack": {
        "Stack": {
            "push": {
                "return": [
                    "None"
                ],
                "item": [
                    "typing.Any"
                ]
            }
        }
    },
    "rich._timer": {
        "global": {
            "timer": {
                "subject": [],
                "return": []
            }
        }
    },
    "rich._win32_console": {
        "global": {
            "FillConsoleOutputAttribute": {
                "attributes": [],
                "return": [],
                "length": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "std_handle": [
                    "HANDLE"
                ]
            },
            "FillConsoleOutputCharacter": {
                "return": [
                    "int"
                ],
                "char": [
                    "str",
                    "char",
                    "character"
                ],
                "length": [],
                "start": [
                    "COORD",
                    "int",
                    "start",
                    "ctypes"
                ],
                "std_handle": [
                    "int"
                ]
            },
            "GetConsoleCursorInfo": {
                "std_handle": [],
                "return": [],
                "cursor_info": []
            },
            "GetConsoleMode": {
                "return": [],
                "std_handle": []
            },
            "GetConsoleScreenBufferInfo": {
                "return": [
                    "byref",
                    "ctypes.Structure"
                ],
                "std_handle": [
                    "int",
                    "HANDLE",
                    "byref",
                    "ctypes.HANDLE"
                ]
            },
            "GetStdHandle": {
                "handle": [
                    "wintypes.HANDLE"
                ],
                "return": [
                    "wintypes.HANDLE"
                ]
            },
            "SetConsoleCursorInfo": {
                "return": [
                    "bool"
                ],
                "cursor_info": [],
                "std_handle": []
            },
            "SetConsoleCursorPosition": {
                "return": [
                    "bool"
                ],
                "coords": [
                    "tuple[int, int]",
                    "tuple[typing.Union[int,int]]",
                    "typing.Any"
                ],
                "std_handle": []
            },
            "SetConsoleTextAttribute": {
                "return": [
                    "bool"
                ],
                "attributes": [],
                "std_handle": [
                    "int"
                ]
            },
            "SetConsoleTitle": {
                "return": [],
                "title": [
                    "str"
                ]
            },
            "global": {
                "windll": [
                    "Optional[ctypes.LibraryLoader]",
                    "ctypes.LibraryLoader",
                    "Union[None, ctypes.LibraryLoader]",
                    "Union[ctypes.LibraryLoader, None]"
                ]
            }
        },
        "LegacyWindowsTerm": {
            "__init__": {
                "return": [
                    "None"
                ],
                "file": [
                    "flush",
                    "TextIO",
                    "Any",
                    "file"
                ]
            },
            "erase_line": {
                "return": [
                    "None"
                ]
            },
            "_get_cursor_size": {
                "return": [
                    "int"
                ]
            },
            "erase_start_of_line": {
                "return": [
                    "None"
                ]
            },
            "move_cursor_backward": {
                "return": [
                    "None"
                ]
            },
            "move_cursor_down": {
                "return": [
                    "None"
                ]
            },
            "hide_cursor": {
                "return": [
                    "None"
                ]
            },
            "move_cursor_to": {
                "return": [
                    "None"
                ],
                "new_position": []
            },
            "move_cursor_to_column": {
                "return": [
                    "None"
                ],
                "column": []
            },
            "move_cursor_up": {
                "return": []
            },
            "show_cursor": {
                "return": [
                    "None"
                ]
            },
            "set_title": {
                "return": [],
                "title": []
            },
            "write_styled": {
                "return": [],
                "text": [
                    "str"
                ],
                "style": []
            },
            "erase_end_of_line": {
                "return": []
            },
            "write_text": {
                "text": [],
                "return": [
                    "None"
                ]
            },
            "move_cursor_forward": {
                "return": []
            }
        },
        "WindowsCoordinates": {
            "from_param": {
                "return": [
                    "COORD"
                ],
                "value": [
                    "row",
                    "Any"
                ]
            },
            "global": {
                "col": [
                    "int",
                    "col",
                    "WindowsCoordinates"
                ],
                "row": []
            }
        }
    },
    "rich._wrap": {
        "global": {
            "divide_line": {
                "fold": [
                    "bool"
                ],
                "return": [
                    "list[typing.Any]",
                    "append"
                ],
                "text": [
                    "str"
                ],
                "width": [
                    "int",
                    "width"
                ]
            },
            "words": {
                "return": [],
                "text": []
            }
        }
    },
    "rich._windows_renderer": {
        "global": {
            "legacy_windows_render": {
                "return": [],
                "buffer": [
                    "typing.Iterable[typing.Tuple[typing.Any, typing.Any, typing.Any]]",
                    "Iterable[Tuple[typing.Any, typing.Any, typing.Any]]",
                    "typing.Iterable[tuple[typing.Any, typing.Any, typing.Any]]",
                    "Iterable[Tuple[Any, Any, Any]]"
                ],
                "term": [
                    "Terminal"
                ]
            }
        }
    },
    "rich._windows": {
        "WindowsConsoleFeatures": {
            "global": {
                "vt": [
                    "bool"
                ],
                "truecolor": [
                    "bool"
                ]
            }
        },
        "global": {
            "get_windows_console_features": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "rich.abc": {
        "RichRenderable": {
            "__subclasshook__": {
                "other": [
                    "typing.Any",
                    "type"
                ],
                "return": []
            }
        }
    },
    "rich.align": {
        "Align": {
            "__init__": {
                "align": [
                    "str",
                    "align"
                ],
                "pad": [
                    "bool"
                ],
                "width": [
                    "typing.Optional[int]",
                    "typing.Optional[typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "height": [
                    "typing.Optional[int]"
                ],
                "vertical": [
                    "typing.Optional[str]",
                    "str"
                ],
                "renderable": [
                    "typing.Any",
                    "renderable"
                ],
                "style": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__rich_console__": {
                "console": [
                    "console",
                    "Console",
                    "rich",
                    "rich.console.Console",
                    "render",
                    "Formatter"
                ],
                "return": [],
                "options": []
            },
            "__rich_measure__": {
                "options": [
                    "Measurement.Options",
                    "typing.Any",
                    "rich.console.Options",
                    "rich.console.ConsoleOptions",
                    "rich.measure.MeasurementOptions",
                    "rich.measure.MeasureOptions"
                ],
                "return": [
                    "Measurement"
                ],
                "console": []
            },
            "center": {
                "pad": [],
                "return": [
                    "cls",
                    "typing.Any",
                    "Styled",
                    "Renderable",
                    "typing.Type[cls]"
                ],
                "style": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]"
                ],
                "renderable": [
                    "typing.Any"
                ],
                "vertical": [
                    "typing.Optional[typing.Any]"
                ],
                "width": [],
                "height": []
            },
            "left": {
                "height": [
                    "typing.Optional[int]"
                ],
                "pad": [],
                "style": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]"
                ],
                "return": [
                    "cls",
                    "typing.Any",
                    "ClassName",
                    "typing.Type[cls]",
                    "Self",
                    "left"
                ],
                "vertical": [
                    "typing.Optional[typing.Any]"
                ],
                "width": [
                    "typing.Optional[int]"
                ],
                "renderable": []
            },
            "right": {
                "pad": [],
                "vertical": [
                    "typing.Optional[typing.Any]"
                ],
                "width": [
                    "typing.Optional[int]"
                ],
                "renderable": [
                    "typing.Any"
                ],
                "style": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]"
                ],
                "height": [],
                "return": [
                    "cls",
                    "typing.Any",
                    "right",
                    "Self"
                ]
            }
        },
        "VerticalCenter": {
            "__init__": {
                "style": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[str]",
                    "typing.Any"
                ],
                "return": [],
                "renderable": [
                    "renderable"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "console": [
                    "rich.console.Console",
                    "Console",
                    "typing.Any"
                ],
                "options": []
            },
            "__rich_console__": {
                "console": [
                    "Console",
                    "console",
                    "RichConsole",
                    "rich",
                    "rich.console.Console"
                ],
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Iterable[typing.Any]"
                ],
                "options": []
            }
        }
    },
    "rich.ansi": {
        "AnsiDecoder": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "decode_line": {
                "return": [
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "line": [
                    "str"
                ]
            },
            "decode": {
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "Generator[str, None, None]",
                    "Generator[typing.Any, None, None]"
                ],
                "terminal_text": []
            }
        },
        "global": {
            "_ansi_tokenize": {
                "return": [],
                "ansi_text": []
            },
            "read": {
                "return": [
                    "typing.Any",
                    "str"
                ],
                "fd": [
                    "int"
                ]
            }
        },
        "_AnsiToken": {
            "global": {
                "osc": [],
                "plain": [],
                "sgr": [
                    "Optional[str]"
                ]
            }
        }
    },
    "rich.bar": {
        "Bar": {
            "__init__": {
                "bgcolor": [],
                "end": [
                    "int"
                ],
                "size": [
                    "int"
                ],
                "color": [
                    "str"
                ],
                "begin": [],
                "width": [
                    "Optional[Any]",
                    "Optional[Union[int, float]]",
                    "object",
                    "Optional[int]"
                ]
            },
            "__repr__": {
                "return": []
            },
            "__rich_console__": {
                "return": [
                    "typing.Generator[Segment, None, None]",
                    "typing.Iterator[Segment]",
                    "Segment",
                    "Generator[Segment, None, None]",
                    "rich",
                    "yield"
                ],
                "options": [
                    "ConsoleOptions",
                    "Options",
                    "object",
                    "RichConsoleOptions"
                ],
                "console": []
            },
            "__rich_measure__": {
                "options": [],
                "console": [],
                "return": []
            }
        }
    },
    "rich.box": {
        "Box": {
            "__init__": {
                "return": [],
                "ascii": [],
                "box": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "get_bottom": {
                "return": [
                    "str"
                ],
                "widths": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "get_row": {
                "return": [
                    "str"
                ],
                "edge": [
                    "bool"
                ],
                "level": [
                    "str"
                ],
                "widths": []
            },
            "get_plain_headed_box": {
                "return": [
                    "typing.Any"
                ]
            },
            "get_top": {
                "widths": [
                    "typing.Iterable[typing.Any]",
                    "typing.Any"
                ],
                "return": []
            },
            "substitute": {
                "safe": [
                    "bool"
                ],
                "options": [
                    "typing.Any"
                ],
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "global": {
                "ASCII2": [
                    "Box"
                ],
                "ASCII": [
                    "Box",
                    "rich.box.Box"
                ],
                "HEAVY_HEAD": [
                    "Box[str]",
                    "Box"
                ],
                "DOUBLE": [
                    "Box"
                ],
                "DOUBLE_EDGE": [],
                "MINIMAL": [
                    "Box",
                    "Box[str]",
                    "Container",
                    "BoxDrawingType",
                    "BoxType"
                ],
                "MINIMAL_DOUBLE_HEAD": [
                    "Box"
                ],
                "MINIMAL_HEAVY_HEAD": [
                    "Box",
                    "BorderStyle"
                ],
                "SIMPLE_HEAVY": [
                    "Box"
                ],
                "HEAVY_EDGE": [
                    "Box",
                    "BoxStyle",
                    "str"
                ],
                "SIMPLE": [
                    "Box"
                ],
                "HEAVY": [
                    "Box",
                    "typing.Any",
                    "box"
                ],
                "SQUARE": [],
                "SIMPLE_HEAD": [
                    "Box",
                    "str"
                ],
                "HORIZONTALS": [
                    "Box",
                    "str"
                ],
                "ROUNDED": [],
                "SQUARE_DOUBLE_HEAD": [
                    "Box",
                    "str"
                ],
                "ASCII_DOUBLE_HEAD": [
                    "Box"
                ],
                "MARKDOWN": []
            }
        }
    },
    "rich.cells": {
        "global": {
            "cell_len": {
                "text": [
                    "str"
                ],
                "_cell_len": [],
                "return": []
            },
            "chop_cells": {
                "text": [
                    "str"
                ],
                "return": [
                    "list[str]"
                ],
                "width": [
                    "int"
                ]
            },
            "get_character_cell_size": {
                "character": [],
                "return": []
            },
            "global": {
                "_SINGLE_CELL_UNICODE_RANGES": [
                    "List[Tuple[int, int]]"
                ],
                "_is_single_cell_widths": [
                    "typing.Callable[[typing.Any], bool]",
                    "typing.Callable"
                ]
            },
            "set_cell_size": {
                "text": [
                    "str"
                ],
                "total": [
                    "int"
                ],
                "return": []
            },
            "cached_cell_len": {
                "text": [
                    "str"
                ],
                "return": []
            }
        }
    },
    "rich.color": {
        "ColorSystem": {
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": []
            }
        },
        "ColorType": {
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "blend_rgb": {
                "color1": [
                    "tuple[float, float, float]",
                    "List[float]",
                    "list[float, float, float]",
                    "Tuple[float, float, float]",
                    "List[float, float, float]"
                ],
                "return": [
                    "ColorTriplet"
                ],
                "cross_fade": [
                    "float"
                ],
                "color2": [
                    "List[float]",
                    "list[float, float, float]",
                    "list"
                ]
            },
            "parse_rgb_hex": {
                "hex_color": [],
                "return": []
            }
        },
        "Color": {
            "__rich_repr__": {
                "return": [
                    "typing.Iterator[typing.Union[str, typing.Tuple[str, typing.Any, None]]]",
                    "typing.Iterator[typing.Union[str, tuple[str, typing.Any, None]]]",
                    "typing.Iterator[typing.Union[typing.Any, tuple[str, typing.Any, None]]]",
                    "typing.Generator[typing.Union[typing.Any, tuple[str, typing.Any, None], None]]"
                ]
            },
            "default": {
                "return": [
                    "cls",
                    "Color"
                ]
            },
            "__rich__": {
                "return": [
                    "Text"
                ]
            },
            "downgrade": {
                "system": [
                    "ColorSystem"
                ],
                "return": []
            },
            "from_ansi": {
                "number": [
                    "int"
                ],
                "return": [
                    "cls",
                    "Color",
                    "ClassName"
                ]
            },
            "from_rgb": {
                "blue": [],
                "green": [
                    "int",
                    "Any",
                    "float",
                    "str"
                ],
                "return": [
                    "cls",
                    "ColorTriplet"
                ],
                "red": [
                    "int",
                    "float",
                    "object",
                    "str",
                    "Any"
                ]
            },
            "get_ansi_codes": {
                "return": [
                    "Tuple[str, ...]"
                ],
                "foreground": []
            },
            "get_truecolor": {
                "foreground": [],
                "return": [],
                "theme": []
            },
            "parse": {
                "color": [
                    "str"
                ],
                "return": [
                    "Color",
                    "cls"
                ]
            },
            "from_triplet": {
                "return": [
                    "cls",
                    "Color",
                    "ColorType"
                ],
                "triplet": [
                    "object",
                    "ColorTriplet",
                    "Any"
                ]
            },
            "global": {
                "triplet": [
                    "ColorTriplet",
                    "triplet",
                    "parse",
                    "assert"
                ],
                "number": [
                    "Optional[int]",
                    "int",
                    "self.number",
                    "number",
                    "None",
                    "Color"
                ],
                "name": [
                    "str",
                    "name",
                    "color",
                    "for"
                ],
                "type": [
                    "ColorType",
                    "type",
                    "Color",
                    "IntEnum",
                    "ColorType.DEFAULT",
                    "parse",
                    "str"
                ]
            }
        }
    },
    "rich.color_triplet": {
        "ColorTriplet": {
            "global": {
                "green": [],
                "red": [
                    "int"
                ],
                "blue": []
            }
        }
    },
    "rich.columns": {
        "Columns": {
            "__init__": {
                "equal": [
                    "bool"
                ],
                "align": [],
                "right_to_left": [
                    "bool"
                ],
                "column_first": [
                    "bool"
                ],
                "title": [
                    "typing.Optional[str]"
                ],
                "expand": [
                    "bool"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "None"
                ],
                "return": [],
                "padding": [],
                "renderables": []
            },
            "__rich_console__": {
                "console": [],
                "return": [],
                "options": []
            },
            "add_renderable": {
                "return": [],
                "renderable": []
            }
        }
    },
    "rich.console": {
        "Console": {
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self",
                    "typing.Any",
                    "MyClass"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_type": [
                    "typing.Optional[typing.Type[BaseException]]"
                ],
                "exc_value": [],
                "traceback": []
            },
            "__init__": {
                "color_system": [
                    "typing.Optional[str]",
                    "str"
                ],
                "emoji_variant": [
                    "str"
                ],
                "emoji": [
                    "bool"
                ],
                "_environ": [
                    "typing.Optional[typing.Any]",
                    "dict[str, str]"
                ],
                "force_interactive": [
                    "typing.Optional[bool]"
                ],
                "get_datetime": [
                    "typing.Optional[typing.Callable[[], datetime.datetime]]",
                    "or",
                    "datetime.now"
                ],
                "get_time": [],
                "force_terminal": [],
                "highlight": [
                    "bool"
                ],
                "highlighter": [],
                "legacy_windows": [
                    "typing.Optional[bool]"
                ],
                "log_path": [
                    "bool"
                ],
                "log_time": [
                    "bool"
                ],
                "log_time_format": [
                    "str"
                ],
                "quiet": [
                    "bool"
                ],
                "markup": [
                    "bool"
                ],
                "record": [
                    "bool"
                ],
                "no_color": [],
                "stderr": [
                    "bool"
                ],
                "soft_wrap": [],
                "tab_size": [
                    "int"
                ],
                "theme": [],
                "force_jupyter": [],
                "width": [
                    "typing.Optional[int]"
                ],
                "style": [
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "typing.Optional[str]",
                    "style"
                ],
                "safe_box": [],
                "height": [],
                "file": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_caller_frame_info": {
                "return": [
                    "tuple[str, int, dict[typing.Any, typing.Any]]",
                    "tuple[str, int, dict]"
                ],
                "currentframe": [],
                "offset": []
            },
            "_collect_renderables": {
                "emoji": [
                    "bool"
                ],
                "return": [],
                "justify": [
                    "typing.Optional[str]",
                    "justify"
                ],
                "sep": [],
                "markup": [
                    "typing.Optional[str]",
                    "typing.Optional[bool]",
                    "Optional[str]",
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "objects": [
                    "typing.Iterable[typing.Any]",
                    "highlight"
                ],
                "end": [],
                "highlight": []
            },
            "_check_buffer": {
                "return": []
            },
            "_exit_buffer": {
                "return": []
            },
            "_write_buffer": {
                "return": [
                    "None"
                ]
            },
            "_enter_buffer": {
                "return": [
                    "None"
                ]
            },
            "begin_capture": {
                "return": [
                    "None"
                ]
            },
            "_detect_color_system": {
                "return": [
                    "typing.Union[ColorSystem, None]",
                    "typing.Optional[ColorSystem]",
                    "ColorSystem"
                ]
            },
            "capture": {
                "return": [
                    "Capture"
                ]
            },
            "_render_buffer": {
                "buffer": [
                    "List[Tuple[str, str, Any]]",
                    "Iterable[Tuple[str, str, str]]",
                    "List[Tuple[str, str, str]]",
                    "list",
                    "Iterable[Tuple[str, str, Any]]",
                    "Iterable[Tuple[Any, Any, Any]]",
                    "Iterable[Tuple]",
                    "buffer",
                    "str"
                ],
                "return": []
            },
            "clear_live": {
                "return": []
            },
            "clear": {
                "return": [],
                "home": []
            },
            "control": {
                "return": [],
                "control": [
                    "typing.Any",
                    "tuple[typing.Any]",
                    "Qid",
                    "typing.Sequence[typing.Any]"
                ]
            },
            "export_html": {
                "clear": [
                    "bool"
                ],
                "inline_styles": [
                    "bool"
                ],
                "return": [
                    "str"
                ],
                "code_format": [],
                "theme": []
            },
            "export_svg": {
                "clear": [
                    "bool"
                ],
                "font_aspect_ratio": [
                    "float"
                ],
                "return": [],
                "title": [
                    "str"
                ],
                "theme": [
                    "str",
                    "Optional[Any]",
                    "dict",
                    "Optional[str]",
                    "Mapping"
                ],
                "unique_id": [],
                "code_format": []
            },
            "end_capture": {
                "return": [
                    "str",
                    "bytes",
                    "Any"
                ]
            },
            "export_text": {
                "clear": [
                    "bool"
                ],
                "styles": [
                    "bool"
                ],
                "return": [
                    "str",
                    "typing.Any"
                ]
            },
            "get_style": {
                "name": [
                    "str"
                ],
                "default": [
                    "Optional[str]",
                    "typing.Optional[str]",
                    "typing.Any"
                ],
                "return": [
                    "Style"
                ]
            },
            "bell": {
                "return": []
            },
            "global": {
                "_environ": [
                    "Mapping[str, str]",
                    "os.environ",
                    "typing.Mapping[str, str]",
                    "dict",
                    "Console",
                    "collections.abc.Mapping",
                    "Mapping"
                ]
            },
            "input": {
                "emoji": [],
                "return": [
                    "str",
                    "result",
                    "input"
                ],
                "password": [
                    "bool"
                ],
                "prompt": [
                    "str"
                ],
                "markup": [],
                "stream": []
            },
            "line": {
                "count": [
                    "int"
                ],
                "return": []
            },
            "log": {
                "_stack_offset": [
                    "int"
                ],
                "emoji": [
                    "bool"
                ],
                "highlight": [
                    "bool"
                ],
                "return": [],
                "justify": [],
                "markup": [
                    "bool"
                ],
                "sep": [
                    "str"
                ],
                "style": [
                    "str",
                    "Optional[str]"
                ],
                "end": [],
                "log_locals": [
                    "bool"
                ],
                "objects": [
                    "tuple[Any, ...]",
                    "Any",
                    "tuple",
                    "typing.Any",
                    "typing.Tuple[Any, ...]",
                    "objects",
                    "Tuple[Any, ...]",
                    "tuple[str, ...]"
                ]
            },
            "out": {
                "end": [
                    "str"
                ],
                "highlight": [
                    "bool",
                    "Optional[Union[bool, Callable]]",
                    "Optional[str]",
                    "Optional[Union[bool, str]]"
                ],
                "return": [
                    "None"
                ],
                "objects": [
                    "tuple[Any, ...]",
                    "tuple[Any]",
                    "Any",
                    "Iterable[Any]"
                ],
                "style": [],
                "sep": []
            },
            "measure": {
                "return": [],
                "options": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "renderable": [
                    "typing.Any",
                    "Measurement",
                    "Any",
                    "Renderable",
                    "Measurable",
                    "renderable",
                    "object",
                    "RenderableObject"
                ]
            },
            "on_broken_pipe": {
                "return": []
            },
            "pop_theme": {
                "return": [
                    "None"
                ]
            },
            "print": {
                "crop": [
                    "bool"
                ],
                "end": [
                    "str"
                ],
                "height": [
                    "typing.Optional[int]"
                ],
                "highlight": [
                    "typing.Any",
                    "bool",
                    "typing.Optional[bool]"
                ],
                "justify": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[str]",
                    "justify"
                ],
                "new_line_start": [
                    "bool"
                ],
                "markup": [
                    "typing.Any",
                    "typing.Optional[bool]"
                ],
                "no_wrap": [],
                "objects": [
                    "typing.Tuple[typing.Any, ...]"
                ],
                "soft_wrap": [
                    "bool",
                    "None"
                ],
                "style": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "return": [],
                "sep": [
                    "str"
                ],
                "overflow": [
                    "typing.Any",
                    "bool"
                ],
                "width": [
                    "typing.Optional[int]",
                    "typing.Union[int,None]",
                    "typing.Union[int, None]"
                ],
                "emoji": [
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "typing.Optional[bool]"
                ]
            },
            "pager": {
                "pager": [
                    "Optional[str]",
                    "Optional[Any]",
                    "pager",
                    "None",
                    "PagerContext",
                    "Optional[bool]",
                    "more"
                ],
                "links": [],
                "styles": [
                    "bool"
                ],
                "return": []
            },
            "print_exception": {
                "extra_lines": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "suppress": [
                    "tuple",
                    "Tuple[Type[BaseException], ...]",
                    "Iterable[Type[BaseException]]",
                    "Tuple",
                    "Tuple[Union[Type[BaseException], ModuleType], ...]"
                ],
                "return": [],
                "theme": [],
                "max_frames": [],
                "show_locals": [],
                "word_wrap": [
                    "bool"
                ]
            },
            "print_json": {
                "ensure_ascii": [
                    "bool"
                ],
                "default": [],
                "highlight": [
                    "bool"
                ],
                "indent": [],
                "sort_keys": [],
                "skip_keys": [
                    "bool"
                ],
                "json": [
                    "str",
                    "Optional[str]"
                ],
                "check_circular": [],
                "return": [],
                "allow_nan": [],
                "data": []
            },
            "pop_render_hook": {
                "return": [
                    "None"
                ]
            },
            "push_render_hook": {
                "hook": [
                    "typing.Callable",
                    "typing.Any",
                    "Callback"
                ],
                "return": [
                    "None"
                ]
            },
            "push_theme": {
                "return": [],
                "inherit": [
                    "bool"
                ],
                "theme": []
            },
            "render": {
                "options": [
                    "typing.Optional[Options]",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[Any]",
                    "Optional[Any]",
                    "typing.Any"
                ],
                "return": [],
                "renderable": []
            },
            "render_lines": {
                "new_lines": [
                    "bool"
                ],
                "options": [
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "Optional[dict]",
                    "Optional[typing.Any]"
                ],
                "pad": [
                    "bool"
                ],
                "return": [],
                "renderable": [
                    "Any",
                    "object",
                    "str",
                    "DecisionView",
                    "Renderable",
                    "render"
                ],
                "style": []
            },
            "render_str": {
                "emoji": [
                    "bool"
                ],
                "justify": [],
                "return": [
                    "typing.Any",
                    "str",
                    "rich.text.Text"
                ],
                "highlighter": [
                    "typing.Optional[Highlighter]"
                ],
                "markup": [
                    "typing.Optional[bool]",
                    "typing.Optional[typing.Any]"
                ],
                "text": [
                    "str"
                ],
                "highlight": [],
                "style": [],
                "overflow": []
            },
            "rule": {
                "align": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "characters": [],
                "style": [],
                "return": []
            },
            "save_html": {
                "inline_styles": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "theme": [
                    "str",
                    "Optional[str]"
                ],
                "code_format": [
                    "str"
                ],
                "clear": []
            },
            "save_svg": {
                "clear": [],
                "font_aspect_ratio": [
                    "float"
                ],
                "code_format": [],
                "title": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "theme": [],
                "path": [],
                "unique_id": []
            },
            "save_text": {
                "clear": [],
                "path": [
                    "str"
                ],
                "styles": [
                    "bool"
                ],
                "return": []
            },
            "screen": {
                "return": [
                    "ScreenContext"
                ],
                "hide_cursor": [
                    "bool"
                ],
                "style": []
            },
            "set_alt_screen": {
                "enable": [],
                "return": []
            },
            "set_window_title": {
                "return": [
                    "bool"
                ],
                "title": []
            },
            "set_live": {
                "live": [
                    "bool",
                    "typing.Any",
                    "live"
                ],
                "return": []
            },
            "show_cursor": {
                "return": [
                    "bool"
                ],
                "show": []
            },
            "status": {
                "spinner": [
                    "str"
                ],
                "refresh_per_second": [],
                "status": [],
                "spinner_style": [
                    "str"
                ],
                "return": [
                    "Status"
                ],
                "speed": [
                    "float"
                ]
            },
            "update_screen": {
                "region": [],
                "return": [],
                "options": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "renderable": [
                    "Renderable"
                ]
            },
            "update_screen_lines": {
                "lines": [
                    "Any",
                    "List[str]",
                    "ScreenUpdate",
                    "List[Any]",
                    "List",
                    "str",
                    "Tuple"
                ],
                "y": [
                    "int"
                ],
                "x": [],
                "return": [
                    "None"
                ]
            },
            "use_theme": {
                "inherit": [
                    "bool"
                ],
                "theme": [
                    "Theme"
                ],
                "return": []
            }
        },
        "Capture": {
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_val": [],
                "exc_type": [],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]"
                ]
            },
            "__enter__": {
                "return": []
            },
            "__init__": {
                "return": [],
                "console": []
            },
            "get": {
                "return": []
            }
        },
        "ScreenContext": {
            "__enter__": {
                "return": []
            },
            "__exit__": {
                "return": [],
                "exc_val": [
                    "typing.Optional[BaseException]"
                ],
                "exc_type": [
                    "None",
                    "typing.Optional[typing.Type[BaseException]]"
                ],
                "exc_tb": []
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "hide_cursor": [
                    "bool"
                ],
                "style": [],
                "console": [
                    "typing.Any",
                    "console"
                ]
            },
            "update": {
                "style": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "Style",
                    "style",
                    "screen.style"
                ],
                "renderables": [
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[typing.Any]",
                    "typing.Tuple[typing.Any, ...]",
                    "tuple[typing.Any]"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "PagerContext": {
            "__enter__": {
                "return": [
                    "Self",
                    "ClassName",
                    "typing.Self",
                    "MyClass",
                    "self"
                ]
            },
            "__exit__": {
                "exc_type": [],
                "return": [],
                "exc_val": [
                    "typing.Optional[BaseException]"
                ],
                "exc_tb": []
            },
            "__init__": {
                "styles": [
                    "bool"
                ],
                "console": [
                    "Console",
                    "object",
                    "InterceptingConsole",
                    "Any",
                    "RichConsole"
                ],
                "return": [
                    "None",
                    "styles",
                    "bool",
                    "pager"
                ],
                "links": [],
                "pager": [
                    "Optional[SystemPager]",
                    "Optional[Any]",
                    "Optional[object]",
                    "SystemPager",
                    "self.pager",
                    "Any",
                    "None"
                ]
            }
        },
        "ThemeContext": {
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self",
                    "MyClass",
                    "ClassName",
                    "typing.Any",
                    "typing.ContextManager[typing.Any]"
                ]
            },
            "__exit__": {
                "exc_type": [
                    "None",
                    "typing.Optional[typing.Type[BaseException]]"
                ],
                "return": [
                    "None"
                ],
                "exc_tb": [],
                "exc_val": [
                    "typing.Optional[BaseException]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "inherit": [
                    "bool"
                ],
                "theme": [
                    "Theme"
                ],
                "console": [
                    "console",
                    "typing.Any",
                    "self.console"
                ]
            }
        },
        "Group": {
            "__init__": {
                "return": [
                    "None"
                ],
                "fit": [],
                "renderables": []
            },
            "__rich_console__": {
                "return": [
                    "generator"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "Console",
                    "rich",
                    "object"
                ],
                "options": [
                    "dict",
                    "options",
                    "ConsoleOptions",
                    "rich.console.ConsoleOptions",
                    "Any",
                    "object"
                ]
            },
            "__rich_measure__": {
                "return": [],
                "options": [
                    "rich.console.ConsoleOptions",
                    "typing.Any",
                    "rich.console.Options"
                ],
                "console": []
            }
        },
        "NewLine": {
            "__init__": {
                "count": [
                    "int"
                ],
                "return": []
            },
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "Console",
                    "rich"
                ],
                "options": [
                    "dict",
                    "rich.console.ConsoleOptions",
                    "options",
                    "ConsoleOptions",
                    "rich"
                ],
                "return": []
            }
        },
        "ScreenUpdate": {
            "__init__": {
                "lines": [
                    "list[str]"
                ],
                "y": [
                    "float"
                ],
                "return": [],
                "x": []
            },
            "__rich_console__": {
                "return": [
                    "typing.Iterator[str]",
                    "typing.Iterator[typing.Any]",
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator"
                ],
                "console": [],
                "options": [
                    "dict",
                    "Any",
                    "object",
                    "options",
                    "RichConsoleOptions",
                    "rich.console.ConsoleOptions"
                ]
            }
        },
        "ConsoleRenderable": {
            "__rich_console__": {
                "return": [],
                "options": [],
                "console": []
            }
        },
        "RichCast": {
            "__rich__": {
                "return": []
            }
        },
        "global": {
            "_is_jupyter": {
                "return": [
                    "bool"
                ]
            },
            "_svg_hash": {
                "return": [
                    "str"
                ],
                "svg_main_code": [
                    "str"
                ]
            },
            "detect_legacy_windows": {
                "return": [
                    "bool"
                ]
            },
            "get_windows_console_features": {
                "return": []
            },
            "global": {
                "_windows_console_features": []
            },
            "group": {
                "fit": [
                    "bool"
                ],
                "return": []
            }
        },
        "ConsoleOptions": {
            "copy": {
                "return": [
                    "ConsoleOptions"
                ]
            },
            "global": {
                "encoding": [
                    "str",
                    "encoding",
                    "Console",
                    "None"
                ],
                "highlight": [],
                "is_terminal": [
                    "Console",
                    "bool",
                    "False",
                    "True"
                ],
                "justify": [
                    "justify",
                    "None",
                    "Optional[JustifyMethod]",
                    "JustifyMethod"
                ],
                "legacy_windows": [
                    "bool",
                    "Console",
                    "None"
                ],
                "max_height": [
                    "int",
                    "ConsoleOptions",
                    "Optional[int]",
                    "update",
                    "Console",
                    "None",
                    "self.size"
                ],
                "markup": [
                    "None",
                    "Optional[bool]",
                    "typing.Optional[bool]",
                    "bool",
                    "markup",
                    "Union[bool, None]",
                    "log",
                    "Console",
                    "False",
                    "input"
                ],
                "max_width": [
                    "int",
                    "ConsoleOptions",
                    "Optional[int]",
                    "self.width",
                    "None",
                    "TerminalTheme",
                    "Klass",
                    "options",
                    "list[typing.Any]"
                ],
                "no_wrap": [],
                "size": [
                    "ConsoleDimensions",
                    "Console",
                    "size",
                    "height",
                    "Tuple[int, int]",
                    "int",
                    "ConsoleOptions",
                    "NamedTuple"
                ],
                "min_width": [],
                "overflow": [],
                "height": []
            },
            "reset_height": {
                "return": [
                    "self",
                    "Any",
                    "TreeNode",
                    "list"
                ]
            },
            "update": {
                "height": [],
                "highlight": [
                    "typing.Union[bool, NoChange]",
                    "typing.Any",
                    "typing.Union[NoChange, bool]",
                    "Any",
                    "typing.Union[NoChange, Any]",
                    "typing.Union[Any, NoChange]"
                ],
                "max_width": [
                    "typing.Union[int, NoChange]"
                ],
                "min_width": [
                    "typing.Union[int, NoChange]",
                    "typing.Union[NoChange, int]"
                ],
                "justify": [],
                "no_wrap": [
                    "typing.Union[NoChange, bool]",
                    "typing.Union[bool, NoChange]"
                ],
                "width": [
                    "typing.Union[int, NoChange]",
                    "typing.Union[NoChange, int]"
                ],
                "overflow": [
                    "typing.Union[NoChange, str]",
                    "typing.Union[str, NoChange]",
                    "typing.Any",
                    "str",
                    "typing.Union[NoChange, Any]"
                ],
                "return": [],
                "markup": [
                    "typing.Union[str, NoChange]",
                    "typing.Union[NoChange, str]",
                    "str"
                ]
            },
            "update_dimensions": {
                "width": [
                    "int"
                ],
                "height": [],
                "return": [
                    "self"
                ]
            },
            "update_height": {
                "return": [
                    "self"
                ],
                "height": [
                    "int",
                    "float"
                ]
            },
            "update_width": {
                "width": [
                    "int"
                ],
                "return": [
                    "self"
                ]
            }
        },
        "ConsoleDimensions": {
            "global": {
                "width": [],
                "height": []
            }
        },
        "ConsoleThreadLocals": {
            "global": {
                "buffer": [
                    "Segment",
                    "List[Segment]",
                    "buffer",
                    "Iterable[Segment]",
                    "rich.segment",
                    "List[rich.segment.Segment]",
                    "ConsoleThreadLocals",
                    "list[Segment]",
                    "Console",
                    "memoryview"
                ],
                "buffer_index": [],
                "theme_stack": []
            }
        },
        "RenderHook": {
            "process_renderables": {
                "return": [
                    "list",
                    "typing.Iterable[Any]",
                    "typing.Any",
                    "None",
                    "typing.Iterable",
                    "Renderable",
                    "list[Renderable]",
                    "list[Any]",
                    "ProcessedRenderable",
                    "Any"
                ],
                "renderables": [
                    "list",
                    "Iterable[Any]",
                    "Iterable",
                    "Iterable[Renderable]",
                    "typing.Iterable[Renderable]"
                ]
            }
        }
    },
    "rich.constrain": {
        "Constrain": {
            "__init__": {
                "return": [
                    "None"
                ],
                "width": [],
                "renderable": []
            },
            "__rich_measure__": {
                "return": [],
                "console": [
                    "rich.console.Console",
                    "rich.Console"
                ],
                "options": []
            },
            "__rich_console__": {
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "self.renderable",
                    "console.render",
                    "typing.Generator"
                ],
                "options": [
                    "Any",
                    "ConsoleOptions",
                    "RichConsoleOptions",
                    "typing.Any"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any"
                ]
            }
        }
    },
    "rich.containers": {
        "Lines": {
            "__init__": {
                "lines": [
                    "Iterable[typing.Any]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[str]"
                ],
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__rich_console__": {
                "return": [
                    "generator",
                    "Generator",
                    "Generator[Any, None, None]"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "console",
                    "Console",
                    "object",
                    "rich"
                ],
                "options": [
                    "dict",
                    "rich.console.ConsoleOptions",
                    "ConsoleOptions",
                    "options",
                    "Any",
                    "rich"
                ]
            },
            "append": {
                "line": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "__setitem__": {
                "value": [],
                "return": [
                    "self",
                    "Self",
                    "Any"
                ],
                "index": [
                    "int"
                ]
            },
            "extend": {
                "return": [],
                "lines": [
                    "typing.Iterable[typing.Any]",
                    "list[typing.Any]",
                    "lines",
                    "Iterable[Any]"
                ]
            },
            "justify": {
                "return": [
                    "None",
                    "Text",
                    "justify"
                ],
                "width": [
                    "int"
                ],
                "overflow": [
                    "str"
                ],
                "console": [],
                "justify": []
            },
            "pop": {
                "index": [
                    "int"
                ],
                "return": [
                    "str",
                    "Any"
                ]
            }
        },
        "Renderables": {
            "__init__": {
                "renderables": [],
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "console": [
                    "rich.console.Console"
                ],
                "options": []
            },
            "__rich_console__": {
                "return": [
                    "Generator",
                    "typing"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "rich",
                    "console",
                    "Console"
                ],
                "options": []
            },
            "append": {
                "return": [
                    "None"
                ],
                "renderable": []
            }
        }
    },
    "rich.control": {
        "Control": {
            "__init__": {
                "codes": [
                    "ControlType",
                    "typing.Iterable[typing.Union[ControlType, typing.Any]]",
                    "typing.Tuple[typing.Union[ControlType, typing.Any], ...]"
                ],
                "return": [
                    "None"
                ]
            },
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "Console",
                    "object"
                ],
                "options": [
                    "dict",
                    "rich.console.ConsoleOptions",
                    "options",
                    "ConsoleOptions",
                    "Any"
                ],
                "return": []
            },
            "alt_screen": {
                "enable": [
                    "bool"
                ],
                "return": []
            },
            "bell": {
                "return": [
                    "cls",
                    "bell",
                    "ControlType",
                    "Control"
                ]
            },
            "clear": {
                "return": []
            },
            "__str__": {
                "return": []
            },
            "home": {
                "return": [
                    "cls",
                    "Self",
                    "Control",
                    "CusipTestCase",
                    "MyClass"
                ]
            },
            "move_to": {
                "return": [
                    "ControlType"
                ],
                "x": [
                    "float",
                    "int"
                ],
                "y": [
                    "float",
                    "int"
                ]
            },
            "move": {
                "return": [
                    "cls",
                    "typing.Any",
                    "None",
                    "Control",
                    "typing.Type[cls]",
                    "move"
                ],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            },
            "show_cursor": {
                "show": [
                    "bool"
                ],
                "return": []
            },
            "move_to_column": {
                "return": [],
                "y": [],
                "x": [
                    "int",
                    "Any",
                    "Union[int, float]"
                ]
            },
            "title": {
                "title": [
                    "str"
                ],
                "return": [
                    "cls",
                    "title",
                    "ClassName",
                    "typing.Type[cls]",
                    "typing.Any",
                    "Control",
                    "ControlType"
                ]
            }
        },
        "global": {
            "escape_control_codes": {
                "return": [
                    "str"
                ],
                "_translate_table": [
                    "dict[int, typing.Union[int, str, None]]",
                    "dict[int, typing.Union[int, None, str]]",
                    "dict[int, str]",
                    "dict[int, typing.Union[int,None]]",
                    "dict[int, typing.Union[int, str]]"
                ],
                "text": []
            },
            "global": {
                "STRIP_CONTROL_CODES": [
                    "list[int]"
                ],
                "CONTROL_ESCAPE": [],
                "_CONTROL_STRIP_TRANSLATE": [
                    "dict[Any, None]",
                    "dict[int, None]"
                ],
                "CONTROL_CODES_FORMAT": []
            },
            "strip_control_codes": {
                "text": [],
                "_translate_table": [
                    "dict",
                    "Mapping"
                ],
                "return": []
            }
        }
    },
    "rich.default_styles": {
        "global": {
            "global": {
                "html": [
                    "bool"
                ],
                "DEFAULT_STYLES": []
            }
        }
    },
    "rich.diagnose": {
        "global": {
            "report": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "rich.emoji": {
        "Emoji": {
            "__init__": {
                "name": [
                    "str"
                ],
                "variant": [
                    "typing.Optional[str]",
                    "typing.Optional[int]"
                ],
                "return": [
                    "None",
                    "self"
                ],
                "style": []
            },
            "__repr__": {
                "return": []
            },
            "__rich_console__": {
                "return": [],
                "console": [
                    "rich.console.Console",
                    "Console",
                    "console"
                ],
                "options": []
            },
            "replace": {
                "text": [
                    "str"
                ],
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "rich.file_proxy": {
        "FileProxy": {
            "__init__": {
                "return": [
                    "None"
                ],
                "console": [],
                "file": [
                    "typing.Any",
                    "Any",
                    "file",
                    "typing.TextIO"
                ]
            },
            "__getattr__": {
                "name": [
                    "str"
                ],
                "return": [
                    "typing.Any",
                    "Any"
                ]
            },
            "fileno": {
                "return": [
                    "int"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            },
            "write": {
                "text": [
                    "str"
                ],
                "return": [
                    "int"
                ]
            }
        }
    },
    "rich.filesize": {
        "global": {
            "_to_str": {
                "base": [
                    "int"
                ],
                "return": [],
                "precision": [
                    "int"
                ],
                "separator": [],
                "size": [],
                "suffixes": []
            },
            "decimal": {
                "precision": [],
                "return": [
                    "str"
                ],
                "separator": [
                    "str"
                ],
                "size": [
                    "typing.Union[int, float]",
                    "typing.Union[float, int]",
                    "float"
                ]
            },
            "pick_unit_and_suffix": {
                "base": [
                    "int"
                ],
                "return": [
                    "tuple[typing.Any, typing.Any]"
                ],
                "suffixes": [
                    "Iterable[str]",
                    "list[str]",
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "Sequence[str]",
                    "list[typing.Any]"
                ],
                "size": []
            }
        }
    },
    "rich.highlighter": {
        "Highlighter": {
            "__call__": {
                "return": [
                    "Any",
                    "Callable"
                ],
                "text": [
                    "Union[str, Text]"
                ]
            },
            "highlight": {
                "return": [],
                "text": []
            }
        },
        "global": {
            "_combine_regex": {
                "return": [
                    "str"
                ],
                "regexes": [
                    "tuple[str, ...]",
                    "typing.Iterable[str]"
                ]
            }
        },
        "JSONHighlighter": {
            "highlight": {
                "return": [
                    "None"
                ],
                "text": [
                    "plain"
                ]
            }
        },
        "NullHighlighter": {
            "highlight": {
                "return": [],
                "text": []
            }
        },
        "RegexHighlighter": {
            "global": {
                "highlights": [],
                "base_style": []
            },
            "highlight": {
                "return": [],
                "text": [
                    "Any",
                    "text"
                ]
            }
        }
    },
    "rich.json": {
        "JSON": {
            "__init__": {
                "allow_nan": [
                    "bool"
                ],
                "check_circular": [],
                "ensure_ascii": [],
                "default": [],
                "indent": [
                    "int"
                ],
                "highlight": [],
                "skip_keys": [
                    "bool"
                ],
                "sort_keys": [
                    "bool"
                ],
                "return": [],
                "json": []
            },
            "from_data": {
                "check_circular": [
                    "bool"
                ],
                "allow_nan": [],
                "default": [
                    "typing.Union[typing.Callable, None]"
                ],
                "ensure_ascii": [
                    "bool"
                ],
                "skip_keys": [],
                "indent": [
                    "int"
                ],
                "highlight": [
                    "bool"
                ],
                "return": [
                    "cls",
                    "Type",
                    "Type[cls]",
                    "C",
                    "JsonData",
                    "Json",
                    "TypeVar"
                ],
                "sort_keys": [
                    "bool"
                ],
                "data": []
            },
            "__rich__": {
                "return": [
                    "self.text",
                    "RichTextLines",
                    "typing.Any",
                    "str"
                ]
            }
        }
    },
    "rich.jupyter": {
        "JupyterRenderable": {
            "__init__": {
                "html": [
                    "str"
                ],
                "text": [],
                "return": []
            },
            "_repr_mimebundle_": {
                "return": [],
                "include": [
                    "typing.Iterable[str]",
                    "set[str]",
                    "in",
                    "typing.Container[typing.Any]"
                ],
                "kwargs": [
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "exclude": []
            }
        },
        "global": {
            "_render_segments": {
                "segments": [
                    "typing.Iterable[Segment]"
                ],
                "return": [
                    "None",
                    "code",
                    "str",
                    "html"
                ]
            },
            "display": {
                "segments": [
                    "list[typing.Any]",
                    "typing.Any",
                    "Iterable[typing.Any]"
                ],
                "text": [
                    "str"
                ],
                "return": []
            },
            "print": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": [],
                "args": []
            }
        },
        "JupyterMixin": {
            "_repr_mimebundle_": {
                "include": [],
                "self": [],
                "return": [],
                "exclude": [],
                "kwargs": []
            }
        }
    },
    "rich.layout": {
        "Layout": {
            "__getitem__": {
                "name": [
                    "str"
                ],
                "return": []
            },
            "__init__": {
                "minimum_size": [],
                "name": [
                    "str"
                ],
                "ratio": [
                    "float"
                ],
                "visible": [
                    "bool"
                ],
                "size": [],
                "renderable": [],
                "return": []
            },
            "__rich_console__": {
                "console": [],
                "options": [],
                "return": []
            },
            "__rich_repr__": {
                "return": []
            },
            "_make_region_map": {
                "return": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Dict[typing.Any, typing.Any]"
                ],
                "width": [
                    "int"
                ],
                "height": []
            },
            "add_split": {
                "return": [
                    "None"
                ],
                "layouts": []
            },
            "get": {
                "name": [
                    "str",
                    "typing.Any"
                ],
                "return": [
                    "typing.Any",
                    "typing.Union[None, typing.Any]",
                    "typing.Union[typing.Any, None]"
                ]
            },
            "refresh_screen": {
                "return": [
                    "None"
                ],
                "layout_name": [],
                "console": []
            },
            "render": {
                "console": [],
                "options": [
                    "height"
                ],
                "return": [
                    "render",
                    "options"
                ]
            },
            "split": {
                "return": [],
                "layouts": [
                    "Layout",
                    "tuple[typing.Any]",
                    "typing.Iterable[typing.Any]",
                    "Iterable[Any]"
                ],
                "splitter": [
                    "Union[str, Splitter]",
                    "Union[Splitter, str]",
                    "Splitter"
                ]
            },
            "split_row": {
                "return": [
                    "None"
                ],
                "layouts": [
                    "Tuple[Any, ...]",
                    "Tuple[Any]",
                    "Tuple[str]"
                ]
            },
            "split_column": {
                "return": [],
                "layouts": []
            },
            "update": {
                "return": [
                    "None"
                ],
                "renderable": [
                    "typing.Any",
                    "renderable",
                    "Any",
                    "typing"
                ]
            },
            "unsplit": {
                "return": [
                    "None"
                ]
            }
        },
        "_Placeholder": {
            "__init__": {
                "return": [
                    "None"
                ],
                "style": [
                    "str"
                ],
                "layout": [
                    "typing.Any",
                    "Any",
                    "str",
                    "layout",
                    "list"
                ]
            },
            "__rich_console__": {
                "return": [
                    "Generator[Panel, None, None]",
                    "generator",
                    "generator[Panel]"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "console",
                    "rich.Console",
                    "object"
                ],
                "options": [
                    "ConsoleOptions",
                    "size",
                    "height"
                ]
            }
        },
        "ColumnSplitter": {
            "divide": {
                "children": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "return": [],
                "region": []
            },
            "get_tree_icon": {
                "return": []
            }
        },
        "RowSplitter": {
            "divide": {
                "return": [
                    "yield",
                    "child"
                ],
                "region": [],
                "children": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "Child",
                    "Sequence[typing.Any]",
                    "List[Child]"
                ]
            },
            "get_tree_icon": {
                "return": []
            }
        },
        "Splitter": {
            "divide": {
                "region": [
                    "str"
                ],
                "return": [
                    "None",
                    "pass"
                ],
                "children": [
                    "list[typing.Any]",
                    "typing.List[typing.Any]",
                    "typing.Any",
                    "children"
                ]
            },
            "global": {
                "name": [
                    "name",
                    "Optional[str]",
                    "get",
                    "str",
                    "Layout",
                    "layout.name",
                    "None"
                ]
            },
            "get_tree_icon": {
                "return": []
            }
        },
        "LayoutRender": {
            "global": {
                "region": [
                    "Region",
                    ".region",
                    "Layout",
                    "region",
                    "RegionMap",
                    "ColumnSplitter",
                    "divide",
                    "LayoutRender",
                    "Splitter"
                ],
                "render": []
            }
        }
    },
    "rich.live": {
        "Live": {
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]",
                    "Optional[Any]",
                    "Optional[types.TracebackType]"
                ],
                "exc_val": [],
                "exc_type": [
                    "None",
                    "typing.Optional[typing.Type[BaseException]]"
                ]
            },
            "__enter__": {
                "return": [
                    "Self",
                    "ClassName"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "auto_refresh": [
                    "bool"
                ],
                "get_renderable": [
                    "typing.Callable",
                    "typing.Callable[[], typing.Any]",
                    "Callable[[], Any]"
                ],
                "redirect_stderr": [],
                "refresh_per_second": [],
                "console": [],
                "transient": [],
                "renderable": [
                    "typing.Any"
                ],
                "vertical_overflow": [],
                "screen": [],
                "redirect_stdout": [
                    "bool"
                ]
            },
            "_enable_redirect_io": {
                "return": []
            },
            "get_renderable": {
                "return": [
                    "typing.Union[typing.Any, str]",
                    "str",
                    "typing.Any"
                ]
            },
            "refresh": {
                "return": []
            },
            "process_renderables": {
                "renderables": [
                    "typing.Iterable[typing.Any]",
                    "Sequence[Renderable]",
                    "List[Any]"
                ],
                "return": [
                    "Any",
                    "Iterable",
                    "Iterable[Renderable]",
                    "List",
                    "renderables"
                ]
            },
            "update": {
                "refresh": [
                    "bool"
                ],
                "renderable": [
                    "typing.Union[str, Any]",
                    "typing.Union[str, typing.Any]",
                    "typing.Union[str,object]",
                    "typing.Union[str, object]"
                ],
                "return": [
                    "None"
                ]
            },
            "start": {
                "refresh": [],
                "return": []
            },
            "_disable_redirect_io": {
                "return": [
                    "None"
                ]
            },
            "stop": {
                "return": []
            }
        },
        "_RefreshThread": {
            "__init__": {
                "return": [],
                "live": [],
                "refresh_per_second": [
                    "float",
                    "int",
                    "Union[int, float]"
                ]
            },
            "run": {
                "return": []
            },
            "stop": {
                "return": []
            }
        },
        "global": {
            "global": {
                "exchange_rate_dict": [
                    "dict",
                    "dict[tuple[str, str], float]",
                    "Dict[Tuple[str, str], float]",
                    "dict[tuple, float]"
                ]
            }
        }
    },
    "rich.live_render": {
        "LiveRender": {
            "__init__": {
                "return": [
                    "None"
                ],
                "style": [
                    "str"
                ],
                "vertical_overflow": [
                    "str"
                ],
                "renderable": []
            },
            "__rich_console__": {
                "return": [
                    "generator",
                    "line",
                    "str"
                ],
                "options": [],
                "console": [
                    "Console",
                    "render",
                    "console",
                    "rich",
                    "rich.Console"
                ]
            },
            "position_cursor": {
                "return": [
                    "Control"
                ]
            },
            "set_renderable": {
                "renderable": [],
                "return": [
                    "None"
                ]
            },
            "restore_cursor": {
                "return": []
            }
        }
    },
    "rich.logging": {
        "RichHandler": {
            "__init__": {
                "console": [
                    "typing.Optional[Console]",
                    "typing.Optional[typing.Any]"
                ],
                "log_time_format": [
                    "str"
                ],
                "keywords": [],
                "level": [
                    "int"
                ],
                "locals_max_length": [
                    "int"
                ],
                "locals_max_string": [
                    "int"
                ],
                "rich_tracebacks": [
                    "bool"
                ],
                "omit_repeated_times": [],
                "show_level": [],
                "show_time": [
                    "bool"
                ],
                "tracebacks_extra_lines": [
                    "int"
                ],
                "tracebacks_max_frames": [
                    "int"
                ],
                "return": [],
                "enable_link_path": [],
                "tracebacks_show_locals": [
                    "bool"
                ],
                "tracebacks_suppress": [
                    "tuple",
                    "typing.Tuple",
                    "list",
                    "typing.Iterable[typing.Union[typing.Type[BaseException], typing.ModuleType]]"
                ],
                "tracebacks_theme": [
                    "typing.Optional[str]"
                ],
                "markup": [],
                "highlighter": [
                    "typing.Optional[Highlighter]",
                    "typing.Optional[object]",
                    "Highlighter"
                ],
                "show_path": [
                    "bool"
                ],
                "tracebacks_code_width": [],
                "tracebacks_width": [
                    "typing.Optional[int]"
                ],
                "tracebacks_word_wrap": []
            },
            "emit": {
                "record": [
                    "logging.LogRecord"
                ],
                "return": []
            },
            "get_level_text": {
                "record": [],
                "return": [
                    "Text"
                ]
            },
            "render": {
                "record": [],
                "message_renderable": [
                    "typing.Any",
                    "str",
                    "typing.Union[str, rich.console.RenderableType]"
                ],
                "return": [
                    "typing.Any",
                    "rich.console.RenderableType"
                ],
                "traceback": []
            },
            "global": {
                "HIGHLIGHTER_CLASS": [
                    "Highlighter",
                    "Type[Highlighter]",
                    "ReprHighlighter",
                    "typing.Type[Highlighter]",
                    "rich.highlighter"
                ],
                "KEYWORDS": [
                    "KEYWORDS",
                    "typing.Optional[typing.List[str]]",
                    "typing.ClassVar[typing.Optional[typing.List[str]]]"
                ]
            },
            "render_message": {
                "record": [
                    "logging.LogRecord",
                    "LogRecord"
                ],
                "message": [
                    "str"
                ],
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "divide": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "rich.markdown": {
        "BlockQuote": {
            "__init__": {
                "return": []
            },
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "Console",
                    "ConsoleHandler",
                    "rich.console"
                ],
                "options": [
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "rich.console.ConsoleOptions",
                    "ConsoleOptions",
                    "options",
                    "update",
                    "RichConsoleOptions",
                    "dict[typing.Any, typing.Any]",
                    "dict"
                ],
                "return": [
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[typing.Union[str, typing.Iterable[str]]]"
                ]
            },
            "on_child_close": {
                "return": [],
                "child": [],
                "context": []
            }
        },
        "CodeBlock": {
            "__init__": {
                "return": [],
                "theme": [
                    "Theme",
                    "theme"
                ],
                "lexer_name": []
            },
            "__rich_console__": {
                "return": [],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "Console",
                    "object"
                ],
                "options": []
            },
            "create": {
                "markdown": [
                    "typing.Any",
                    "markdown",
                    "Config",
                    "Markdown",
                    "Any",
                    "markdown.Markdown",
                    "str"
                ],
                "token": [
                    "Token",
                    "typing.Optional[str]",
                    "typing.Any",
                    "info",
                    "token",
                    "typing.Optional[Any]",
                    "token.info",
                    "TokenType",
                    "Any"
                ],
                "return": []
            }
        },
        "Heading": {
            "__init__": {
                "tag": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "object",
                    "rich"
                ],
                "return": [],
                "options": [
                    "dict",
                    "options",
                    "Any",
                    "rich.console.ConsoleOptions",
                    "ConsoleOptions",
                    "object"
                ]
            },
            "create": {
                "token": [
                    "typing.Any"
                ],
                "return": [],
                "markdown": [
                    "str"
                ]
            },
            "on_enter": {
                "return": [
                    "None"
                ],
                "context": []
            }
        },
        "ImageItem": {
            "__init__": {
                "destination": [],
                "hyperlinks": [
                    "Dict[str, str]",
                    "list",
                    "dict",
                    "object",
                    "List[str]",
                    "set"
                ],
                "return": []
            },
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "Console",
                    "console"
                ],
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "text",
                    "Generator[typing.Any, None, None]",
                    "typing.Any",
                    "Generator[str, None, None]",
                    "typing.Generator[str, None, None]"
                ],
                "options": [
                    "dict",
                    "rich.console.ConsoleOptions",
                    "ConsoleOptions",
                    "options",
                    "Any"
                ]
            },
            "create": {
                "token": [],
                "return": [],
                "markdown": []
            },
            "on_enter": {
                "return": [],
                "context": [
                    "UserContext"
                ]
            }
        },
        "Link": {
            "__init__": {
                "text": [],
                "href": []
            },
            "create": {
                "token": [
                    "typing.Any",
                    "content",
                    "Token"
                ],
                "return": [],
                "markdown": []
            }
        },
        "ListElement": {
            "__init__": {
                "list_start": [
                    "typing.Any"
                ],
                "list_type": [],
                "return": []
            },
            "__rich_console__": {
                "console": [
                    "Console",
                    "rich.console.Console",
                    "typing.Any"
                ],
                "return": [],
                "options": [
                    "dict"
                ]
            },
            "create": {
                "return": [],
                "markdown": [],
                "token": [
                    "attrs",
                    "Token",
                    "typing.Any",
                    "get"
                ]
            },
            "on_child_close": {
                "return": [
                    "bool"
                ],
                "child": [],
                "context": []
            }
        },
        "Markdown": {
            "__init__": {
                "return": [
                    "None"
                ],
                "code_theme": [],
                "hyperlinks": [
                    "bool"
                ],
                "inline_code_lexer": [],
                "inline_code_theme": [
                    "str"
                ],
                "style": [
                    "str"
                ],
                "justify": [],
                "markup": []
            },
            "__rich_console__": {
                "options": [],
                "console": [
                    "typing.Any"
                ],
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "yield",
                    "None",
                    "console.render"
                ]
            },
            "_flatten_tokens": {
                "return": [
                    "Iterator[Token]",
                    "Generator[Token, None, None]"
                ],
                "tokens": [
                    "list[Token]",
                    "Iterable[Token]"
                ]
            },
            "global": {
                "elements": [
                    "dict[str, type[MarkdownElement]]",
                    "elements",
                    "MarkdownElement",
                    "Heading",
                    "type[MarkdownElement]",
                    "Markdown"
                ]
            }
        },
        "ListItem": {
            "__init__": {
                "return": []
            },
            "on_child_close": {
                "child": [
                    "typing.Any",
                    "self.elements"
                ],
                "context": [
                    "context"
                ],
                "return": []
            },
            "render_bullet": {
                "return": [],
                "options": [
                    "dict[str, typing.Any]"
                ],
                "console": [
                    "typing.Any",
                    "Console",
                    "MarkdownConsole",
                    "Renderer",
                    "TerminalRenderer",
                    "ConsoleRenderer",
                    "CustomConsole",
                    "console"
                ]
            },
            "render_number": {
                "last_number": [
                    "int"
                ],
                "console": [],
                "number": [],
                "options": [],
                "return": []
            }
        },
        "MarkdownContext": {
            "__init__": {
                "return": [
                    "None"
                ],
                "inline_code_theme": [],
                "options": [
                    "dict",
                    "typing.Any",
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "style": [],
                "console": [],
                "inline_code_lexer": []
            },
            "enter_style": {
                "style_name": [
                    "str",
                    "typing.Any"
                ],
                "return": []
            },
            "leave_style": {
                "return": []
            },
            "on_text": {
                "return": [
                    "None"
                ],
                "text": [
                    "str"
                ],
                "node_type": [
                    "str",
                    "typing.Optional[str]"
                ]
            }
        },
        "TableBodyElement": {
            "__init__": {
                "return": []
            },
            "on_child_close": {
                "return": [
                    "bool"
                ],
                "child": [
                    "child",
                    "typing.Any"
                ],
                "context": [
                    "context",
                    "Context"
                ]
            }
        },
        "Paragraph": {
            "__init__": {
                "justify": [
                    "str",
                    "justify",
                    "tk.CENTER",
                    "tkinter.CENTER",
                    "int",
                    "tkinter"
                ],
                "return": []
            },
            "__rich_console__": {
                "console": [],
                "options": [
                    "dict",
                    "options",
                    "Any",
                    "ConsoleOptions",
                    "rich.console.ConsoleOptions"
                ],
                "return": []
            },
            "create": {
                "markdown": [
                    "justify",
                    "typing.Any",
                    "Config",
                    "create",
                    "str",
                    "markdown",
                    "cls",
                    "Val",
                    "markdown.Markdown"
                ],
                "token": [
                    "str"
                ],
                "return": []
            },
            "global": {
                "justify": []
            }
        },
        "TableElement": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "__rich_console__": {
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator[rich.table.Table, None, None]",
                    "table",
                    "Generator[Any, None, None]",
                    "Generator[typing.Any, None, None]"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "console",
                    "Console",
                    "rich",
                    "object"
                ],
                "options": []
            },
            "on_child_close": {
                "child": [
                    "typing.Union[TableHeaderElement, TableBodyElement]"
                ],
                "context": [
                    "context"
                ],
                "return": [
                    "bool"
                ]
            }
        },
        "TableHeaderElement": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "on_child_close": {
                "return": [
                    "bool"
                ],
                "context": [],
                "child": []
            }
        },
        "TableRowElement": {
            "__init__": {
                "return": []
            },
            "on_child_close": {
                "return": [
                    "bool"
                ],
                "context": [
                    "context",
                    "dict",
                    "Context"
                ],
                "child": []
            }
        },
        "TableDataElement": {
            "__init__": {
                "justify": [
                    "str",
                    "justify",
                    "tk.RIGHT",
                    "tkinter",
                    "integer",
                    "Text"
                ],
                "return": []
            },
            "create": {
                "markdown": [],
                "token": [
                    "str"
                ],
                "return": [
                    "justify",
                    "cls",
                    "create"
                ]
            },
            "on_text": {
                "return": [
                    "None"
                ],
                "context": [],
                "text": [
                    "Union[str, Text]",
                    "str"
                ]
            }
        },
        "HorizontalRule": {
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "Console"
                ],
                "return": [
                    "typing.Generator[Rule, None, None]"
                ],
                "options": [
                    "dict",
                    "rich.console.ConsoleOptions",
                    "options",
                    "rich",
                    "ConsoleOptions"
                ]
            }
        },
        "MarkdownElement": {
            "__rich_console__": {
                "return": [
                    "tuple",
                    "tuple[typing.Any, ...]"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "object",
                    "Console",
                    "rich"
                ],
                "options": []
            },
            "create": {
                "return": [
                    "cls"
                ],
                "token": [
                    "str"
                ],
                "markdown": []
            },
            "on_child_close": {
                "return": [
                    "bool"
                ],
                "child": [
                    "child"
                ],
                "context": [
                    "context",
                    "Context"
                ]
            },
            "global": {
                "new_line": []
            },
            "on_enter": {
                "context": [
                    "Context",
                    "UserContext",
                    "dict",
                    "object",
                    "typing",
                    "context"
                ],
                "return": []
            },
            "on_leave": {
                "return": [
                    "None"
                ],
                "context": [
                    "Context",
                    "UserContext",
                    "dict",
                    "object",
                    "context",
                    "collections.abc"
                ]
            },
            "on_text": {
                "return": [
                    "None"
                ],
                "text": [
                    "str"
                ],
                "context": [
                    "Context",
                    "object",
                    "dict"
                ]
            }
        },
        "TextElement": {
            "on_enter": {
                "context": [],
                "return": []
            },
            "on_leave": {
                "return": [
                    "None"
                ],
                "context": [
                    "typing.Any"
                ]
            },
            "on_text": {
                "return": [
                    "None"
                ],
                "text": [
                    "str",
                    "Union[str, Any]"
                ],
                "context": []
            }
        }
    },
    "rich.markup": {
        "Tag": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "global": {
                "parameters": [],
                "name": [
                    "str",
                    "name",
                    "Tag"
                ]
            }
        },
        "global": {
            "_parse": {
                "markup": [],
                "return": []
            },
            "render": {
                "markup": [
                    "str"
                ],
                "style": [
                    "str"
                ],
                "return": [],
                "emoji": [
                    "bool"
                ],
                "emoji_variant": [
                    "Optional[str]",
                    "str"
                ]
            },
            "escape": {
                "return": [],
                "markup": [
                    "str"
                ],
                "_escape": [
                    "typing.Callable",
                    "typing.Pattern",
                    "sub"
                ]
            }
        }
    },
    "rich.measure": {
        "Measurement": {
            "clamp": {
                "min_width": [
                    "Optional[int]"
                ],
                "max_width": [],
                "return": []
            },
            "get": {
                "renderable": [
                    "typing.Union[str, typing.Any]"
                ],
                "console": [],
                "return": [],
                "options": [
                    "markup",
                    "typing.Any",
                    "Options",
                    "options",
                    "Settings"
                ]
            },
            "with_maximum": {
                "width": [],
                "return": []
            },
            "normalize": {
                "return": [
                    "Measurement"
                ]
            },
            "with_minimum": {
                "width": [
                    "int"
                ],
                "return": [
                    "Measurement"
                ]
            },
            "global": {
                "minimum": [],
                "maximum": []
            }
        },
        "global": {
            "measure_renderables": {
                "return": [],
                "console": [],
                "renderables": [],
                "options": []
            }
        }
    },
    "rich.padding": {
        "Padding": {
            "__init__": {
                "expand": [
                    "bool"
                ],
                "style": [],
                "renderable": [
                    "typing.Any",
                    "renderable"
                ],
                "pad": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__rich_console__": {
                "console": [
                    "rich",
                    "Any"
                ],
                "options": [
                    "ConsoleOptions"
                ],
                "return": [
                    "typing.Iterable[str]"
                ]
            },
            "__rich_measure__": {
                "console": [
                    "Console",
                    "rich.console.Console"
                ],
                "options": [
                    "Any",
                    "object"
                ],
                "return": []
            },
            "indent": {
                "level": [],
                "return": [
                    "Padding",
                    "indent",
                    "renderable"
                ],
                "renderable": []
            },
            "unpack": {
                "pad": [
                    "typing.Union[int, typing.Sequence[int]]"
                ],
                "return": [
                    "typing.Tuple[int, int, int, int]",
                    "tuple[int, int, int, int]",
                    "typing.Union[typing.Tuple[int, int, int, int], typing.Tuple[typing.Any, typing.Any, typing.Any, typing.Any]]",
                    "unpack",
                    "tuple[typing.Any, typing.Any, typing.Any, typing.Any]",
                    "typing.Union[typing.Tuple[int, int, int, int], typing.Tuple[int, int]]"
                ]
            }
        }
    },
    "rich.pager": {
        "Pager": {
            "show": {
                "content": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "SystemPager": {
            "_pager": {
                "content": [
                    "str"
                ],
                "return": []
            },
            "show": {
                "content": [],
                "return": []
            }
        }
    },
    "rich.palette": {
        "Palette": {
            "__getitem__": {
                "return": [
                    "ColorTriplet"
                ],
                "number": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            },
            "__rich__": {
                "return": []
            },
            "__init__": {
                "colors": [
                    "typing.Any",
                    "list[str]",
                    "list[typing.Any]",
                    "colors",
                    "tuple[str, ...]"
                ]
            },
            "match": {
                "color": [
                    "tuple[int, int, int]"
                ],
                "return": []
            }
        },
        "ColorBox": {
            "__rich_console__": {
                "return": [
                    "typing.Generator[Segment, None, None]",
                    "typing.Iterator[Segment]"
                ],
                "console": [
                    "rich.console.Console",
                    "Console",
                    "console",
                    "typing.Any"
                ],
                "options": [
                    "int",
                    "ConsoleOptions",
                    "object",
                    "typing.Any",
                    "options",
                    "RichConsoleOptions"
                ]
            }
        }
    },
    "rich.panel": {
        "Panel": {
            "__init__": {
                "border_style": [],
                "return": [
                    "None",
                    "self"
                ],
                "expand": [
                    "bool"
                ],
                "box": [
                    "str",
                    "box",
                    "int",
                    "Enum"
                ],
                "padding": [
                    "Tuple[int, int]",
                    "tuple"
                ],
                "highlight": [],
                "style": [
                    "str"
                ],
                "subtitle": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]"
                ],
                "safe_box": [
                    "bool",
                    "Optional[Any]",
                    "Optional[bool]",
                    "Any"
                ],
                "subtitle_align": [
                    "str"
                ],
                "title_align": [
                    "str"
                ],
                "height": [],
                "title": [],
                "width": [],
                "renderable": [
                    "typing.Any",
                    "renderable"
                ]
            },
            "__rich_console__": {
                "return": [
                    "typing.Iterable[Segment]",
                    "Segment"
                ],
                "console": [
                    "rich.console.Console",
                    "Console",
                    "typing.Any"
                ],
                "options": []
            },
            "fit": {
                "border_style": [
                    "str"
                ],
                "padding": [
                    "tuple[int, int]"
                ],
                "height": [],
                "return": [
                    "cls"
                ],
                "box": [],
                "renderable": [
                    "typing.Any",
                    "Any",
                    "object",
                    "fit"
                ],
                "safe_box": [],
                "width": [
                    "typing.Optional[int]",
                    "Union[int, None]",
                    "typing.Optional[typing.Any]"
                ],
                "subtitle_align": [
                    "str"
                ],
                "subtitle": [
                    "typing.Optional[str]",
                    "typing.Optional[Any]",
                    "Optional[str]"
                ],
                "style": [],
                "highlight": [],
                "title": [
                    "typing.Optional[str]",
                    "typing.Optional[Any]"
                ],
                "title_align": [
                    "str"
                ]
            },
            "__rich_measure__": {
                "console": [
                    "Console",
                    "Any",
                    "rich.console.Console"
                ],
                "options": [
                    "object",
                    "Any"
                ],
                "return": []
            }
        }
    },
    "rich.pretty": {
        "Pretty": {
            "__init__": {
                "_object": [
                    "Any",
                    "object"
                ],
                "return": [],
                "indent_size": [
                    "int"
                ],
                "highlighter": [
                    "typing.Optional[Highlighter]"
                ],
                "max_string": [
                    "typing.Union[int, None]"
                ],
                "no_wrap": [
                    "bool"
                ],
                "max_length": [
                    "Optional[int]",
                    "int"
                ],
                "max_depth": [],
                "justify": [
                    "typing.Optional[bool]",
                    "typing.Optional[Any]",
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "indent_guides": [
                    "bool"
                ],
                "insert_line": [
                    "bool"
                ],
                "overflow": [],
                "margin": [
                    "int"
                ],
                "expand_all": []
            },
            "__rich_console__": {
                "return": [
                    "Generator[str, None, None]",
                    "str",
                    "generator"
                ],
                "options": [],
                "console": []
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "console": [
                    "rich.console.Console",
                    "Console",
                    "typing.Any",
                    "console",
                    "rich"
                ],
                "options": []
            }
        },
        "BrokenRepr": {
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "_get_attr_fields": {
                "return": [
                    "list[typing.Any]"
                ],
                "obj": []
            },
            "_get_braces_for_array": {
                "return": [
                    "tuple[str, str, str]"
                ],
                "_object": [
                    "typing.Any",
                    "typecode"
                ]
            },
            "_get_braces_for_defaultdict": {
                "return": [],
                "_object": [
                    "typing.DefaultDict",
                    "collections.defaultdict"
                ]
            },
            "_get_braces_for_deque": {
                "_object": [
                    "typing.Any",
                    "collections.deque"
                ],
                "return": [
                    "tuple[str, str, str]"
                ]
            },
            "_ipy_display_hook": {
                "return": [],
                "crop": [
                    "bool"
                ],
                "console": [
                    "Console",
                    "Optional[Console]",
                    "console",
                    "None",
                    "object",
                    "rich"
                ],
                "max_string": [
                    "int",
                    "Optional[int]"
                ],
                "max_depth": [],
                "indent_guides": [
                    "bool"
                ],
                "value": [
                    "Any",
                    "Union[JupyterRenderable, ConsoleRenderable, RichRenderable, Any]",
                    "ConsoleRenderable",
                    "Union[JupyterRenderable, ConsoleRenderable, RichRenderable, None]",
                    "RichRenderable",
                    "Pretty",
                    "value",
                    "JupyterRenderable",
                    "Union[JupyterRenderable, ConsoleRenderable, RichRenderable, None, Any]",
                    "object",
                    "Union[JupyterRenderable, ConsoleRenderable, RichRenderable, Any, None]",
                    "Optional[Union[JupyterRenderable, ConsoleRenderable, RichRenderable, Any]]"
                ],
                "expand_all": [],
                "max_length": [],
                "overflow": []
            },
            "_has_default_namedtuple_repr": {
                "obj": [
                    "typing.Any",
                    "typing.NamedTuple",
                    "object"
                ],
                "return": [
                    "bool"
                ]
            },
            "_is_attr_object": {
                "return": [
                    "bool"
                ],
                "obj": []
            },
            "_safe_isinstance": {
                "return": [
                    "bool"
                ],
                "class_or_tuple": [
                    "typing.Union[type, tuple[type, ...]]"
                ],
                "obj": [
                    "typing.Any"
                ]
            },
            "_is_dataclass_repr": {
                "return": [
                    "bool"
                ],
                "obj": []
            },
            "_is_namedtuple": {
                "return": [
                    "bool"
                ],
                "obj": [
                    "tuple",
                    "typing.Union[tuple, typing.NamedTuple]",
                    "typing.Any",
                    "typing.Union[typing.Tuple[typing.Any, ...], typing.NamedTuple]"
                ]
            },
            "global": {
                "_BRACES": []
            },
            "install": {
                "crop": [
                    "bool"
                ],
                "expand_all": [
                    "bool"
                ],
                "indent_guides": [],
                "return": [],
                "max_length": [],
                "max_string": [
                    "int"
                ],
                "max_depth": [
                    "Optional[unknown]",
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "overflow": [],
                "console": []
            },
            "is_expandable": {
                "return": [],
                "obj": [
                    "typing.Any"
                ]
            },
            "pprint": {
                "_object": [
                    "typing.Any",
                    "object"
                ],
                "expand_all": [],
                "max_depth": [],
                "max_string": [
                    "typing.Optional[int]"
                ],
                "max_length": [
                    "typing.Optional[int]"
                ],
                "indent_guides": [],
                "return": [],
                "console": [
                    "Optional[Console]",
                    "Console",
                    "typing.Optional[Console]",
                    "Optional[typing.Any]",
                    "typing.Any",
                    "rich.console.Console",
                    "typing.Optional[typing.Any]"
                ]
            },
            "pretty_repr": {
                "max_depth": [],
                "max_length": [
                    "typing.Optional[int]"
                ],
                "indent_size": [
                    "int"
                ],
                "max_width": [],
                "max_string": [],
                "_object": [],
                "return": [],
                "expand_all": []
            },
            "traverse": {
                "max_depth": [
                    "Optional[int]",
                    "int"
                ],
                "_object": [
                    "object",
                    "Any"
                ],
                "max_string": [
                    "int",
                    "Optional[int]"
                ],
                "return": [],
                "max_length": [
                    "typing.Optional[int]"
                ]
            }
        },
        "Node": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "check_length": {
                "return": [],
                "start_length": [
                    "int"
                ],
                "max_length": [
                    "int"
                ]
            },
            "global": {
                "is_tuple": [
                    "bool"
                ],
                "children": [
                    "list[Node]",
                    "children",
                    "List[Node]",
                    "Node"
                ],
                "close_brace": [],
                "empty": [
                    "str",
                    "empty",
                    "Node"
                ],
                "is_namedtuple": [
                    "bool",
                    "Node",
                    "traverse"
                ],
                "last": [
                    "bool",
                    "last",
                    "Node"
                ],
                "open_brace": [
                    "str",
                    "Node"
                ],
                "key_repr": [],
                "key_separator": [],
                "value_repr": [],
                "separator": [
                    "str",
                    "separator"
                ]
            },
            "iter_tokens": {
                "return": []
            },
            "render": {
                "indent_size": [
                    "int"
                ],
                "expand_all": [
                    "bool"
                ],
                "return": [],
                "max_width": [
                    "int"
                ]
            }
        },
        "_Line": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "check_length": {
                "return": [
                    "bool",
                    "node"
                ],
                "max_length": []
            },
            "expand": {
                "indent_size": [],
                "return": [
                    "None",
                    "line",
                    "expand",
                    "return",
                    "typing.Any",
                    "Generator[typing.Any, None, None]"
                ]
            },
            "global": {
                "expanded": [
                    "bool",
                    "expanded"
                ],
                "is_root": [],
                "last": [
                    "bool",
                    "last",
                    "expand",
                    "traverse"
                ],
                "node": [
                    "Node",
                    "node",
                    "traverse"
                ],
                "suffix": [
                    "str"
                ],
                "parent": [
                    "parent",
                    "expand",
                    "None"
                ],
                "text": [
                    "str",
                    "text",
                    "expand"
                ],
                "whitespace": [
                    "str",
                    "whitespace",
                    "expand"
                ]
            }
        },
        "Thing": {
            "__repr__": {
                "return": []
            }
        },
        "StockKeepingUnit": {
            "global": {
                "category": [
                    "str",
                    "category"
                ],
                "price": [
                    "float"
                ],
                "reviews": [
                    "list[str]",
                    "List[str]",
                    "reviews"
                ],
                "description": [],
                "name": [
                    "str",
                    "name",
                    "StockKeepingUnit"
                ]
            }
        }
    },
    "rich.progress": {
        "ProgressColumn": {
            "__call__": {
                "return": [],
                "task": [
                    "typing.Any",
                    "Task"
                ]
            },
            "__init__": {
                "return": [],
                "table_column": []
            },
            "get_table_column": {
                "return": [
                    "Column"
                ]
            },
            "global": {
                "max_refresh": [
                    "Optional[float]",
                    "None",
                    "ProgressColumn",
                    "typing.Optional[float]"
                ]
            },
            "render": {
                "return": [
                    "None",
                    "typing.Any",
                    "render"
                ],
                "task": []
            }
        },
        "Progress": {
            "__exit__": {
                "return": [],
                "exc_type": [
                    "typing.Optional[typing.Type[BaseException]]",
                    "None"
                ],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]",
                    "typing.Optional[object]"
                ],
                "exc_val": []
            },
            "__enter__": {
                "return": []
            },
            "__init__": {
                "return": [
                    "None",
                    "pass",
                    "transient"
                ],
                "auto_refresh": [
                    "bool"
                ],
                "disable": [],
                "console": [
                    "Console"
                ],
                "columns": [
                    "tuple",
                    "Iterable",
                    "Any",
                    "Tuple[ColumnT, ...]",
                    "Sequence",
                    "Iterable[Any]",
                    "Tuple[Any, ...]",
                    "Sequence[Any]"
                ],
                "expand": [
                    "bool"
                ],
                "speed_estimate_period": [
                    "float"
                ],
                "redirect_stdout": [
                    "bool"
                ],
                "get_time": [
                    "Callable[[], float]",
                    "typing.Callable[[], float]",
                    "Optional[Callable[[], float]]",
                    "or",
                    "typing.Callable"
                ],
                "redirect_stderr": [],
                "transient": [
                    "bool"
                ],
                "refresh_per_second": []
            },
            "add_task": {
                "description": [
                    "str"
                ],
                "completed": [],
                "total": [
                    "float"
                ],
                "fields": [],
                "return": [
                    "int"
                ],
                "visible": [],
                "start": []
            },
            "__rich__": {
                "return": []
            },
            "advance": {
                "return": [
                    "None"
                ],
                "advance": [
                    "int"
                ],
                "task_id": []
            },
            "get_default_columns": {
                "return": [
                    "tuple[TextColumn, BarColumn, TaskProgressColumn, TimeRemainingColumn]"
                ]
            },
            "get_renderables": {
                "return": []
            },
            "get_renderable": {
                "return": []
            },
            "make_tasks_table": {
                "return": [],
                "tasks": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "refresh": {
                "return": [
                    "None"
                ]
            },
            "remove_task": {
                "task_id": [
                    "str",
                    "int",
                    "Any",
                    "Union[str, int]"
                ],
                "return": []
            },
            "reset": {
                "completed": [
                    "int"
                ],
                "fields": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "visible": [
                    "Optional[typing.Any]",
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "Optional[bool]"
                ],
                "description": [],
                "start": [
                    "bool"
                ],
                "return": [],
                "task_id": [
                    "str"
                ],
                "total": [
                    "int"
                ]
            },
            "start_task": {
                "task_id": [
                    "typing.Any",
                    "typing.Hashable"
                ],
                "return": [
                    "None"
                ]
            },
            "stop": {
                "return": [
                    "None"
                ]
            },
            "start": {
                "return": []
            },
            "stop_task": {
                "return": [
                    "None"
                ],
                "task_id": []
            },
            "track": {
                "description": [
                    "str"
                ],
                "total": [
                    "Optional[float]"
                ],
                "completed": [
                    "int"
                ],
                "return": [],
                "sequence": [],
                "task_id": [],
                "update_period": []
            },
            "update": {
                "completed": [
                    "Optional[int]",
                    "Optional[Any]"
                ],
                "fields": [
                    "typing.Dict[typing.Any, typing.Any]",
                    "typing.Dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "refresh": [
                    "bool"
                ],
                "advance": [
                    "int",
                    "Optional[int]",
                    "Union[int, float]",
                    "float"
                ],
                "task_id": [],
                "visible": [],
                "return": [],
                "total": [],
                "description": []
            },
            "wrap_file": {
                "description": [
                    "str"
                ],
                "file": [
                    "Any",
                    "file",
                    "FileManager",
                    "IO[Any]",
                    "object",
                    "TemporaryDirectory"
                ],
                "task_id": [
                    "str",
                    "Optional[str]"
                ],
                "total": [],
                "return": []
            }
        },
        "_TrackThread": {
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self",
                    "typing.Any",
                    "ClassName"
                ]
            },
            "__exit__": {
                "exc_tb": [
                    "typing.Optional[types.TracebackType]"
                ],
                "exc_val": [],
                "return": [],
                "exc_type": []
            },
            "__init__": {
                "task_id": [
                    "str"
                ],
                "progress": [
                    "float",
                    "typing.Union[int, float]",
                    "typing.Any",
                    "int",
                    "typing.Union[float]",
                    "typing.Union[float, int]",
                    "object"
                ],
                "update_period": []
            },
            "run": {
                "return": [
                    "None"
                ]
            }
        },
        "_ReadContext": {
            "__enter__": {
                "return": [
                    "typing.Any",
                    "typing.IO",
                    "TextIO",
                    "io.TextIOWrapper",
                    "self",
                    "self.reader"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]"
                ],
                "exc_type": [
                    "typing.Optional[typing.Type[BaseException]]"
                ],
                "exc_val": []
            },
            "__init__": {
                "return": [
                    "None",
                    "self"
                ],
                "progress": [],
                "reader": [
                    "reader"
                ]
            }
        },
        "_Reader": {
            "__enter__": {
                "return": []
            },
            "__exit__": {
                "exc_val": [
                    "typing.Optional[BaseException]"
                ],
                "exc_tb": [],
                "exc_type": [
                    "typing.Optional[typing.Type[BaseException]]",
                    "None"
                ],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [],
                "task": [
                    "TaskInfo",
                    "Any",
                    "TaskStoreSettings",
                    "str"
                ],
                "progress": [],
                "close_handle": [],
                "handle": [
                    "typing.Any",
                    "handle",
                    "self.handle",
                    "object"
                ]
            },
            "__next__": {
                "return": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "self",
                    "typing.Iterator",
                    "Self",
                    "MyClass",
                    "ElementType",
                    "ClassName"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "fileno": {
                "return": [
                    "int"
                ]
            },
            "isatty": {
                "return": [
                    "bool"
                ]
            },
            "read": {
                "return": [],
                "size": []
            },
            "readinto": {
                "b": [
                    "bytearray",
                    "memoryview",
                    "handle"
                ]
            },
            "readline": {
                "size": [],
                "return": []
            },
            "readlines": {
                "return": [],
                "hint": [
                    "int"
                ]
            },
            "readable": {
                "return": []
            },
            "seek": {
                "offset": [
                    "int"
                ],
                "whence": [
                    "int"
                ],
                "return": []
            },
            "tell": {
                "return": [
                    "int"
                ]
            },
            "seekable": {
                "return": []
            },
            "writable": {
                "return": [
                    "bool"
                ]
            },
            "write": {
                "s": [
                    "str",
                    "typing.Any",
                    "typing.Union[str, bytes]"
                ],
                "return": [
                    "None"
                ]
            },
            "writelines": {
                "return": [
                    "None"
                ],
                "lines": []
            }
        },
        "BarColumn": {
            "__init__": {
                "bar_width": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "style": [
                    "str"
                ],
                "table_column": [
                    "typing.Optional[typing.Any]"
                ],
                "finished_style": [],
                "complete_style": [],
                "pulse_style": []
            },
            "render": {
                "return": [
                    "ProgressBar",
                    "urwid"
                ],
                "task": []
            }
        },
        "DownloadColumn": {
            "__init__": {
                "return": [
                    "None"
                ],
                "binary_units": [
                    "bool"
                ],
                "table_column": [
                    "Optional[Any]",
                    "typing.Optional[typing.Any]"
                ]
            },
            "render": {
                "return": [
                    "Text"
                ],
                "task": [
                    "Task"
                ]
            }
        },
        "MofNCompleteColumn": {
            "__init__": {
                "table_column": [
                    "Optional[Any]",
                    "Optional[Unknown]",
                    "None"
                ],
                "separator": []
            },
            "render": {
                "return": [
                    "Text"
                ],
                "task": [
                    "typing.Any",
                    "Task",
                    "task",
                    "total",
                    "completed",
                    "task.total",
                    "render"
                ]
            }
        },
        "SpinnerColumn": {
            "__init__": {
                "speed": [
                    "float"
                ],
                "finished_text": [
                    "Union[str, Text]",
                    "str"
                ],
                "spinner_name": [],
                "table_column": [
                    "Optional[Any]",
                    "Optional[Unknown]",
                    "None"
                ],
                "style": [
                    "str"
                ]
            },
            "render": {
                "task": [
                    "typing.Any",
                    "Any",
                    "finished",
                    "Task"
                ],
                "return": [
                    "str"
                ]
            },
            "set_spinner": {
                "return": [
                    "None"
                ],
                "spinner_name": [],
                "speed": [],
                "spinner_style": []
            }
        },
        "RenderableColumn": {
            "__init__": {
                "table_column": [
                    "Optional[Any]"
                ],
                "renderable": [
                    "str"
                ]
            },
            "render": {
                "task": [
                    "typing.Any",
                    "task"
                ],
                "return": [
                    "typing.Any"
                ]
            }
        },
        "TaskProgressColumn": {
            "__init__": {
                "return": [
                    "None"
                ],
                "justify": [
                    "str"
                ],
                "markup": [
                    "bool"
                ],
                "show_speed": [],
                "highlighter": [
                    "Any",
                    "Optional[Callable]",
                    "Optional[Highlighter]",
                    "None",
                    "highlighter",
                    "Optional[Any]"
                ],
                "style": [],
                "text_format_no_percentage": [
                    "str"
                ],
                "text_format": [
                    "str"
                ],
                "table_column": []
            },
            "render": {
                "task": [
                    "Task"
                ],
                "return": []
            },
            "render_speed": {
                "return": [],
                "speed": [
                    "typing.Optional[int]",
                    "typing.Optional[typing.Union[int, float]]",
                    "int"
                ]
            }
        },
        "TextColumn": {
            "__init__": {
                "highlighter": [],
                "justify": [],
                "return": [
                    "None"
                ],
                "text_format": [
                    "str"
                ],
                "table_column": [
                    "Union[Column, None]",
                    "Union[None, Column]",
                    "typing.Optional[Column]",
                    "typing.Union[Column, None]",
                    "Optional[Column]"
                ],
                "style": [],
                "markup": []
            },
            "render": {
                "return": [
                    "typing.Any",
                    "str"
                ],
                "task": []
            }
        },
        "TimeRemainingColumn": {
            "__init__": {
                "compact": [],
                "elapsed_when_finished": [
                    "bool"
                ],
                "table_column": [
                    "Optional[Any]",
                    "typing.Optional[typing.Any]",
                    "Optional[TableColumn]"
                ]
            },
            "render": {
                "return": [
                    "Text",
                    "style"
                ],
                "task": [
                    "Task",
                    "typing.Any",
                    "ProgressTask"
                ]
            }
        },
        "Task": {
            "_reset": {
                "return": []
            },
            "get_time": {
                "return": []
            },
            "global": {
                "_get_time": [
                    "GetTimeCallable",
                    "Task",
                    "float",
                    "Callable[[], float]"
                ],
                "_lock": [
                    "RLock",
                    "threading.RLock",
                    "threading",
                    "Progress"
                ],
                "completed": [
                    "float",
                    "int",
                    "Task",
                    "completed",
                    "Optional[float]",
                    "update",
                    "Progress",
                    "reset",
                    "Union[int, float]"
                ],
                "_progress": [
                    "Deque[ProgressSample]",
                    "ProgressSample",
                    "collections.deque[ProgressSample]",
                    "completed",
                    "deque[ProgressSample]",
                    "collections",
                    "Task",
                    "deque"
                ],
                "finished_speed": [
                    "Optional[float]",
                    "None",
                    "Task",
                    "float"
                ],
                "fields": [
                    "Dict[str, typing.Any]",
                    "fields",
                    "Dict[str, Any]",
                    "Progress",
                    "update",
                    "Any"
                ],
                "description": [
                    "str",
                    "description",
                    "track",
                    "open",
                    "Optional[str]"
                ],
                "start_time": [
                    "Optional[float]",
                    "None",
                    "float"
                ],
                "id": [],
                "visible": [
                    "bool",
                    "Optional[bool]",
                    "update",
                    "Task",
                    "visible",
                    "None",
                    "True",
                    "Union[bool, None]"
                ],
                "stop_time": [
                    "None",
                    "Optional[float]"
                ],
                "finished_time": [],
                "total": [
                    "total",
                    "Optional[float]",
                    "open",
                    "reset",
                    "None",
                    "track",
                    "update",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "ProgressSample": {
            "global": {
                "completed": [
                    "float",
                    "int",
                    "completed",
                    "reset",
                    "update",
                    "Optional[float]",
                    "Union[int, float]",
                    "Task",
                    "Progress",
                    "percentage"
                ],
                "timestamp": [
                    "float",
                    "ProgressSample",
                    "ProgressColumn"
                ]
            }
        },
        "FileSizeColumn": {
            "render": {
                "return": [
                    "Text"
                ],
                "task": [
                    "Task"
                ]
            }
        },
        "TransferSpeedColumn": {
            "render": {
                "return": [],
                "task": []
            }
        },
        "TotalFileSizeColumn": {
            "render": {
                "return": [
                    "Text"
                ],
                "task": []
            }
        },
        "TimeElapsedColumn": {
            "render": {
                "return": [
                    "Text"
                ],
                "task": []
            }
        },
        "global": {
            "track": {
                "auto_refresh": [
                    "bool"
                ],
                "description": [
                    "str"
                ],
                "complete_style": [
                    "str"
                ],
                "disable": [],
                "refresh_per_second": [
                    "typing.Optional[int]",
                    "int"
                ],
                "finished_style": [],
                "get_time": [
                    "Callable[[], float]",
                    "Callable[[], Union[float, int]]"
                ],
                "console": [],
                "sequence": [],
                "transient": [
                    "bool"
                ],
                "return": [],
                "total": [
                    "Optional[int]",
                    "Optional[float]",
                    "typing.Optional[int]",
                    "Union[int, None]"
                ],
                "update_period": [],
                "pulse_style": [],
                "completed": [],
                "show_speed": [],
                "style": []
            },
            "wrap_file": {
                "disable": [
                    "bool"
                ],
                "complete_style": [
                    "str"
                ],
                "console": [
                    "Any",
                    "object",
                    "typing.Any",
                    "rich.console.Console",
                    "Optional[Console]",
                    "Console"
                ],
                "description": [
                    "str"
                ],
                "finished_style": [
                    "str"
                ],
                "get_time": [
                    "typing.Callable[[], float]",
                    "typing.Callable",
                    "Optional[Callable[[], float]]",
                    "Optional[Callable]"
                ],
                "refresh_per_second": [
                    "typing.Optional[int]",
                    "int"
                ],
                "style": [
                    "str"
                ],
                "pulse_style": [],
                "transient": [
                    "bool"
                ],
                "total": [],
                "return": [
                    "reader"
                ],
                "auto_refresh": [],
                "file": []
            }
        }
    },
    "rich.progress_bar": {
        "ProgressBar": {
            "__init__": {
                "complete_style": [
                    "str"
                ],
                "pulse": [
                    "bool",
                    "typing.Any"
                ],
                "pulse_style": [
                    "str"
                ],
                "total": [
                    "float"
                ],
                "completed": [],
                "animation_time": [],
                "finished_style": [],
                "width": [],
                "style": []
            },
            "__rich_console__": {
                "options": [
                    "RichConsoleOptions",
                    "typing.Any",
                    "Any",
                    "ConsoleOptions",
                    "self.width"
                ],
                "console": [
                    "console",
                    "rich",
                    "rich.console.Console",
                    "Console",
                    "RichConsole"
                ],
                "return": []
            },
            "_get_pulse_segments": {
                "ascii": [],
                "return": [
                    "list[Segment]",
                    "list[typing.Any]",
                    "list"
                ],
                "back_style": [
                    "color",
                    "Style",
                    "Segment",
                    "typing.Any",
                    "rich.style.Style",
                    "Any"
                ],
                "no_color": [],
                "fore_style": [
                    "Style",
                    "color",
                    "OneDarkStyle",
                    "BlackWhiteStyle",
                    "Segment",
                    "ColorTriplet"
                ],
                "color_system": []
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "options": [
                    "rich.console.Options",
                    "MeasurementOptions",
                    "Options",
                    "rich.console.ConsoleOptions",
                    "Measurement",
                    "RichOptions",
                    "ConsoleOptions",
                    "rich",
                    "object"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "console",
                    "Console",
                    "rich"
                ]
            },
            "_render_pulse": {
                "return": [
                    "generator"
                ],
                "ascii": [],
                "console": [
                    "console",
                    "Console",
                    "Track"
                ],
                "width": [
                    "int"
                ]
            },
            "update": {
                "completed": [
                    "typing.Any",
                    "float",
                    "int"
                ],
                "total": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "rich.prompt": {
        "InvalidResponse": {
            "__init__": {
                "return": [],
                "message": [
                    "str"
                ]
            },
            "__rich__": {
                "return": [
                    "typing.Any",
                    "str"
                ]
            }
        },
        "PromptBase": {
            "__init__": {
                "return": [
                    "None"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "console": [
                    "Console",
                    "Optional[Console]",
                    "typing.Any",
                    "console"
                ],
                "password": [],
                "choices": [],
                "show_choices": [],
                "prompt": [
                    "str",
                    "Union[str, Text]",
                    "Text",
                    "Union[str, Any]",
                    "isinstance"
                ],
                "show_default": [
                    "bool"
                ]
            },
            "check_choice": {
                "value": [
                    "str"
                ],
                "return": []
            },
            "get_input": {
                "return": [
                    "str"
                ],
                "prompt": [
                    "str"
                ],
                "stream": [],
                "console": [
                    "Console",
                    "rich.console.Console",
                    "object",
                    "cls"
                ],
                "password": [
                    "bool"
                ]
            },
            "make_prompt": {
                "return": [
                    "list"
                ],
                "default": []
            },
            "on_validate_error": {
                "error": [
                    "typing.Union[str, Exception]",
                    "Exception",
                    "typing.Union[Exception, str]",
                    "str"
                ],
                "value": [
                    "typing.Any",
                    "value"
                ],
                "return": []
            },
            "global": {
                "response_type": [
                    "type",
                    "FloatPrompt",
                    "bool",
                    "Confirm",
                    "float",
                    "str"
                ],
                "choices": []
            },
            "pre_prompt": {
                "return": []
            },
            "process_response": {
                "return": [
                    "Any"
                ],
                "value": [
                    "str"
                ]
            },
            "render_default": {
                "default": [
                    "str"
                ],
                "return": []
            }
        },
        "Confirm": {
            "process_response": {
                "return": [
                    "bool"
                ],
                "value": []
            },
            "global": {
                "choices": [
                    "choices",
                    "None",
                    "Optional[List[str]]",
                    "PromptBase"
                ]
            },
            "render_default": {
                "return": [],
                "default": [
                    "bool",
                    "no"
                ]
            }
        }
    },
    "rich.protocol": {
        "global": {
            "rich_cast": {
                "renderable": [
                    "typing.Any",
                    "typing.Union[typing.Any, rich.console.RenderableType]"
                ],
                "return": []
            },
            "is_renderable": {
                "return": [],
                "check_object": []
            }
        }
    },
    "rich.region": {
        "Region": {
            "global": {
                "height": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "x": []
            }
        }
    },
    "rich.rule": {
        "Rule": {
            "__init__": {
                "characters": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "title": [
                    "str"
                ],
                "style": [],
                "return": [
                    "None"
                ],
                "align": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__rich_console__": {
                "console": [
                    "rich.console.Console",
                    "Console"
                ],
                "options": [
                    "typing.Any",
                    "rich.console.ConsoleOptions"
                ],
                "return": []
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "options": [
                    "dict",
                    "Any",
                    "Dict",
                    "ConsoleOptions",
                    "Options",
                    "rich.console.MeasurementOptions",
                    "rich",
                    "object",
                    "options"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "rich",
                    "console",
                    "Console"
                ]
            },
            "_rule_line": {
                "width": [
                    "int"
                ],
                "return": [
                    "RuleText"
                ],
                "chars_len": [
                    "int"
                ]
            }
        }
    },
    "rich.repr": {
        "Foo": {
            "__rich_repr__": {
                "return": []
            }
        }
    },
    "rich.scope": {
        "global": {
            "render_scope": {
                "sort_keys": [
                    "bool"
                ],
                "max_string": [],
                "title": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "Panel"
                ],
                "scope": [],
                "max_length": [],
                "indent_guides": []
            },
            "test": {
                "return": [
                    "None"
                ],
                "foo": [
                    "typing.Any",
                    "foo"
                ],
                "bar": []
            }
        }
    },
    "rich.screen": {
        "Screen": {
            "__init__": {
                "application_mode": [
                    "bool"
                ],
                "style": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]",
                    "Optional[str]",
                    "str"
                ],
                "return": [
                    "None"
                ],
                "renderables": []
            },
            "__rich_console__": {
                "console": [],
                "return": [],
                "options": [
                    "rich.console.ConsoleOptions",
                    "ConsoleOptions",
                    "typing.Any"
                ]
            },
            "global": {
                "renderable": []
            }
        }
    },
    "rich.segment": {
        "Segment": {
            "__bool__": {
                "return": []
            },
            "_split_cells": {
                "return": [],
                "segment": [
                    "control",
                    "segment"
                ],
                "cut": []
            },
            "adjust_line_length": {
                "length": [
                    "int"
                ],
                "return": [
                    "str"
                ],
                "line": [
                    "list[typing.Any]",
                    "line"
                ],
                "style": [
                    "Optional[str]",
                    "Optional[Any]",
                    "str"
                ],
                "pad": []
            },
            "align_bottom": {
                "height": [
                    "int"
                ],
                "lines": [],
                "new_lines": [
                    "bool"
                ],
                "return": [
                    "list[typing.Any]",
                    "list",
                    "list[str]",
                    "list[list[str]]"
                ],
                "cls": [
                    "ClassName",
                    "cls",
                    "Self",
                    "Type[Any]",
                    "Type[ClassName]",
                    "typing.Type[typing.Any]",
                    "typing.Type[Any]",
                    "type"
                ],
                "width": [
                    "int"
                ],
                "style": []
            },
            "__rich_repr__": {
                "return": []
            },
            "align_middle": {
                "height": [
                    "int"
                ],
                "return": [
                    "list[list[str]]",
                    "list[typing.Any]",
                    "list[str]",
                    "list[list[typing.Any]]",
                    "list",
                    "lines",
                    "list[list[Any]]",
                    "list[list]"
                ],
                "width": [],
                "style": [],
                "cls": [],
                "lines": [],
                "new_lines": []
            },
            "align_top": {
                "return": [
                    "list[typing.Any]",
                    "list[list[str]]",
                    "list",
                    "list[str]"
                ],
                "cls": [
                    "ClassName",
                    "Self",
                    "Type[Any]",
                    "Type[ClassName]",
                    "cls",
                    "typing.Type[Any]",
                    "typing.Type[typing.Any]"
                ],
                "lines": [
                    "list[list]",
                    "list[list[str]]"
                ],
                "width": [],
                "new_lines": [
                    "bool"
                ],
                "style": [],
                "height": []
            },
            "apply_style": {
                "return": [],
                "post_style": [],
                "segments": [],
                "style": []
            },
            "divide": {
                "return": [
                    "yield",
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator[list[typing.Any], None, None]"
                ],
                "segments": [
                    "typing.Iterable[Segment]"
                ],
                "cuts": []
            },
            "filter_control": {
                "return": [
                    "iterator",
                    "filter",
                    "typing.Iterator[typing.Any]",
                    "filter[typing.Any]",
                    "filterfalse[typing.Any]",
                    "filterfalse",
                    "iterator[typing.Any]"
                ],
                "segments": [],
                "is_control": [
                    "bool"
                ]
            },
            "get_line_length": {
                "return": [
                    "int"
                ],
                "line": [
                    "list[tuple[typing.Any, typing.Any, typing.Any]]",
                    "Iterable[tuple[typing.Any, typing.Any, typing.Any]]"
                ]
            },
            "get_shape": {
                "return": [
                    "tuple[int, int]",
                    "tuple[typing.Any, int]"
                ],
                "lines": [
                    "typing.Iterable[str]",
                    "typing.Sequence[typing.Any]",
                    "typing.Sequence[str]"
                ]
            },
            "global": {
                "text": [
                    "Text",
                    "text"
                ],
                "control": [],
                "style": [
                    "Optional[Style]",
                    "style",
                    "None"
                ]
            },
            "remove_color": {
                "return": [
                    "Generator[cls, None, None]",
                    "generator[cls]",
                    "cls"
                ],
                "segments": []
            },
            "line": {
                "return": []
            },
            "set_shape": {
                "height": [
                    "Optional[int]"
                ],
                "lines": [
                    "list[str]"
                ],
                "new_lines": [
                    "bool"
                ],
                "width": [],
                "style": [],
                "return": [
                    "list[str]",
                    "lines"
                ]
            },
            "simplify": {
                "segments": [
                    "Iterable[typing.Any]"
                ],
                "return": []
            },
            "split_cells": {
                "cut": [],
                "return": [
                    "tuple[Segment, Segment]",
                    "typing.Union[typing.Tuple[Segment, Segment], typing.Any]",
                    "typing.Tuple[Segment, Segment]",
                    "tuple",
                    "typing.Union[tuple[Segment, Segment], typing.Any]",
                    "tuple[typing.Any, typing.Any]"
                ]
            },
            "split_and_crop_lines": {
                "include_new_lines": [
                    "bool"
                ],
                "style": [],
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator[str, None, None]",
                    "yield"
                ],
                "segments": [],
                "length": [],
                "pad": []
            },
            "split_lines": {
                "segments": [
                    "typing.Iterable[Segment]",
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "strip_links": {
                "return": [
                    "cls",
                    "typing.Generator[typing.Union[segment, cls], None, None]",
                    "yield",
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator[Segment, None, None]",
                    "typing.Generator[typing.Union[typing.Any, cls], None, None]",
                    "segment.style"
                ],
                "segments": [
                    "typing.Iterable[Segment]"
                ]
            },
            "strip_styles": {
                "return": [
                    "typing.Generator[cls, None, None]",
                    "cls",
                    "typing.Iterator[typing.Any]"
                ],
                "segments": [
                    "typing.Iterable[typing.Tuple[typing.Any, typing.Any, typing.Any]]",
                    "typing.Iterable[typing.Tuple[str, typing.Any, typing.Any]]"
                ]
            }
        },
        "SegmentLines": {
            "__init__": {
                "lines": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "new_lines": []
            },
            "__rich_console__": {
                "return": [],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "Console",
                    "rich",
                    "console"
                ],
                "options": []
            }
        },
        "Segments": {
            "__init__": {
                "new_lines": [],
                "segments": [
                    "Iterable",
                    "Iterable[Any]",
                    "Iterable[str]"
                ],
                "return": []
            },
            "__rich_console__": {
                "options": [
                    "dict",
                    "options",
                    "ConsoleOptions",
                    "Any",
                    "rich.console.ConsoleOptions"
                ],
                "return": [],
                "console": []
            }
        }
    },
    "rich.spinner": {
        "Spinner": {
            "__init__": {
                "return": [
                    "None"
                ],
                "speed": [
                    "float"
                ],
                "name": [
                    "str"
                ],
                "text": [],
                "style": []
            },
            "__rich_console__": {
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "render"
                ],
                "options": [],
                "console": []
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "options": [
                    "typing.Any",
                    "dict[str, typing.Any]",
                    "dict",
                    "rich.console.Options",
                    "dict[typing.Any, typing.Any]",
                    "rich.console.ConsoleOptions",
                    "text",
                    "typing.Dict[str, typing.Any]"
                ],
                "console": []
            },
            "update": {
                "speed": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "text": [
                    "str"
                ],
                "style": [
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "Optional[Any]",
                    "Optional[Style]",
                    "typing.Optional[Any]"
                ]
            },
            "render": {
                "time": [
                    "float"
                ],
                "return": []
            }
        }
    },
    "rich.status": {
        "Status": {
            "__exit__": {
                "exc_tb": [
                    "typing.Optional[types.TracebackType]",
                    "typing"
                ],
                "exc_val": [
                    "typing.Optional[BaseException]"
                ],
                "exc_type": [],
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "spinner": [
                    "str"
                ],
                "console": [
                    "Optional[Console]",
                    "rich.console.Console"
                ],
                "refresh_per_second": [
                    "float"
                ],
                "spinner_style": [
                    "str"
                ],
                "status": [],
                "speed": [
                    "float"
                ]
            },
            "stop": {
                "return": [
                    "None"
                ]
            },
            "__enter__": {
                "return": [
                    "Self",
                    "ClassName",
                    "typing.Self",
                    "MyClass"
                ]
            },
            "update": {
                "speed": [
                    "float",
                    "Optional[float]",
                    "Optional[str]",
                    "typing.Any"
                ],
                "spinner": [
                    "Optional[Spinner]",
                    "Spinner"
                ],
                "return": [
                    "None"
                ],
                "spinner_style": [],
                "status": []
            },
            "start": {
                "return": [
                    "None"
                ]
            },
            "__rich__": {
                "return": []
            }
        }
    },
    "rich.style": {
        "Style": {
            "__add__": {
                "return": [
                    "Style",
                    "typing.Any",
                    "style"
                ],
                "style": [
                    "style",
                    "str",
                    "Style"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Style"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "__init__": {
                "color": [
                    "typing.Optional[str]"
                ],
                "blink": [
                    "bool"
                ],
                "conceal": [
                    "bool"
                ],
                "blink2": [
                    "bool",
                    "True",
                    "Optional[bool]"
                ],
                "dim": [
                    "bool"
                ],
                "bold": [
                    "bool",
                    "None"
                ],
                "bgcolor": [
                    "str",
                    "typing.Optional[str]",
                    "typing.Optional[typing.Union[str, int]]"
                ],
                "encircle": [
                    "bool",
                    "Optional[bool]",
                    "None"
                ],
                "reverse": [],
                "underline": [
                    "bool"
                ],
                "overline": [
                    "bool",
                    "None",
                    "Optional[bool]"
                ],
                "meta": [
                    "typing.Any",
                    "dict[str, typing.Any]"
                ],
                "strike": [
                    "bool",
                    "Optional[bool]",
                    "strike"
                ],
                "underline2": [],
                "italic": [],
                "frame": [],
                "link": []
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__ne__": {
                "return": [],
                "other": []
            },
            "__rich_repr__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_add": {
                "return": [],
                "style": [
                    "Style",
                    "typing.Optional[Style]"
                ]
            },
            "__str__": {
                "return": []
            },
            "_make_ansi_codes": {
                "color_system": [
                    "typing.Any"
                ],
                "return": [
                    "typing.Any",
                    "dict[str, str]",
                    "str"
                ]
            },
            "chain": {
                "return": [
                    "typing.Any"
                ],
                "styles": [
                    "typing.Iterable[typing.Any]",
                    "tuple[typing.Any, ...]",
                    "tuple[typing.Any]",
                    "typing.Tuple[typing.Any, ...]",
                    "typing.Any"
                ]
            },
            "clear_meta_and_links": {
                "return": [
                    "Style",
                    "typing.Union[typing.Any, Style]",
                    "typing.Union[Style, typing.Any]"
                ]
            },
            "combine": {
                "return": [
                    "typing.Any",
                    "styles",
                    "typing.Union[int, float]"
                ],
                "styles": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "copy": {
                "return": []
            },
            "get_html_style": {
                "return": [
                    "str"
                ],
                "theme": []
            },
            "from_color": {
                "color": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "str",
                    "None",
                    "color"
                ],
                "bgcolor": [],
                "return": []
            },
            "from_meta": {
                "return": [
                    "Style"
                ],
                "meta": []
            },
            "global": {
                "_attributes": [],
                "_meta": [],
                "_null": [
                    "bool",
                    "False",
                    "Style"
                ],
                "_hash": [
                    "Optional[int]",
                    "None"
                ],
                "_set_attributes": [
                    "int",
                    "Style",
                    "sum",
                    "False"
                ],
                "_bgcolor": [],
                "_color": [
                    "Optional[Color]",
                    "None"
                ]
            },
            "normalize": {
                "return": [
                    "str"
                ],
                "style": [
                    "str"
                ]
            },
            "on": {
                "handlers": [
                    "Dict[str, typing.Any]"
                ],
                "return": [
                    "cls"
                ],
                "meta": []
            },
            "null": {
                "return": [
                    "typing.Any",
                    "Style",
                    "Any",
                    "NullStyle"
                ]
            },
            "parse": {
                "style_definition": [
                    "str"
                ],
                "return": []
            },
            "pick_first": {
                "return": [
                    "typing.Any"
                ],
                "values": [
                    "tuple[typing.Any, ...]"
                ]
            },
            "render": {
                "text": [],
                "color_system": [
                    "ColorSystem",
                    "typing.Any",
                    "Enum"
                ],
                "return": [
                    "str"
                ],
                "legacy_windows": []
            },
            "test": {
                "return": [
                    "None"
                ],
                "text": [
                    "Optional[str]",
                    "None"
                ]
            },
            "update_link": {
                "return": [
                    "Style"
                ],
                "link": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "_Bit": {
            "__get__": {
                "return": [
                    "typing.Optional[bool]",
                    "Optional[bool]"
                ],
                "obj": [
                    "typing.Any"
                ],
                "objtype": []
            },
            "__init__": {
                "bit_no": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "StyleStack": {
            "__init__": {
                "default_style": [
                    "typing.Any",
                    "Style"
                ],
                "return": []
            },
            "__repr__": {
                "return": []
            },
            "push": {
                "return": [
                    "None"
                ],
                "style": [
                    "str",
                    "style",
                    "list",
                    "float",
                    "Union[int, float, str]",
                    "Any",
                    "int",
                    "push"
                ]
            },
            "pop": {
                "return": [
                    "typing.Any"
                ]
            }
        }
    },
    "rich.styled": {
        "Styled": {
            "__init__": {
                "return": [
                    "None"
                ],
                "renderable": [
                    "typing.Any",
                    "renderable"
                ],
                "style": []
            },
            "__rich_measure__": {
                "options": [
                    "typing.Any",
                    "rich.console.Options",
                    "rich.console.ConsoleOptions",
                    "ConsoleOptions"
                ],
                "console": [],
                "return": []
            },
            "__rich_console__": {
                "options": [],
                "console": [
                    "rich.console.Console",
                    "typing.Any",
                    "rich",
                    "console"
                ],
                "return": [
                    "Any",
                    "list[Segment]"
                ]
            }
        }
    },
    "rich.syntax": {
        "ANSISyntaxTheme": {
            "__init__": {
                "return": [],
                "style_map": [
                    "typing.Any",
                    "dict",
                    "dict[typing.Any, typing.Any]",
                    "typing.Mapping[typing.Any, typing.Any]",
                    "typing.Mapping"
                ]
            },
            "get_style_for_token": {
                "return": [
                    "typing.Any",
                    "Style"
                ],
                "token_type": [
                    "str",
                    "hashable",
                    "Any",
                    "Hashable",
                    "int"
                ]
            },
            "get_background_style": {
                "return": []
            }
        },
        "PygmentsSyntaxTheme": {
            "__init__": {
                "theme": [],
                "return": [
                    "None"
                ]
            },
            "get_background_style": {
                "return": [
                    "str"
                ]
            },
            "get_style_for_token": {
                "return": [
                    "typing.Any"
                ],
                "token_type": [
                    "str",
                    "typing.Any"
                ]
            }
        },
        "Syntax": {
            "__init__": {
                "background_color": [],
                "dedent": [],
                "highlight_lines": [
                    "set",
                    "Optional[Set]",
                    "Optional[Any]"
                ],
                "code": [],
                "return": [],
                "line_numbers": [
                    "bool"
                ],
                "code_width": [],
                "start_line": [
                    "int"
                ],
                "indent_guides": [
                    "bool"
                ],
                "line_range": [
                    "Optional[Any]",
                    "None",
                    "Optional[Union[Tuple[int, int], List[int]]]",
                    "Optional[List[int]]",
                    "Optional[Unknown]"
                ],
                "lexer": [
                    "Lexer",
                    "ArrowLexer"
                ],
                "tab_size": [
                    "int"
                ],
                "padding": [
                    "int"
                ],
                "word_wrap": [
                    "bool"
                ],
                "theme": []
            },
            "__rich_console__": {
                "options": [],
                "console": [],
                "return": [
                    "yield",
                    "typing.Generator[typing.Union[Padding, typing.Iterable], None, None]",
                    "typing.Iterator[typing.Union[Padding, typing.Any]]",
                    "typing.Generator[typing.Union[Padding, typing.List[typing.Any]], None, None]",
                    "typing.Generator[typing.Union[Padding, typing.Any], None, None]",
                    "typing.Generator",
                    "typing.Iterator[typing.Union[Padding, typing.Iterable]]",
                    "segments",
                    "typing.Iterator[typing.Union[Padding, str]]",
                    "typing.Iterator[typing.Any]",
                    "typing.Generator[typing.Union[Padding, str], None, None]",
                    "typing.Iterator[typing.Union[Padding, typing.List[typing.Any]]]",
                    "List[str]"
                ]
            },
            "__rich_measure__": {
                "console": [
                    "rich.console.Console",
                    "console",
                    "typing.Any",
                    "Console",
                    "rich"
                ],
                "options": [
                    "dict",
                    "ConsoleOptions",
                    "Any",
                    "Dict",
                    "options",
                    "rich.console.ConsoleOptions"
                ],
                "return": []
            },
            "_apply_stylized_ranges": {
                "text": [
                    "Text",
                    "typing.Any",
                    "stylize"
                ],
                "return": []
            },
            "_get_base_style": {
                "return": []
            },
            "_get_line_numbers_color": {
                "blend": [
                    "float"
                ],
                "return": []
            },
            "_get_syntax": {
                "return": [
                    "typing.Iterable[typing.Any]"
                ],
                "console": [
                    "render",
                    "Console",
                    "TextRenderer",
                    "rich.console"
                ],
                "options": [
                    "Any",
                    "Options",
                    "update",
                    "ConsoleOptions",
                    "Optional[Dict]",
                    "Dict",
                    "options"
                ]
            },
            "_get_number_styles": {
                "console": [],
                "return": []
            },
            "_get_token_color": {
                "return": [
                    "str"
                ],
                "token_type": [
                    "str"
                ]
            },
            "from_path": {
                "dedent": [
                    "bool"
                ],
                "background_color": [
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "code_width": [],
                "encoding": [
                    "str"
                ],
                "line_numbers": [
                    "bool"
                ],
                "highlight_lines": [
                    "Optional",
                    "Optional[Iterable[int]]",
                    "Optional[Any]",
                    "Set[int]",
                    "None",
                    "Optional[List[int]]",
                    "set"
                ],
                "return": [
                    "cls",
                    "CodeHighlighter",
                    "Theme",
                    "CodeRenderer",
                    "SyntaxHighlighter",
                    "padding"
                ],
                "lexer": [
                    "Optional[Lexer]",
                    "None",
                    "lexer",
                    "Lexer",
                    "Optional[Any]",
                    "Optional[Union[Lexer, str]]",
                    "pygments",
                    "Any",
                    "Optional[str]"
                ],
                "tab_size": [
                    "int"
                ],
                "padding": [],
                "start_line": [],
                "line_range": [],
                "word_wrap": [],
                "theme": [
                    "str",
                    "string"
                ],
                "indent_guides": [
                    "bool"
                ],
                "path": []
            },
            "_process_code": {
                "return": [],
                "code": [
                    "str"
                ]
            },
            "get_theme": {
                "return": [
                    "SyntaxTheme"
                ],
                "name": [
                    "Union[SyntaxTheme, str]",
                    "Union[str, SyntaxTheme]"
                ]
            },
            "global": {
                "_pygments_style_class": [
                    "Type[PygmentsStyle]",
                    "PygmentsSyntaxTheme",
                    "theme"
                ],
                "_theme": []
            },
            "guess_lexer": {
                "return": [],
                "code": [
                    "str"
                ],
                "path": []
            },
            "highlight": {
                "code": [
                    "str"
                ],
                "line_range": [
                    "tuple[int, int]",
                    "typing.Optional[typing.Tuple[int, int]]",
                    "typing.Tuple[int, int]"
                ],
                "return": []
            },
            "stylize_range": {
                "style_before": [
                    "bool"
                ],
                "start": [
                    "int",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ],
                "style": [
                    "str",
                    "typing.Any",
                    "style"
                ],
                "end": []
            }
        },
        "global": {
            "_get_code_index_for_syntax_position": {
                "return": [],
                "newlines_offsets": [
                    "list[int]"
                ],
                "position": [
                    "tuple",
                    "tuple[int, int]"
                ]
            },
            "global": {
                "ANSI_DARK": [],
                "ANSI_LIGHT": []
            }
        },
        "SyntaxTheme": {
            "get_background_style": {
                "return": [
                    "pass",
                    "None",
                    "Style",
                    "Any",
                    "str"
                ]
            },
            "get_style_for_token": {
                "token_type": [
                    "str"
                ],
                "return": []
            }
        },
        "_SyntaxHighlightRange": {
            "global": {
                "style_before": [
                    "bool",
                    "False"
                ],
                "start": [],
                "end": [
                    "Tuple[int, int]",
                    "SyntaxPosition",
                    "end",
                    "position",
                    "int"
                ],
                "style": [
                    "str",
                    "Style",
                    "style",
                    "PygmentsSyntaxTheme",
                    "SyntaxTheme",
                    "list"
                ]
            }
        }
    },
    "rich.table": {
        "Table": {
            "__init__": {
                "border_style": [],
                "caption_style": [
                    "str",
                    "Optional[str]"
                ],
                "footer_style": [],
                "box": [
                    "box",
                    "str"
                ],
                "highlight": [
                    "bool"
                ],
                "header_style": [],
                "caption_justify": [
                    "str"
                ],
                "caption": [
                    "Optional[str]",
                    "str"
                ],
                "leading": [],
                "pad_edge": [
                    "bool"
                ],
                "min_width": [
                    "float",
                    "int",
                    "Optional[int]"
                ],
                "collapse_padding": [
                    "bool"
                ],
                "padding": [
                    "tuple[int, int]",
                    "tuple"
                ],
                "show_footer": [
                    "bool"
                ],
                "show_edge": [],
                "show_lines": [
                    "bool"
                ],
                "safe_box": [
                    "box",
                    "str",
                    "Any",
                    "box.Box",
                    "typing.Any",
                    "Optional[Any]",
                    "bool",
                    "Optional[box.Box]"
                ],
                "title": [
                    "Optional[str]"
                ],
                "title_justify": [],
                "title_style": [
                    "str",
                    "Optional[str]"
                ],
                "expand": [],
                "width": [],
                "headers": [
                    "tuple",
                    "tuple[Any]",
                    "headers",
                    "tuple[str]",
                    "tuple[str, ...]",
                    "str"
                ],
                "return": [
                    "None"
                ],
                "style": [],
                "show_header": [],
                "row_styles": []
            },
            "__rich_console__": {
                "console": [
                    "typing.Any",
                    "rich.console.Console"
                ],
                "options": [],
                "return": []
            },
            "__rich_measure__": {
                "return": [
                    "Measurement"
                ],
                "options": [
                    "RichTextLines",
                    "options",
                    "Menu",
                    "ConsoleOptions",
                    "RichTextOptions",
                    "RichConsoleOptions"
                ],
                "console": [
                    "Console",
                    "Any",
                    "RichConsole",
                    "rich",
                    "RichTextLines",
                    "rich.console.Console"
                ]
            },
            "_calculate_column_widths": {
                "console": [
                    "object",
                    "Console",
                    "blessed",
                    "Application"
                ],
                "options": [],
                "return": []
            },
            "_collapse_widths": {
                "max_width": [
                    "int"
                ],
                "return": [
                    "typing.Any",
                    "dict[typing.Any, typing.Any]",
                    "widths",
                    "list[float]"
                ],
                "wrapable": [],
                "widths": []
            },
            "_get_cells": {
                "column_index": [
                    "int"
                ],
                "column": [
                    "vertical",
                    "column",
                    "footer",
                    "Column",
                    "column.cells",
                    "cells",
                    "console",
                    "column.vertical"
                ],
                "return": [],
                "console": []
            },
            "_get_padding_width": {
                "column_index": [
                    "int"
                ],
                "return": []
            },
            "_measure_column": {
                "console": [
                    "typing.Any",
                    "Console"
                ],
                "column": [
                    "Column",
                    "object"
                ],
                "return": [],
                "options": [
                    "Options",
                    "typing.Any"
                ]
            },
            "_render": {
                "return": [],
                "options": [
                    "dict",
                    "typing.Dict[str, typing.Any]",
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "update"
                ],
                "widths": [
                    "list[typing.Any]",
                    "list[int]",
                    "list[float]"
                ],
                "console": [
                    "typing.Any",
                    "Console"
                ]
            },
            "add_column": {
                "footer": [
                    "str"
                ],
                "return": [],
                "header": [
                    "str"
                ],
                "header_style": [
                    "Optional[str]",
                    "None"
                ],
                "footer_style": [
                    "Optional[str]",
                    "str"
                ],
                "overflow": [
                    "str"
                ],
                "min_width": [
                    "int",
                    "Optional[int]"
                ],
                "no_wrap": [
                    "bool"
                ],
                "style": [
                    "Optional[str]",
                    "str"
                ],
                "vertical": [
                    "str"
                ],
                "width": [
                    "Optional[int]",
                    "int"
                ],
                "ratio": [
                    "float",
                    "Optional[float]",
                    "Union[float, int]",
                    "Optional[int]",
                    "int"
                ],
                "justify": [],
                "highlight": [
                    "Optional[Any]",
                    "bool",
                    "typing.Any",
                    "Any",
                    "str",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "max_width": []
            },
            "add_row": {
                "return": [
                    "None"
                ],
                "end_section": [
                    "bool"
                ],
                "renderables": [],
                "style": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ]
            },
            "get_row_style": {
                "return": [
                    "Style",
                    "style"
                ],
                "index": [],
                "console": []
            },
            "add_section": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "rows": [
                    "List[Row]",
                    "Row",
                    "None"
                ],
                "columns": []
            },
            "grid": {
                "expand": [
                    "bool"
                ],
                "return": [
                    "cls",
                    "grid",
                    "padding"
                ],
                "headers": [
                    "tuple[str]",
                    "tuple[str, ...]",
                    "List[str]",
                    "list",
                    "list[str]"
                ],
                "padding": [],
                "pad_edge": [],
                "collapse_padding": [
                    "bool"
                ]
            }
        },
        "Column": {
            "copy": {
                "return": [
                    "self",
                    "Self"
                ]
            },
            "global": {
                "_index": [
                    "int"
                ],
                "footer": [
                    "RenderableType",
                    "footer",
                    "str",
                    ".console",
                    "Text",
                    "Union[str, Text, other renderable types]",
                    "Column",
                    "Union[str, other renderable types]"
                ],
                "highlight": [
                    "ReprHighlighter",
                    "highlight"
                ],
                "header": [
                    "str",
                    "header",
                    "Callable[[str], None]",
                    "Union[str, Text]",
                    "List[str]",
                    "None",
                    "Column",
                    "RenderableType",
                    ".console",
                    "Text"
                ],
                "header_style": [
                    "Union[str, Style]",
                    "Optional[StyleType]",
                    "str",
                    "StyleType",
                    "Optional[Union[str, Style]]",
                    "Style",
                    "Column",
                    "Table",
                    "Optional[str]",
                    "Union[str, Style, None]",
                    "Union[str, StyleType]",
                    ".style",
                    "None"
                ],
                "max_width": [
                    "int",
                    "ConsoleOptions"
                ],
                "min_width": [
                    "Optional[int]",
                    "None",
                    "int",
                    "Union[int, None]"
                ],
                "justify": [
                    "JustifyMethod",
                    "str",
                    "justify",
                    "Table",
                    ".console",
                    "Column"
                ],
                "_cells": [
                    "List[RenderableType]",
                    "RenderableType",
                    ".console",
                    ".protocol",
                    "Text",
                    "str",
                    "Column"
                ],
                "ratio": [],
                "style": [
                    "style",
                    "Style",
                    "StyleType",
                    "None",
                    "Union[str, Style]",
                    "Optional[StyleType]",
                    "Column"
                ],
                "vertical": [
                    "VerticalAlignMethod",
                    "str",
                    "vertical",
                    ".align",
                    "Column",
                    "align"
                ],
                "width": [
                    "int",
                    "width",
                    "Optional[int]",
                    "str",
                    "Column",
                    "perc",
                    "Measurement",
                    "widths"
                ],
                "footer_style": [],
                "overflow": [],
                "no_wrap": [
                    "bool",
                    "False",
                    "Column"
                ]
            }
        },
        "_Cell": {
            "global": {
                "vertical": [
                    "VerticalAlignMethod",
                    "str",
                    "vertical",
                    ".align"
                ],
                "renderable": [
                    "renderable",
                    "RenderableType",
                    ".protocol",
                    "Table",
                    "None",
                    "renderables",
                    ".console",
                    "protocol"
                ],
                "style": []
            }
        },
        "Row": {
            "global": {
                "end_section": [],
                "style": []
            }
        },
        "global": {
            "header": {
                "text": [
                    "str"
                ],
                "return": []
            }
        }
    },
    "rich.terminal_theme": {
        "TerminalTheme": {
            "__init__": {
                "bright": [
                    "list",
                    "tuple",
                    "normal",
                    "List",
                    "Optional[List]",
                    "Optional[Sequence]",
                    "Optional[Sequence[ColorType]]",
                    "Union[list, tuple]",
                    "Sequence",
                    "Tuple",
                    "Union[list, tuple, None]",
                    "bright",
                    "Union[Tuple, List]"
                ],
                "foreground": [
                    "list",
                    "ColorTriplet",
                    "list[float, float, float]",
                    "list[int, int, int]",
                    "tuple[int, int, int]"
                ],
                "return": [],
                "normal": [],
                "background": []
            }
        }
    },
    "rich.text": {
        "Text": {
            "__add__": {
                "return": [
                    "NotImplemented",
                    "result",
                    "NotImplementedType"
                ],
                "other": [
                    "typing.Union[str, Text]",
                    "typing.Union[builtins.str, Text]"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Text"
                ]
            },
            "__contains__": {
                "other": [
                    "Union[str, Text]"
                ],
                "return": []
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "tab_size": [
                    "Optional[int]"
                ],
                "spans": [
                    "list",
                    "Optional[List[Any]]",
                    "or",
                    "Optional[List[typing.Any]]",
                    "Optional[List]",
                    "list[typing.Any]"
                ],
                "overflow": [],
                "text": [],
                "end": [],
                "style": [],
                "no_wrap": [],
                "justify": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Any",
                    "None",
                    "bool"
                ]
            },
            "__getitem__": {
                "slice": [],
                "return": [
                    "str",
                    "typing.Union[str, typing.List[str]]",
                    "List[str]"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__repr__": {
                "return": []
            },
            "__rich_console__": {
                "return": [
                    "typing.Generator[typing.Any, None, None]"
                ],
                "console": [
                    "console",
                    "Console",
                    "rich"
                ],
                "options": [
                    "typing.Any",
                    "ConsoleOptions",
                    "Options"
                ]
            },
            "align": {
                "align": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "character": [
                    "str"
                ],
                "width": [
                    "int"
                ]
            },
            "_trim_spans": {
                "return": [
                    "None"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__rich_measure__": {
                "console": [
                    "rich.console.Console",
                    "Console",
                    "console",
                    "typing.Any",
                    "rich"
                ],
                "options": [],
                "return": []
            },
            "append": {
                "text": [
                    "Union[str, Text]"
                ],
                "return": [
                    "self",
                    "Self"
                ],
                "style": []
            },
            "append_text": {
                "return": [
                    "typing.Any",
                    "self",
                    "Self",
                    "ClassName",
                    "TextBuilder",
                    "MyClass"
                ],
                "text": []
            },
            "apply_meta": {
                "return": [],
                "start": [
                    "int"
                ],
                "end": [],
                "meta": []
            },
            "assemble": {
                "end": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "meta": [],
                "tab_size": [
                    "int"
                ],
                "justify": [
                    "Optional[str]",
                    "str",
                    "typing.Optional[str]"
                ],
                "style": [],
                "parts": [
                    "typing.Iterable[typing.Any]",
                    "typing.Tuple[typing.Any, ...]"
                ],
                "overflow": [
                    "typing.Optional[str]",
                    "str",
                    "typing.Optional[bool]",
                    "Optional[bool]",
                    "None",
                    "bool",
                    "False",
                    "Optional[str]",
                    "typing.Optional[typing.Any]"
                ],
                "no_wrap": []
            },
            "append_tokens": {
                "tokens": [
                    "typing.Iterable[typing.Tuple[typing.Any, typing.Any]]",
                    "typing.Iterable[typing.Tuple[str, typing.Any]]",
                    "Iterable[Tuple[str, str]]",
                    "typing.Iterable[typing.Tuple[str, str]]",
                    "list[tuple[typing.Any, typing.Any]]"
                ],
                "return": []
            },
            "blank_copy": {
                "return": [
                    "Text"
                ],
                "plain": [
                    "str"
                ]
            },
            "copy_styles": {
                "return": [],
                "text": []
            },
            "detect_indentation": {
                "return": []
            },
            "expand_tabs": {
                "return": [
                    "None"
                ],
                "tab_size": [
                    "int",
                    "Optional[int]"
                ]
            },
            "divide": {
                "offsets": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "Lines"
                ]
            },
            "extend_style": {
                "spaces": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "copy": {
                "return": []
            },
            "fit": {
                "return": [
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "width": [
                    "int"
                ]
            },
            "from_ansi": {
                "return": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "no_wrap": [
                    "Optional[bool]"
                ],
                "justify": [
                    "Optional[str]",
                    "str"
                ],
                "tab_size": [
                    "int"
                ],
                "style": [
                    "str"
                ],
                "overflow": [
                    "typing.Optional[str]",
                    "str"
                ],
                "text": []
            },
            "from_markup": {
                "emoji": [
                    "bool"
                ],
                "end": [
                    "str"
                ],
                "emoji_variant": [
                    "str",
                    "Optional[str]"
                ],
                "style": [
                    "str"
                ],
                "overflow": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "Any"
                ],
                "text": [],
                "justify": [],
                "return": []
            },
            "get_style_at_offset": {
                "console": [],
                "offset": [
                    "int"
                ],
                "return": [
                    "Style",
                    "style"
                ]
            },
            "highlight_regex": {
                "return": [
                    "int"
                ],
                "style_prefix": [
                    "str"
                ],
                "re_highlight": [],
                "style": []
            },
            "highlight_words": {
                "case_sensitive": [
                    "bool"
                ],
                "return": [],
                "style": [
                    "str",
                    "Any"
                ],
                "words": [
                    "Iterable[str]",
                    "list[str]"
                ]
            },
            "join": {
                "lines": [],
                "return": [
                    "typing.Any",
                    "self"
                ]
            },
            "pad_left": {
                "character": [],
                "count": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "on": {
                "return": [
                    "Self",
                    "self",
                    "on",
                    "handlers",
                    "Handler",
                    "ClassName",
                    "Filterer"
                ],
                "meta": [],
                "handlers": []
            },
            "pad": {
                "character": [],
                "return": [],
                "count": []
            },
            "pad_right": {
                "count": [],
                "return": [],
                "character": []
            },
            "remove_suffix": {
                "return": [],
                "suffix": [
                    "str"
                ]
            },
            "render": {
                "end": [
                    "str"
                ],
                "console": [
                    "typing.Any",
                    "Console",
                    "rich",
                    "default",
                    "rich.console.Console",
                    "RichConsole",
                    "console"
                ],
                "return": []
            },
            "right_crop": {
                "amount": [],
                "return": [
                    "None"
                ]
            },
            "rstrip": {
                "return": [
                    "None"
                ]
            },
            "rstrip_end": {
                "return": [
                    "None"
                ],
                "size": []
            },
            "set_length": {
                "new_length": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "split": {
                "separator": [],
                "return": [],
                "include_separator": [],
                "allow_blank": []
            },
            "styled": {
                "overflow": [
                    "Optional",
                    "Optional[str]"
                ],
                "justify": [
                    "Optional[str]",
                    "str"
                ],
                "text": [],
                "return": [
                    "typing.Any",
                    "str"
                ],
                "style": []
            },
            "stylize": {
                "end": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "style": [
                    "typing.Any",
                    "typing.Union[typing.Any, str]",
                    "Span",
                    "str",
                    "typing.Union[Style, str]",
                    "ManniStyle",
                    "style"
                ]
            },
            "stylize_before": {
                "end": [
                    "int"
                ],
                "start": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "style": []
            },
            "truncate": {
                "max_width": [
                    "int"
                ],
                "overflow": [],
                "return": [],
                "pad": []
            },
            "with_indent_guides": {
                "character": [
                    "str"
                ],
                "return": [
                    "str",
                    "text",
                    "typing.Any"
                ],
                "style": [],
                "indent_size": [
                    "Optional[int]",
                    "int"
                ]
            },
            "wrap": {
                "justify": [
                    "Optional[str]"
                ],
                "overflow": [
                    "Optional[str]"
                ],
                "tab_size": [
                    "int"
                ],
                "console": [
                    "rich.console.Console",
                    "Console",
                    "Any"
                ],
                "width": [
                    "int"
                ],
                "no_wrap": [],
                "return": []
            }
        },
        "Span": {
            "__bool__": {
                "return": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "extend": {
                "return": [
                    "Span",
                    "self",
                    "typing.Any",
                    "extend"
                ],
                "cells": []
            },
            "global": {
                "start": [
                    "start",
                    "int",
                    "stylize",
                    "split",
                    "Span",
                    "divide",
                    "move"
                ],
                "style": [
                    "style",
                    "stylize",
                    "Union[str, Style]",
                    "str",
                    "Style",
                    "StyleType",
                    "Optional[StyleType]",
                    "Text"
                ],
                "end": []
            },
            "move": {
                "offset": [
                    "int"
                ],
                "return": []
            },
            "right_crop": {
                "offset": [
                    "int"
                ],
                "return": [
                    "Span",
                    "self",
                    "Union[TypeOfSelf, Span]"
                ]
            },
            "split": {
                "offset": [],
                "return": [
                    "tuple",
                    "self"
                ]
            }
        },
        "global": {
            "global": {
                "DEFAULT_OVERFLOW": [
                    "str"
                ],
                "DEFAULT_JUSTIFY": [
                    "str"
                ]
            }
        }
    },
    "rich.theme": {
        "Theme": {
            "from_file": {
                "config_file": [
                    "typing.TextIO",
                    "typing.Union[typing.IO, str, os.PathLike]",
                    "typing.Union[typing.IO, str, pathlib.Path]",
                    "typing.Union[typing.TextIO, str]"
                ],
                "source": [
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "inherit": [],
                "return": []
            },
            "__init__": {
                "styles": [],
                "inherit": []
            },
            "global": {
                "styles": [
                    "Dict[str, Style]",
                    "Theme",
                    "ThemeStack"
                ]
            },
            "read": {
                "encoding": [
                    "Optional[str]"
                ],
                "inherit": [
                    "bool",
                    "True"
                ],
                "path": [
                    "typing.Union[str, os.PathLike]",
                    "str"
                ],
                "return": [
                    "cls",
                    "read"
                ]
            }
        },
        "ThemeStack": {
            "__init__": {
                "return": [],
                "theme": []
            },
            "pop_theme": {
                "return": [
                    "None"
                ]
            },
            "push_theme": {
                "inherit": [
                    "bool"
                ],
                "return": [],
                "theme": []
            }
        }
    },
    "rich.traceback": {
        "Traceback": {
            "__init__": {
                "code_width": [
                    "int"
                ],
                "locals_hide_dunder": [
                    "bool"
                ],
                "extra_lines": [
                    "int"
                ],
                "locals_hide_sunder": [],
                "locals_max_string": [
                    "int"
                ],
                "max_frames": [
                    "int"
                ],
                "indent_guides": [
                    "bool"
                ],
                "locals_max_length": [
                    "int"
                ],
                "word_wrap": [
                    "bool"
                ],
                "trace": [
                    "typing.Optional[Trace]"
                ],
                "theme": [
                    "str",
                    "Optional[str]"
                ],
                "width": [
                    "int"
                ],
                "show_locals": [],
                "suppress": []
            },
            "__rich_console__": {
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Iterator[typing.Any]",
                    "yield",
                    "rich",
                    "typing.Iterator[typing.Group]"
                ],
                "console": [
                    "rich.console.Console",
                    "typing.Any"
                ],
                "options": []
            },
            "_guess_lexer": {
                "code": [],
                "return": [
                    "str"
                ],
                "filename": []
            },
            "_render_stack": {
                "return": [
                    "typing.Iterator",
                    "typing.Iterator[typing.Union[str, Text]]"
                ],
                "stack": []
            },
            "_render_syntax_error": {
                "syntax_error": [
                    "SyntaxError",
                    "object"
                ],
                "return": []
            },
            "extract": {
                "exc_value": [
                    "BaseException",
                    "typing.Union[BaseException, BaseExceptionGroup, ExceptionGroup, SyntaxError]",
                    "typing.Union[BaseException, ExceptionGroup, SyntaxError]",
                    "typing.Any",
                    "extract"
                ],
                "return": [
                    "Trace",
                    "typing.Any",
                    "rich.traceback.Trace",
                    "TracebackType"
                ],
                "locals_hide_sunder": [
                    "bool"
                ],
                "locals_hide_dunder": [
                    "bool"
                ],
                "locals_max_length": [],
                "locals_max_string": [
                    "int"
                ],
                "show_locals": [],
                "traceback": [
                    "types.TracebackType"
                ],
                "exc_type": []
            },
            "from_exception": {
                "exc_type": [
                    "typing.Type[BaseException]",
                    "type[BaseException]"
                ],
                "extra_lines": [
                    "int"
                ],
                "exc_value": [
                    "BaseException"
                ],
                "code_width": [
                    "int"
                ],
                "return": [],
                "locals_hide_sunder": [
                    "typing.Any",
                    "bool"
                ],
                "max_frames": [
                    "int"
                ],
                "indent_guides": [
                    "bool"
                ],
                "locals_max_length": [],
                "locals_max_string": [
                    "int",
                    "typing.Any"
                ],
                "suppress": [
                    "tuple",
                    "tuple[typing.Type[BaseException], ...]",
                    "typing.Collection[typing.Type[BaseException]]",
                    "typing.Iterable[typing.Union[typing.Type[BaseException], typing.ModuleType]]",
                    "typing.Iterable[typing.Union[type, typing.ModuleType]]",
                    "typing.Iterable[typing.Type[BaseException]]",
                    "typing.Iterable[typing.Union[type, str]]",
                    "typing.Iterable[typing.Any]",
                    "tuple[typing.Union[type[BaseException], typing.Callable[[BaseException], bool]], ...]",
                    "typing.Callable",
                    "typing.Collection[typing.Union[typing.Type[BaseException], str]]",
                    "tuple[type[BaseException], ...]"
                ],
                "show_locals": [
                    "bool",
                    "typing.Any"
                ],
                "traceback": [
                    "types.TracebackType"
                ],
                "theme": [],
                "locals_hide_dunder": [
                    "bool",
                    "typing.Any"
                ],
                "width": [
                    "int"
                ],
                "word_wrap": [
                    "bool"
                ]
            }
        },
        "global": {
            "_iter_syntax_lines": {
                "end": [],
                "start": [
                    "Tuple[int, int]",
                    "Tuple[Any, Any]",
                    "tuple",
                    "typing.Tuple[int, int]"
                ],
                "return": []
            },
            "bar": {
                "return": [],
                "a": []
            },
            "foo": {
                "a": [],
                "return": []
            },
            "error": {
                "return": []
            },
            "install": {
                "code_width": [],
                "return": [],
                "indent_guides": [
                    "bool"
                ],
                "console": [],
                "locals_max_length": [
                    "int"
                ],
                "show_locals": [
                    "bool"
                ],
                "max_frames": [],
                "locals_max_string": [
                    "int"
                ],
                "width": [
                    "int"
                ],
                "word_wrap": [
                    "bool"
                ],
                "theme": [
                    "str",
                    "Optional[str]",
                    "Theme",
                    "theme"
                ],
                "extra_lines": [],
                "locals_hide_dunder": [],
                "suppress": [],
                "locals_hide_sunder": []
            }
        },
        "Frame": {
            "global": {
                "filename": [
                    "str",
                    "filename",
                    "extract",
                    "os.path",
                    "frame.filename",
                    "SyntaxError"
                ],
                "locals": [
                    "dict[str, pretty.Node]",
                    "locals",
                    "pretty.Node",
                    "Frame",
                    "extract",
                    "Dict[str, pretty.Node]",
                    "frame.locals"
                ],
                "last_instruction": [],
                "line": [
                    "str",
                    "line"
                ],
                "lineno": [
                    "int",
                    "Frame",
                    "lineno",
                    "extract",
                    "frame.lineno"
                ],
                "name": []
            }
        },
        "Stack": {
            "global": {
                "exc_type": [
                    "Type[BaseException]",
                    "excepthook",
                    "install",
                    "extract",
                    "Type[Any]",
                    "ValueError"
                ],
                "exceptions": [],
                "frames": [
                    "Frame",
                    "frames",
                    "Stack",
                    "List[Frame]",
                    "list[Frame]",
                    "extract",
                    "for",
                    "stack.frames",
                    "append"
                ],
                "exc_value": [],
                "is_group": [
                    "bool",
                    "Stack",
                    "False"
                ],
                "notes": [],
                "is_cause": [
                    "bool"
                ],
                "syntax_error": []
            }
        },
        "Trace": {
            "global": {
                "stacks": [
                    "list[Stack]"
                ]
            }
        },
        "_SyntaxError": {
            "global": {
                "filename": [
                    "str",
                    "filename",
                    "extract",
                    "SyntaxError",
                    "frame.filename",
                    "Frame"
                ],
                "line": [
                    "str",
                    "line"
                ],
                "msg": [
                    "str",
                    "msg",
                    "extract",
                    "SyntaxError"
                ],
                "lineno": [],
                "notes": [],
                "offset": []
            }
        }
    },
    "rich.tree": {
        "Tree": {
            "__init__": {
                "return": [],
                "hide_root": [
                    "bool"
                ],
                "expanded": [],
                "highlight": [
                    "bool"
                ],
                "style": [],
                "label": [
                    "str",
                    "typing.Any"
                ],
                "guide_style": []
            },
            "__rich_measure__": {
                "console": [
                    "Console",
                    "rich.console.Console"
                ],
                "return": [],
                "options": []
            },
            "add": {
                "guide_style": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "node",
                    "Node",
                    "self.children",
                    "add",
                    "children",
                    "Any",
                    "style"
                ],
                "expanded": [
                    "bool"
                ],
                "label": [
                    "str"
                ],
                "style": [
                    "typing.Optional[str]",
                    "typing.Optional[Style]"
                ],
                "highlight": []
            },
            "__rich_console__": {
                "options": [],
                "console": [
                    "rich.console.Console"
                ],
                "return": []
            }
        }
    }
}