{
    "jinja2.bccache": {
        "Bucket": {
            "__init__": {
                "environment": [
                    "str"
                ],
                "return": [],
                "key": [
                    "str"
                ],
                "checksum": [
                    "str",
                    "Any"
                ]
            },
            "bytecode_from_string": {
                "return": [
                    "bytes",
                    "Any",
                    "str",
                    "dis.Bytecode",
                    "string",
                    "pass"
                ],
                "string": []
            },
            "bytecode_to_string": {
                "return": []
            },
            "load_bytecode": {
                "return": [],
                "f": []
            },
            "reset": {
                "return": [
                    "None"
                ]
            },
            "write_bytecode": {
                "f": [
                    "typing.IO[bytes]"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "FileSystemBytecodeCache": {
            "__init__": {
                "pattern": [
                    "str"
                ],
                "directory": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "None",
                    "self.directory",
                    "PathLike",
                    "Optional[Unknown]",
                    "directory"
                ],
                "return": []
            },
            "_get_cache_filename": {
                "return": [],
                "bucket": []
            },
            "_get_default_cache_dir": {
                "return": [
                    "str"
                ]
            },
            "clear": {
                "return": []
            },
            "dump_bytecode": {
                "bucket": [
                    "Any",
                    "typing.Any"
                ],
                "return": []
            },
            "load_bytecode": {
                "return": [],
                "bucket": []
            }
        },
        "MemcachedBytecodeCache": {
            "__init__": {
                "prefix": [],
                "ignore_memcache_errors": [],
                "client": [
                    "Any",
                    "timeout"
                ],
                "timeout": [
                    "int",
                    "Optional[Union[int, float]]",
                    "Optional[int]"
                ]
            },
            "dump_bytecode": {
                "return": [
                    "None"
                ],
                "bucket": []
            },
            "load_bytecode": {
                "return": [
                    "None",
                    "str",
                    "typing.Any",
                    "typing.List[bytes]"
                ],
                "bucket": []
            }
        },
        "BytecodeCache": {
            "clear": {
                "return": []
            },
            "dump_bytecode": {
                "bucket": [
                    "bytes",
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "get_bucket": {
                "environment": [
                    "dict"
                ],
                "filename": [
                    "str"
                ],
                "source": [],
                "return": [
                    "str",
                    "object",
                    "Bucket",
                    "bucket",
                    "Any"
                ],
                "name": [
                    "str"
                ]
            },
            "get_cache_key": {
                "filename": [
                    "str",
                    "Optional[str]"
                ],
                "return": [],
                "name": [
                    "str"
                ]
            },
            "get_source_checksum": {
                "source": [
                    "str"
                ],
                "return": []
            },
            "load_bytecode": {
                "return": [
                    "None",
                    "str",
                    "bytes",
                    "pass"
                ],
                "bucket": [
                    "str"
                ]
            },
            "set_bucket": {
                "bucket": [],
                "return": [
                    "None"
                ]
            }
        },
        "_MemcachedClient": {
            "get": {
                "key": [
                    "str"
                ],
                "return": [
                    "bytes",
                    "code"
                ]
            },
            "set": {
                "key": [],
                "timeout": [
                    "typing.Optional[int]",
                    "typing.Optional[float]"
                ],
                "return": [],
                "value": [
                    "Any",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "jinja2.async_utils": {
        "global": {
            "auto_to_list": {
                "return": [
                    "list[typing.Any]",
                    "list[T]"
                ],
                "value": [
                    "typing.AsyncIterable[typing.Any]",
                    "value"
                ]
            },
            "auto_aiter": {
                "iterable": [],
                "return": [
                    "typing.AsyncIterator"
                ]
            },
            "auto_await": {
                "value": [
                    "inspect.isawaitable",
                    "t.cast",
                    "V",
                    "typing.Any"
                ],
                "return": [
                    "V",
                    "typing.Awaitable[V]",
                    "t.Awaitable[V]",
                    "typing.Union[V, typing.Awaitable[V]]"
                ]
            }
        },
        "_IteratorToAsyncIterator": {
            "__anext__": {
                "return": []
            },
            "__aiter__": {
                "return": [
                    "self",
                    "Self",
                    "typing.Any",
                    "MyClass",
                    "ClassName",
                    "typing.AsyncIterator[typing.Any]"
                ]
            },
            "__init__": {
                "iterator": [
                    "typing.Iterator",
                    "typing.Any",
                    "typing.Iterator[typing.Any]"
                ]
            }
        }
    },
    "jinja2.compiler": {
        "CodeGenerator": {
            "__init__": {
                "defer_init": [
                    "bool"
                ],
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "environment": [],
                "optimized": [
                    "bool"
                ],
                "stream": [
                    "typing.Optional[typing.IO]"
                ]
            },
            "_default_finalize": {
                "return": [],
                "value": [
                    "typing.Any"
                ]
            },
            "_filter_test_common": {
                "return": [],
                "is_filter": [
                    "bool"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node",
                    "Any"
                ]
            },
            "_import_common": {
                "return": [
                    "None"
                ],
                "node": [],
                "frame": [
                    "dict",
                    "typing.Any",
                    "frame",
                    "node.template",
                    "Frame"
                ]
            },
            "_output_child_post": {
                "finalize": [
                    "src",
                    "Any",
                    "Finalize"
                ],
                "return": [
                    "None"
                ],
                "node": [
                    "typing.Any",
                    "AST",
                    "node"
                ],
                "frame": [
                    "types.FrameType",
                    "typing.Optional[types.FrameType]",
                    "frame",
                    "typing.Any"
                ]
            },
            "_output_child_pre": {
                "return": [],
                "finalize": [],
                "node": [],
                "frame": [
                    "types.FrameType",
                    "typing.Optional[types.FrameType]",
                    "typing.Any",
                    "Any",
                    "frame",
                    "FrameType"
                ]
            },
            "_make_finalize": {
                "return": [
                    "src"
                ]
            },
            "_output_child_to_const": {
                "frame": [
                    "Frame",
                    "FrameSummary"
                ],
                "finalize": [
                    "const"
                ],
                "return": [
                    "str"
                ],
                "node": []
            },
            "_output_const_repr": {
                "return": [],
                "group": []
            },
            "blockvisit": {
                "return": [],
                "frame": [
                    "typing.Any",
                    "visit"
                ],
                "nodes": [
                    "list[typing.Any]"
                ]
            },
            "choose_async": {
                "async_value": [],
                "sync_value": [
                    "str"
                ],
                "return": []
            },
            "dump_local_context": {
                "return": [
                    "str"
                ],
                "frame": [
                    "Any",
                    "typing.Any",
                    "types.FrameType",
                    "frame"
                ]
            },
            "end_write": {
                "return": [
                    "None"
                ],
                "frame": []
            },
            "derive_context": {
                "frame": [
                    "typing.Any",
                    "dict",
                    "frame",
                    "Frame",
                    "Any"
                ],
                "return": [
                    "str"
                ]
            },
            "buffer": {
                "return": [
                    "None"
                ],
                "frame": [
                    "DataFrame",
                    "frame",
                    "buffer"
                ]
            },
            "enter_frame": {
                "frame": [
                    "typing.Any",
                    "frame"
                ],
                "return": [
                    "None"
                ]
            },
            "fail": {
                "msg": [
                    "str"
                ],
                "return": [],
                "lineno": [
                    "int"
                ]
            },
            "func": {
                "return": [],
                "name": []
            },
            "get_context_ref": {
                "return": [
                    "typing.Any"
                ]
            },
            "get_resolve_func": {
                "return": [
                    "str"
                ]
            },
            "global": {
                "_finalize": [
                    "src",
                    "None",
                    "CodeGenerator",
                    "NamedTuple",
                    "str",
                    "const"
                ]
            },
            "leave_frame": {
                "return": [
                    "None"
                ],
                "with_python_scope": [
                    "bool"
                ],
                "frame": [
                    "frame",
                    "Frame",
                    "Any",
                    "object",
                    "typing.Any"
                ]
            },
            "macro_body": {
                "frame": [
                    "object",
                    "Frame",
                    "FrameType"
                ],
                "node": [],
                "return": []
            },
            "macro_def": {
                "return": [
                    "None"
                ],
                "frame": [
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "frame"
                ],
                "macro_ref": [
                    "node",
                    "getattr"
                ]
            },
            "indent": {
                "return": [
                    "None"
                ]
            },
            "mark_parameter_stored": {
                "return": [
                    "None"
                ],
                "target": []
            },
            "outdent": {
                "step": [],
                "return": []
            },
            "newline": {
                "return": [
                    "None"
                ],
                "node": [],
                "extra": []
            },
            "pop_context_reference": {
                "return": [
                    "None"
                ]
            },
            "pop_assign_tracking": {
                "return": [
                    "None"
                ],
                "frame": []
            },
            "parameter_is_undeclared": {
                "target": [],
                "return": [
                    "bool"
                ]
            },
            "pull_dependencies": {
                "nodes": [
                    "list[str]"
                ],
                "return": [
                    "None"
                ]
            },
            "position": {
                "return": [
                    "typing.Any",
                    "position",
                    "rv"
                ],
                "node": [
                    "node",
                    "List",
                    "lineno",
                    "ExplorerPanel",
                    "int",
                    "node.lineno"
                ]
            },
            "push_assign_tracking": {
                "return": []
            },
            "push_context_reference": {
                "return": [
                    "None"
                ],
                "target": [
                    "str",
                    "Any",
                    "ContextReference",
                    "object"
                ]
            },
            "push_parameter_definitions": {
                "frame": [],
                "return": []
            },
            "return_buffer_contents": {
                "force_unescaped": [
                    "bool"
                ],
                "frame": [
                    "typing.Any",
                    "Any",
                    "buffer"
                ],
                "return": [
                    "None"
                ]
            },
            "pop_parameter_definitions": {
                "return": [
                    "None"
                ]
            },
            "signature": {
                "extra_kwargs": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "node": [
                    "node.kwargs",
                    "typing.Any",
                    "ast.FunctionDef",
                    "Node",
                    "ast",
                    "ast.Call",
                    "args",
                    "kwargs",
                    "CallableNode",
                    "FunctionDef",
                    "node"
                ],
                "return": [],
                "frame": [
                    "Context",
                    "frame",
                    "ScopeFrame",
                    "Scope",
                    "Frame"
                ]
            },
            "simple_write": {
                "return": [
                    "None"
                ],
                "node": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "s": [
                    "bytes",
                    "str",
                    "typing.Union[str, bytes]",
                    "typing.Union[bytes]"
                ],
                "frame": []
            },
            "start_write": {
                "return": [
                    "None"
                ],
                "frame": [],
                "node": []
            },
            "temporary_identifier": {
                "return": []
            },
            "visit_Assign": {
                "return": [
                    "None"
                ],
                "node": [],
                "frame": []
            },
            "visit_AssignBlock": {
                "return": [
                    "None"
                ],
                "frame": [],
                "node": [
                    "NodeNG"
                ]
            },
            "visit_Block": {
                "return": [
                    "None"
                ],
                "frame": [
                    "typing.Any",
                    "Frame",
                    "CustomFrameType",
                    "buffer",
                    "scoped"
                ],
                "node": []
            },
            "visit_Break": {
                "frame": [
                    "FrameType",
                    "Frame",
                    "ExecutionFrame",
                    "frame"
                ],
                "return": [],
                "node": [
                    "ast.Break"
                ]
            },
            "visit_Call": {
                "frame": [
                    "FrameType",
                    "Frame",
                    "NodeFrame",
                    "TemplateFrame",
                    "frame"
                ],
                "node": [],
                "return": [
                    "None"
                ],
                "forward_caller": []
            },
            "visit_CallBlock": {
                "node": [],
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "visit_Compare": {
                "frame": [],
                "return": [
                    "None"
                ],
                "node": [
                    "Compare"
                ]
            },
            "visit_Concat": {
                "frame": [
                    "typing.Any",
                    "FrameType"
                ],
                "node": [],
                "return": []
            },
            "visit_CondExpr": {
                "frame": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_Const": {
                "node": [],
                "return": [
                    "None"
                ],
                "frame": []
            },
            "visit_ContextReference": {
                "return": [],
                "node": [
                    "ContextReference"
                ],
                "frame": [
                    "frame",
                    "FrameType"
                ]
            },
            "visit_DerivedContextReference": {
                "return": [
                    "None"
                ],
                "node": [
                    "DerivedContextReference"
                ],
                "frame": [
                    "frame",
                    "typing.Any"
                ]
            },
            "visit_Dict": {
                "frame": [],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_Continue": {
                "node": [
                    "ast.Continue",
                    "ast.AST"
                ],
                "frame": [
                    "frame",
                    "FrameType",
                    "NodeFrame",
                    "ExecutionFrame"
                ],
                "return": [
                    "None"
                ]
            },
            "visit_EnvironmentAttribute": {
                "return": [
                    "None"
                ],
                "frame": [
                    "frame",
                    "FrameType"
                ],
                "node": [
                    "name",
                    "EnvironmentAttributeNode",
                    "node",
                    "object",
                    "ast.Attribute",
                    "str",
                    "Node",
                    "ASTNode"
                ]
            },
            "visit_EvalContextModifier": {
                "frame": [
                    "typing.Any",
                    "FrameType"
                ],
                "return": [],
                "node": [
                    "typing.Any",
                    "node",
                    "Node"
                ]
            },
            "visit_ExprStmt": {
                "node": [],
                "return": [
                    "None"
                ],
                "frame": []
            },
            "visit_Extends": {
                "return": [
                    "None"
                ],
                "frame": [],
                "node": []
            },
            "visit_ExtensionAttribute": {
                "node": [
                    "Any",
                    "name",
                    "ExtensionAttribute"
                ],
                "return": [
                    "None"
                ],
                "frame": []
            },
            "visit_Filter": {
                "node": [
                    "Node",
                    "Filter"
                ],
                "return": [
                    "None"
                ],
                "frame": []
            },
            "visit_FilterBlock": {
                "return": [],
                "frame": [
                    "FrameType"
                ],
                "node": [
                    "FilterBlock"
                ]
            },
            "visit_For": {
                "return": [
                    "None"
                ],
                "frame": [],
                "node": []
            },
            "visit_FromImport": {
                "return": [
                    "None"
                ],
                "frame": [
                    "typing.Any",
                    "toplevel",
                    "Frame",
                    "ImportFrame",
                    "frame",
                    "CustomFrameType",
                    "FrameType"
                ],
                "node": [
                    "ast.ImportFrom",
                    "typing.Any",
                    "node",
                    "ast",
                    "ast.AST",
                    "ImportFrom",
                    "names",
                    "tree.FromImport"
                ]
            },
            "visit_Getattr": {
                "return": [],
                "frame": [],
                "node": []
            },
            "visit_Getitem": {
                "frame": [
                    "visit"
                ],
                "return": [
                    "None"
                ],
                "node": []
            },
            "visit_If": {
                "return": [],
                "frame": [],
                "node": []
            },
            "visit_Import": {
                "return": [],
                "frame": [
                    "typing.Any"
                ],
                "node": [
                    "ast.Import",
                    "target",
                    "node"
                ]
            },
            "visit_ImportedName": {
                "frame": [
                    "frame",
                    "FrameType"
                ],
                "return": [
                    "None"
                ],
                "node": [
                    "ImportedName"
                ]
            },
            "visit_InternalName": {
                "frame": [
                    "frame",
                    "FrameType"
                ],
                "node": [
                    "InternalName"
                ],
                "return": []
            },
            "visit_Include": {
                "frame": [
                    "typing.Any",
                    "django.template.Context",
                    "visit"
                ],
                "node": [],
                "return": []
            },
            "visit_Keyword": {
                "node": [],
                "return": [],
                "frame": []
            },
            "visit_List": {
                "frame": [
                    "visit",
                    "frame"
                ],
                "return": [
                    "None"
                ],
                "node": [
                    "items",
                    "ListNode",
                    "node",
                    "List"
                ]
            },
            "visit_Macro": {
                "frame": [
                    "Frame",
                    "TemplateFrame",
                    "ContextFrame",
                    "MacroFrame"
                ],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_MarkSafe": {
                "node": [
                    "MarkSafe"
                ],
                "return": [
                    "None"
                ],
                "frame": [
                    "frame",
                    "Frame",
                    "visit"
                ]
            },
            "visit_MarkSafeIfAutoescape": {
                "return": [
                    "None"
                ],
                "node": [],
                "frame": [
                    "frame"
                ]
            },
            "visit_NSRef": {
                "node": [
                    "NSRef",
                    "attr",
                    "NSRefNode",
                    "ASTNode"
                ],
                "return": [
                    "None"
                ],
                "frame": [
                    "frame",
                    "FrameType",
                    "NodeFrame"
                ]
            },
            "visit_Name": {
                "frame": [
                    "toplevel",
                    "Frame",
                    "CustomFrame",
                    "Any",
                    "NameFrame",
                    "frame",
                    "NamedTuple",
                    "Context"
                ],
                "return": [],
                "node": []
            },
            "visit_Operand": {
                "return": [],
                "frame": [],
                "node": [
                    "Operand"
                ]
            },
            "visit_Output": {
                "return": [
                    "None"
                ],
                "node": [],
                "frame": [
                    "typing.Any"
                ]
            },
            "visit_OverlayScope": {
                "return": [
                    "None"
                ],
                "node": [
                    "OverlayScope"
                ],
                "frame": []
            },
            "visit_Scope": {
                "node": [
                    "Node"
                ],
                "return": [],
                "frame": []
            },
            "visit_ScopedEvalContextModifier": {
                "node": [
                    "ScopedEvalContextModifier",
                    "Node"
                ],
                "return": [],
                "frame": []
            },
            "visit_Slice": {
                "return": [],
                "frame": [],
                "node": []
            },
            "visit_Template": {
                "frame": [],
                "node": [],
                "return": []
            },
            "visit_TemplateData": {
                "return": [],
                "node": [
                    "nodes.TemplateData"
                ],
                "frame": []
            },
            "visit_Test": {
                "return": [],
                "frame": [
                    "visit",
                    "self.visit",
                    "frame"
                ],
                "node": [
                    "Test"
                ]
            },
            "visit_Tuple": {
                "return": [
                    "None"
                ],
                "frame": [
                    "visit",
                    "frame"
                ],
                "node": []
            },
            "write": {
                "return": [],
                "x": [
                    "str"
                ]
            },
            "visit_With": {
                "return": [
                    "None"
                ],
                "frame": [],
                "node": []
            },
            "writeline": {
                "node": [
                    "typing.Optional[typing.Any]"
                ],
                "extra": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "x": []
            },
            "write_commons": {
                "return": [
                    "None"
                ]
            }
        },
        "Frame": {
            "__init__": {
                "return": [
                    "None"
                ],
                "eval_ctx": [],
                "parent": [
                    "typing.Optional[ParentClass]",
                    "Optional[ParentClass]",
                    "typing.Optional[Any]",
                    "Optional[Any]",
                    "typing.Optional[Unknown]",
                    "Optional[ClassName]",
                    "block",
                    "Optional[ParentType]"
                ],
                "level": []
            },
            "copy": {
                "return": [
                    "self"
                ]
            },
            "inner": {
                "return": [
                    "Frame"
                ],
                "isolated": [
                    "bool"
                ]
            },
            "soft": {
                "return": []
            }
        },
        "DependencyFinderVisitor": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "visit_Block": {
                "return": [
                    "None"
                ],
                "node": [
                    "Node",
                    "AST",
                    "Block"
                ]
            },
            "visit_Filter": {
                "node": [],
                "return": [
                    "None"
                ]
            },
            "visit_Test": {
                "node": [
                    "Node",
                    "Test",
                    "AST",
                    "NodeVisitor"
                ],
                "return": []
            }
        },
        "MacroRef": {
            "__init__": {
                "node": [],
                "return": [
                    "None"
                ]
            }
        },
        "UndeclaredNameVisitor": {
            "__init__": {
                "names": [
                    "list[str]",
                    "typing.Iterable[str]"
                ],
                "return": []
            },
            "visit_Block": {
                "return": [],
                "node": [
                    "Node",
                    "AST",
                    "Block"
                ]
            },
            "visit_Name": {
                "return": [],
                "node": [
                    "typing.Any",
                    "ast.Name",
                    "self.names",
                    "ast",
                    "name",
                    "str"
                ]
            }
        },
        "global": {
            "_make_binop": {
                "return": [
                    "visitor",
                    "function",
                    "frame",
                    "Callable[[Any, Any, Any], Any]",
                    "Any",
                    "optimizeconst",
                    "Callable"
                ],
                "op": []
            },
            "_make_unop": {
                "op": [
                    "str"
                ],
                "return": [
                    "visitor",
                    "optimizeconst"
                ]
            },
            "find_undeclared": {
                "names": [
                    "set[str]",
                    "typing.Any",
                    "names",
                    "list[str]",
                    "UndeclaredNameVisitor",
                    "list[NameNode]",
                    "list[typing.Any]"
                ],
                "return": [
                    "List[str]",
                    "undeclared",
                    "Set"
                ],
                "nodes": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "generate": {
                "defer_init": [
                    "bool"
                ],
                "optimized": [],
                "stream": [
                    "typing.Optional[typing.IO]"
                ],
                "environment": [
                    "Environment",
                    "FileSystemLoader",
                    "typing.Any",
                    "TemplateEnvironment",
                    "BaseLoader"
                ],
                "filename": [
                    "str"
                ],
                "node": [
                    "nodes.Template"
                ],
                "name": [
                    "str",
                    "name"
                ],
                "return": [
                    "typing.Optional[str]",
                    "str"
                ]
            },
            "has_safe_repr": {
                "return": [],
                "value": [
                    "typing.Any",
                    "typing.Union[None, bool, int, float, complex, range, str, Markup, tuple, list, set, frozenset, dict]"
                ]
            },
            "optimizeconst": {
                "f": [],
                "return": [
                    "typing.Callable"
                ]
            }
        },
        "_FinalizeInfo": {
            "global": {
                "src": [
                    "str",
                    "src",
                    "CodeGenerator"
                ],
                "const": [
                    "const",
                    "typing.Any",
                    "dict",
                    "None",
                    "bool",
                    "True",
                    "Markup",
                    "Undefined",
                    "list",
                    "concat",
                    "float"
                ]
            }
        }
    },
    "jinja2.debug": {
        "global": {
            "fake_traceback": {
                "filename": [],
                "lineno": [
                    "int"
                ],
                "exc_value": [],
                "tb": [],
                "return": []
            },
            "get_template_locals": {
                "real_locals": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "rewrite_traceback_stack": {
                "return": [],
                "source": []
            }
        }
    },
    "jinja2.defaults": {
        "global": {
            "global": {
                "LINE_STATEMENT_PREFIX": [
                    "None"
                ],
                "NEWLINE_SEQUENCE": [
                    "str"
                ],
                "LINE_COMMENT_PREFIX": [
                    "None"
                ],
                "DEFAULT_POLICIES": []
            }
        }
    },
    "jinja2.environment": {
        "TemplateExpression": {
            "__call__": {
                "return": [],
                "args": [],
                "kwargs": []
            },
            "__init__": {
                "template": [
                    "str"
                ],
                "undefined_to_none": [
                    "typing.Any",
                    "bool"
                ],
                "return": []
            }
        },
        "TemplateModule": {
            "__html__": {
                "return": [
                    "Markup"
                ]
            },
            "__init__": {
                "body_stream": [
                    "typing.Optional[typing.Iterable]",
                    "typing.Optional[typing.Iterable[str]]"
                ],
                "context": [
                    "Context",
                    "object",
                    "dict"
                ],
                "template": [
                    "Template",
                    "name",
                    "Any"
                ],
                "return": [
                    "None",
                    "pass"
                ]
            },
            "__repr__": {
                "return": []
            },
            "__str__": {
                "return": []
            }
        },
        "Environment": {
            "__init__": {
                "auto_reload": [],
                "autoescape": [
                    "bool"
                ],
                "comment_start_string": [
                    "str"
                ],
                "comment_end_string": [
                    "str"
                ],
                "enable_async": [],
                "extensions": [],
                "line_comment_prefix": [
                    "str"
                ],
                "finalize": [
                    "typing.Optional[typing.Callable]",
                    "typing.Optional[typing.Any]",
                    "None",
                    "typing.Any",
                    "finalize"
                ],
                "block_end_string": [
                    "str"
                ],
                "line_statement_prefix": [
                    "str"
                ],
                "keep_trailing_newline": [
                    "bool"
                ],
                "bytecode_cache": [
                    "MemcachedBytecodeCache",
                    "BytecodeCache"
                ],
                "loader": [
                    "Optional[BaseLoader]",
                    "Optional[Any]",
                    "None",
                    "BaseLoader",
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "loader"
                ],
                "newline_sequence": [],
                "cache_size": [
                    "int"
                ],
                "optimized": [
                    "bool"
                ],
                "trim_blocks": [],
                "variable_end_string": [
                    "str"
                ],
                "variable_start_string": [],
                "block_start_string": [],
                "lstrip_blocks": [],
                "undefined": []
            },
            "_compile": {
                "source": [
                    "str"
                ],
                "return": [
                    "typing.Any",
                    "types.CodeType"
                ],
                "filename": [
                    "str"
                ]
            },
            "_filter_test_common": {
                "args": [
                    "list[typing.Any]",
                    "typing.Optional[list[typing.Any]]",
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.Sequence[typing.Any]]",
                    "typing.Any"
                ],
                "is_filter": [
                    "bool"
                ],
                "kwargs": [],
                "context": [],
                "eval_ctx": [
                    "EvalContext",
                    "Optional[EvalContext]",
                    "typing.Optional[EvalContext]"
                ],
                "return": [
                    "typing.Any",
                    "func"
                ],
                "name": [
                    "typing.Union[str, Undefined]",
                    "str"
                ],
                "value": [
                    "typing.Any"
                ]
            },
            "_generate": {
                "defer_init": [
                    "bool"
                ],
                "return": [],
                "name": [],
                "source": [
                    "str"
                ],
                "filename": []
            },
            "_load_template": {
                "globals": [
                    "dict[typing.Any, typing.Any]"
                ],
                "name": [
                    "str"
                ],
                "return": []
            },
            "_parse": {
                "filename": [
                    "str"
                ],
                "name": [],
                "return": [],
                "source": []
            },
            "_tokenize": {
                "filename": [
                    "typing.Optional[str]"
                ],
                "source": [],
                "name": [],
                "return": [
                    "typing.IO",
                    "typing.Iterable[Token]"
                ],
                "state": []
            },
            "add_extension": {
                "return": [],
                "extension": []
            },
            "call_filter": {
                "args": [
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "None"
                ],
                "kwargs": [],
                "name": [
                    "typing.Any",
                    "str"
                ],
                "context": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "return": [],
                "value": [
                    "typing.Any",
                    "value"
                ],
                "eval_ctx": []
            },
            "call_test": {
                "args": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "kwargs": [
                    "typing.Optional[dict]",
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "typing.Optional[typing.Any]"
                ],
                "eval_ctx": [
                    "None"
                ],
                "context": [
                    "typing.Any"
                ],
                "name": [
                    "str",
                    "typing.Any",
                    "name"
                ],
                "value": [
                    "typing.Any"
                ],
                "return": [
                    "typing.Any",
                    "bool"
                ]
            },
            "compile_expression": {
                "undefined_to_none": [
                    "bool"
                ],
                "return": [],
                "source": []
            },
            "compile_templates": {
                "extensions": [
                    "typing.Optional[typing.Any]",
                    "typing.Union[typing.Any, None]"
                ],
                "ignore_errors": [
                    "bool"
                ],
                "return": [],
                "filter_func": [
                    "typing.Callable[[typing.Any], bool]",
                    "typing.Callable",
                    "typing.Optional[typing.Callable[[str], bool]]"
                ],
                "zip": [
                    "str",
                    "typing.Optional[str]"
                ],
                "target": [
                    "str"
                ],
                "log_function": []
            },
            "extend": {
                "attributes": [
                    "dict"
                ],
                "return": [
                    "None",
                    "self",
                    "typing.NoReturn"
                ]
            },
            "from_string": {
                "globals": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [],
                "source": [
                    "str"
                ],
                "template_class": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ]
            },
            "get_or_select_template": {
                "parent": [],
                "return": [
                    "Template",
                    "typing.Union[Template, typing.Any]"
                ],
                "globals": [
                    "dict[typing.Any, typing.Any]"
                ],
                "template_name_or_list": [
                    "typing.Union[str, Undefined, Template]",
                    "Union[str, Undefined, List[Template]]",
                    "Union[str, Undefined, Template, List[Union[str, Undefined, Template]]]",
                    "typing.Union[str, Undefined, typing.List[Template]]",
                    "typing.Union[str, Undefined, typing.List[typing.Any]]",
                    "Union[str, Undefined, List[typing.Any]]"
                ]
            },
            "get_template": {
                "globals": [],
                "return": [
                    "Template",
                    "typing.Union[Template, typing.Any]"
                ],
                "name": [
                    "typing.Union[str, Template]"
                ],
                "parent": []
            },
            "getitem": {
                "return": [
                    "typing.Any"
                ],
                "obj": [
                    "typing.Any",
                    "typing.Union[list, dict, typing.Any]"
                ],
                "argument": []
            },
            "getattr": {
                "return": [
                    "typing.Any"
                ],
                "obj": [
                    "typing.Any"
                ],
                "attribute": []
            },
            "global": {
                "code_generator_class": [
                    "Type[CodeGenerator]",
                    "CodeGenerator",
                    ".compiler",
                    "t.Type[CodeGenerator]",
                    "t"
                ],
                "context_class": [],
                "template_class": [
                    "Type[Template]",
                    "Template",
                    "root",
                    "Environment",
                    "typing.Type[Template]",
                    "type[Template]",
                    "Type",
                    "object"
                ],
                "linked_to": [
                    "Optional[Environment]",
                    "typing.Optional[Environment]",
                    "Environment",
                    "None",
                    "Optional",
                    "Union[Environment, None]",
                    "Optional[X]"
                ]
            },
            "handle_exception": {
                "source": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            },
            "iter_extensions": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "join_path": {
                "template": [],
                "return": [
                    "str"
                ],
                "parent": []
            },
            "lex": {
                "name": [
                    "typing.Optional[str]"
                ],
                "source": [
                    "typing.Any"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "return": []
            },
            "list_templates": {
                "extensions": [],
                "return": [
                    "list[str]",
                    "names"
                ],
                "filter_func": [
                    "typing.Callable",
                    "Callable",
                    "x",
                    "typing.Optional[typing.Callable[[typing.Any], bool]]",
                    "bool",
                    "None",
                    "typing.Optional[typing.Callable]",
                    "typing.Any",
                    "TemplateType",
                    "Any"
                ]
            },
            "make_globals": {
                "d": [],
                "return": []
            },
            "overlay": {
                "auto_reload": [
                    "bool",
                    "typing.Any"
                ],
                "autoescape": [
                    "bool",
                    "typing.Any",
                    "typing.Union[bool, typing.Callable]"
                ],
                "comment_end_string": [
                    "str"
                ],
                "block_start_string": [
                    "str",
                    "typing.Any",
                    "typing.Optional[str]"
                ],
                "block_end_string": [],
                "bytecode_cache": [
                    "bool",
                    "typing.Any",
                    "typing.Optional[BytecodeCache]",
                    "missing",
                    "BytecodeCache"
                ],
                "comment_start_string": [],
                "enable_async": [
                    "bool",
                    "typing.Optional[bool]",
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "finalize": [],
                "line_comment_prefix": [
                    "str",
                    "typing.Optional[str]",
                    "typing.Any"
                ],
                "line_statement_prefix": [
                    "str",
                    "typing.Any"
                ],
                "cache_size": [],
                "lstrip_blocks": [],
                "newline_sequence": [],
                "loader": [
                    "typing.Any",
                    "missing",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[BaseLoader]"
                ],
                "optimized": [
                    "bool"
                ],
                "trim_blocks": [
                    "bool"
                ],
                "extensions": [],
                "return": [],
                "undefined": [],
                "variable_start_string": [
                    "str",
                    "typing.Any"
                ],
                "keep_trailing_newline": [],
                "variable_end_string": []
            },
            "parse": {
                "name": [
                    "Optional[str]",
                    "typing.Optional[str]"
                ],
                "source": [],
                "filename": [],
                "return": [
                    "typing.Any"
                ]
            },
            "preprocess": {
                "name": [],
                "source": [],
                "return": [],
                "filename": [
                    "str"
                ]
            },
            "select_template": {
                "globals": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Optional[dict[typing.Any, typing.Any]]"
                ],
                "names": [
                    "list[typing.Any]",
                    "list[str]",
                    "typing.Union[Undefined, list[typing.Any]]",
                    "typing.Union[Undefined, typing.Iterable[typing.Any]]",
                    "names",
                    "typing.Iterable[typing.Any]",
                    "Undefined",
                    "typing.Union[Undefined, typing.Iterable[str]]"
                ],
                "return": [],
                "parent": []
            }
        },
        "TemplateStream": {
            "__init__": {
                "gen": [
                    "int"
                ],
                "return": []
            },
            "__iter__": {
                "return": [
                    "self",
                    "typing.Iterator",
                    "MyClass",
                    "ClassName"
                ]
            },
            "__next__": {
                "return": []
            },
            "_buffered_generator": {
                "size": [],
                "return": [
                    "typing.Generator[bytes, None, None]",
                    "Iterator[bytes]",
                    "Iterator[typing.Any]",
                    "typing.Iterator[bytes]",
                    "typing.Iterator[typing.Any]",
                    "typing.Generator[typing.Any, None, None]"
                ]
            },
            "dump": {
                "errors": [],
                "fp": [
                    "typing.Union[str,typing.IO]"
                ],
                "encoding": [
                    "typing.Optional[str]",
                    "str"
                ],
                "return": []
            },
            "enable_buffering": {
                "size": [
                    "int"
                ],
                "return": []
            },
            "disable_buffering": {
                "return": []
            }
        },
        "Template": {
            "__new__": {
                "autoescape": [
                    "bool"
                ],
                "block_start_string": [
                    "str"
                ],
                "comment_end_string": [
                    "str"
                ],
                "block_end_string": [],
                "enable_async": [
                    "bool"
                ],
                "extensions": [
                    "tuple",
                    "typing.Iterable[str]",
                    "typing.Tuple",
                    "typing.Tuple[str]",
                    "frozenset"
                ],
                "line_statement_prefix": [
                    "str"
                ],
                "finalize": [
                    "typing.Optional[typing.Callable]",
                    "typing.Optional[typing.Any]",
                    "None",
                    "finalize"
                ],
                "optimized": [
                    "bool"
                ],
                "newline_sequence": [
                    "str"
                ],
                "keep_trailing_newline": [
                    "bool"
                ],
                "return": [],
                "line_comment_prefix": [
                    "str"
                ],
                "undefined": [],
                "trim_blocks": [
                    "bool"
                ],
                "variable_end_string": [],
                "source": [],
                "variable_start_string": [],
                "lstrip_blocks": [],
                "comment_start_string": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_from_namespace": {
                "globals": [],
                "return": [
                    "t"
                ],
                "namespace": [
                    "dict[str, typing.Any]"
                ],
                "environment": [
                    "typing.Any",
                    "Environment",
                    "FileSystemLoader",
                    "object"
                ]
            },
            "_get_default_module": {
                "return": [
                    "module",
                    "typing.Any"
                ],
                "ctx": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[ContextMeta]",
                    "ContextMeta",
                    "Optional[typing.Any]"
                ]
            },
            "_get_default_module_async": {
                "return": [],
                "ctx": []
            },
            "from_module_dict": {
                "environment": [
                    "typing.Any",
                    "Any",
                    "Environment"
                ],
                "globals": [],
                "return": [],
                "module_dict": []
            },
            "from_code": {
                "globals": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "cls",
                    "TemplateNotFound",
                    "Template"
                ],
                "uptodate": [
                    "typing.Optional[typing.Callable]",
                    "typing.Optional[typing.Callable[[], bool]]"
                ],
                "environment": [
                    "typing.Any",
                    "Environment",
                    "FileSystemLoader"
                ],
                "code": []
            },
            "generate": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "typing.Iterable[typing.Tuple[str, typing.Any]]",
                    "typing.Tuple[typing.Any, ...]",
                    "typing.Any"
                ],
                "return": [
                    "typing.Generator[typing.Union[typing.Any,None,None]]",
                    "typing.Generator[typing.Union[typing.Any, Exception], None, None]",
                    "generate",
                    "yield",
                    "asyncio.run",
                    "return",
                    "typing.AsyncGenerator[typing.Union[typing.Any,None,None]]",
                    "typing.Generator[typing.Union[typing.Any, typing.Any], None, None]",
                    "typing.Generator[typing.Union[typing.Any,Exception], None, None]"
                ]
            },
            "generate_async": {
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "args": [
                    "Iterable",
                    "Iterable[tuple]",
                    "tuple",
                    "Iterable[Tuple[Any, Any]]",
                    "tuple[tuple[str, Any]]"
                ],
                "return": []
            },
            "get_corresponding_lineno": {
                "lineno": [
                    "int"
                ],
                "return": []
            },
            "global": {
                "blocks": [
                    "blocks",
                    "Context",
                    "Iterator[str]",
                    "root",
                    "Template",
                    "str",
                    "compile"
                ],
                "_uptodate": [],
                "_debug_info": [
                    "str",
                    "Template",
                    "root",
                    "compile"
                ],
                "filename": [
                    "filename",
                    "Optional[str]",
                    "typing.Optional[str]",
                    "root",
                    "lex",
                    "Environment",
                    "str",
                    "None",
                    "ZipFile",
                    "compile",
                    "Template",
                    "t.Optional[str]"
                ],
                "environment": [
                    "Environment",
                    "environment",
                    "Template",
                    "root",
                    "cls",
                    "TemplateModule",
                    "t.Type[Environment]"
                ],
                "_module": [
                    "TemplateModule",
                    "None",
                    "Optional[TemplateModule]",
                    "typing.Optional[TemplateModule]",
                    "module",
                    "typing"
                ],
                "environment_class": [
                    "Environment",
                    "Type[Environment]",
                    "t.Type[Environment]",
                    "typing",
                    "t"
                ],
                "name": [
                    "name",
                    "Optional[str]",
                    "None",
                    "t.Optional[str]",
                    "typing.Optional[str]",
                    "str",
                    "Union[str, None]",
                    "TemplateModule",
                    "Union[str, Template]",
                    "template.name",
                    "Template",
                    "namespace"
                ],
                "globals": [
                    "root",
                    "globals",
                    "None",
                    "t.Any",
                    "d",
                    "typing.MutableMapping[str, typing.Any]",
                    "collections.ChainMap",
                    "MutableMapping[str, t.Any]"
                ],
                "root_render_func": [
                    "Context",
                    "Template",
                    "generate",
                    "render",
                    "Iterator[str]",
                    "namespace",
                    "str",
                    "Environment",
                    "compile",
                    "root",
                    "t.Iterator[str]"
                ]
            },
            "make_module": {
                "return": [
                    "TemplateModule"
                ],
                "shared": [
                    "bool"
                ],
                "vars": [],
                "locals": [
                    "typing.Optional[dict[str, typing.Any]]",
                    "dict[str, typing.Any]",
                    "None",
                    "locals",
                    "typing.Optional[typing.Any]"
                ]
            },
            "make_module_async": {
                "locals": [
                    "typing.Optional[dict[str, typing.Any]]",
                    "typing.Optional[typing.Any]"
                ],
                "shared": [
                    "bool"
                ],
                "return": [
                    "TemplateModule"
                ],
                "vars": [
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]",
                    "typing.Optional[typing.Dict[typing.Any, typing.Any]]",
                    "typing.Optional[typing.Any]"
                ]
            },
            "new_context": {
                "locals": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[typing.Dict[str, typing.Any]]"
                ],
                "return": [],
                "vars": [
                    "dict[str, typing.Any]",
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "typing.Optional[dict[str, typing.Any]]",
                    "None",
                    "typing.Optional[typing.Dict[str, typing.Any]]",
                    "Optional[dict]",
                    "Optional[dict[str, typing.Any]]"
                ],
                "shared": []
            },
            "render": {
                "args": [
                    "tuple",
                    "Iterable"
                ],
                "kwargs": [],
                "return": []
            },
            "render_async": {
                "return": [
                    "str"
                ],
                "args": [],
                "kwargs": []
            },
            "stream": {
                "args": [],
                "return": [
                    "TemplateStream"
                ],
                "kwargs": []
            }
        },
        "global": {
            "_environment_config_check": {
                "return": [
                    "environment",
                    "Any"
                ],
                "environment": []
            },
            "copy_cache": {
                "cache": [
                    "typing.Union[None, dict, typing.Any]",
                    "typing.Union[dict, typing.Any]",
                    "typing.Union[dict, typing.Any, None]",
                    "typing.Optional[typing.Dict]",
                    "typing.Union[dict, LRUCache]",
                    "typing.Optional[typing.Dict[str, typing.Any]]"
                ],
                "return": []
            },
            "create_cache": {
                "return": [
                    "typing.Union[None, dict, LRUCache]"
                ],
                "size": []
            },
            "get_spontaneous_environment": {
                "args": [
                    "tuple[typing.Any, ...]",
                    "tuple[typing.Any,...]"
                ],
                "cls": [
                    "typing.Type[typing.Any]",
                    "typing.Type[cls]",
                    "Type[typing.Any]"
                ],
                "return": [
                    "cls",
                    "Environment",
                    "typing.Any"
                ]
            },
            "load_extensions": {
                "environment": [],
                "return": [
                    "typing.Any"
                ],
                "extensions": []
            }
        }
    },
    "jinja2.exceptions": {
        "TemplateError": {
            "__init__": {
                "message": [
                    "typing.Optional[str]"
                ],
                "return": []
            }
        },
        "TemplateNotFound": {
            "__init__": {
                "message": [
                    "typing.Optional[str]"
                ],
                "return": [],
                "name": []
            },
            "global": {
                "message": [
                    "str",
                    "t.Optional[str]",
                    "TemplateError",
                    "TemplateSyntaxError",
                    "message",
                    "Undefined",
                    "None",
                    "TemplateRuntimeError",
                    "Optional[str]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "TemplateSyntaxError": {
            "__init__": {
                "name": [
                    "str"
                ],
                "filename": [
                    "typing.Optional[str]",
                    "typing.Optional[builtins.str]"
                ],
                "message": [
                    "str"
                ],
                "lineno": [],
                "return": []
            },
            "__str__": {
                "return": []
            }
        },
        "TemplatesNotFound": {
            "__init__": {
                "return": [
                    "None"
                ],
                "message": [
                    "typing.Optional[str]"
                ],
                "names": []
            }
        }
    },
    "jinja2.ext": {
        "Extension": {
            "__init__": {
                "environment": [
                    "str"
                ],
                "return": [
                    "None",
                    "environment"
                ]
            },
            "__init_subclass__": {
                "return": [
                    "None"
                ]
            },
            "attr": {
                "lineno": [
                    "int",
                    "Optional[int]"
                ],
                "name": [
                    "str"
                ],
                "return": []
            },
            "bind": {
                "environment": [],
                "return": []
            },
            "call_method": {
                "args": [
                    "list[typing.Any]"
                ],
                "dyn_args": [],
                "return": [
                    "nodes.Call"
                ],
                "kwargs": [],
                "dyn_kwargs": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "lineno": [
                    "None",
                    "int"
                ],
                "name": [
                    "typing.Any",
                    "str"
                ]
            },
            "filter_stream": {
                "return": [
                    "Stream",
                    "typing.Any"
                ],
                "stream": []
            },
            "global": {
                "identifier": [
                    "str",
                    "t.ClassVar[str]",
                    "identifier",
                    "typing",
                    "typing.ClassVar[str]",
                    "Extension"
                ],
                "tags": [
                    "set[str]",
                    "InternationalizationExtension",
                    "tags",
                    "typing",
                    "DebugExtension",
                    "t"
                ]
            },
            "parse": {
                "return": [
                    "None"
                ],
                "parser": [
                    "typing.Any",
                    "object",
                    "parser"
                ]
            },
            "preprocess": {
                "filename": [],
                "name": [],
                "return": [
                    "typing.Any"
                ],
                "source": [
                    "typing.Any",
                    "str"
                ]
            }
        },
        "_CommentFinder": {
            "__init__": {
                "comment_tags": [
                    "list[str]"
                ],
                "tokens": [],
                "return": [
                    "None"
                ]
            },
            "find_comments": {
                "return": [
                    "list",
                    "[]",
                    "return []"
                ],
                "lineno": [
                    "int"
                ]
            },
            "find_backwards": {
                "offset": [
                    "int"
                ],
                "return": []
            }
        },
        "InternationalizationExtension": {
            "__init__": {
                "return": [],
                "environment": [
                    "extend",
                    "environment"
                ]
            },
            "_extract": {
                "gettext_functions": [
                    "tuple[typing.Callable]",
                    "typing.Any",
                    "set[str]",
                    "set[typing.Callable]",
                    "typing.Union[list[typing.Any], set[typing.Any]]",
                    "typing.Iterable[str]",
                    "set[typing.Any]",
                    "list[Callable]"
                ],
                "return": [
                    "typing.Any",
                    "typing.List[typing.Tuple]"
                ],
                "source": []
            },
            "_install": {
                "translations": [
                    "typing.Any",
                    "gettext.NullTranslations",
                    "gettext.GNUTranslations"
                ],
                "return": [
                    "None"
                ],
                "newstyle": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[bool]"
                ]
            },
            "_install_callables": {
                "ngettext": [
                    "typing.Callable"
                ],
                "gettext": [
                    "typing.Callable[[str], str]",
                    "typing.Callable"
                ],
                "newstyle": [
                    "typing.Optional[bool]"
                ],
                "npgettext": [],
                "pgettext": [
                    "typing.Optional[typing.Callable]"
                ],
                "return": [
                    "None"
                ]
            },
            "_install_null": {
                "return": [
                    "None"
                ],
                "newstyle": []
            },
            "_make_node": {
                "return": [
                    "nodes.Output",
                    "typing.Any"
                ],
                "num_called_num": [],
                "plural": [
                    "str"
                ],
                "singular": [
                    "str"
                ],
                "plural_expr": [
                    "str"
                ],
                "context": [
                    "typing.Any",
                    "nodes.Const",
                    "float",
                    "Const",
                    "nodes",
                    "int",
                    "typing.Optional[typing.Any]",
                    "context"
                ],
                "vars_referenced": [
                    "bool",
                    "typing.List[typing.Any]",
                    "List[typing.Any]"
                ],
                "variables": [
                    "dict",
                    "variables"
                ]
            },
            "_trim_whitespace": {
                "return": [],
                "_ws_re": [
                    "Any",
                    "str",
                    "re.Pattern",
                    "RegexFlag",
                    "re"
                ],
                "string": []
            },
            "_parse_block": {
                "parser": [],
                "return": [
                    "referenced",
                    "buf",
                    "concat",
                    "tuple",
                    "tuple[Any, Any]",
                    "parser",
                    "tuple[Unknown, Unknown]",
                    "Tuple[Unknown, Unknown]"
                ],
                "allow_pluralize": []
            },
            "_uninstall": {
                "return": [
                    "None"
                ],
                "translations": [
                    "typing.Any",
                    "list[str]",
                    "list[typing.Any]",
                    "dict[str, str]",
                    "typing.Union[list, dict]"
                ]
            },
            "parse": {
                "return": [
                    "typing.Union[list[typing.Any], typing.Any]",
                    "Union[List[Any, Node], Node]",
                    "Union[List[Any], Any]",
                    "Union[list[typing.Any], typing.Any]",
                    "typing.List[typing.Union[typing.Any, Node]]",
                    "typing.Union[list[typing.Union[Node, Any]], Node]",
                    "typing.Union[list[typing.Any],typing.Any]",
                    "typing.Union[typing.List[typing.Any], typing.Any]",
                    "Union[List[Union[Any, Node]], Node]",
                    "Union[list[typing.Any], Node]",
                    "Union[List[Any], Node]",
                    "typing.List[typing.Union[Node, Any]]"
                ],
                "parser": [
                    "TemplateParser",
                    "Parser",
                    "current.type",
                    "parser.fail",
                    "stream.current",
                    "TemplateAssertionError"
                ]
            }
        },
        "global": {
            "_gettext_alias": {
                "args": [],
                "return": [],
                "__context": [
                    "typing.Callable"
                ],
                "kwargs": []
            },
            "_make_new_gettext": {
                "return": [
                    "function",
                    "gettext"
                ],
                "func": [
                    "typing.Callable",
                    "func"
                ]
            },
            "_make_new_ngettext": {
                "func": [
                    "typing.Callable"
                ],
                "return": []
            },
            "_make_new_npgettext": {
                "return": [],
                "func": [
                    "typing.Callable",
                    "func"
                ]
            },
            "_make_new_pgettext": {
                "return": [],
                "func": [
                    "typing.Callable",
                    "func",
                    "types.FunctionType"
                ]
            },
            "babel_extract": {
                "options": [
                    "dict[str, typing.Union[str, bool]]",
                    "get"
                ],
                "comment_tags": [],
                "return": [],
                "fileobj": [
                    "typing.IO",
                    "io.IOBase"
                ],
                "keywords": []
            },
            "extract_from_ast": {
                "ast": [
                    "typing.Any",
                    "nodes.Node",
                    "ast.Node",
                    "nodes.Call",
                    "ast",
                    "ast.NodeVisitor",
                    "ast.AST"
                ],
                "babel_style": [
                    "bool"
                ],
                "gettext_functions": [],
                "return": [
                    "Generator[Tuple[int, str, Any], None, None]",
                    "Generator[tuple[int, str, Any], None, None]",
                    "tuple[int, str, Any]"
                ]
            },
            "global": {
                "GETTEXT_FUNCTIONS": []
            }
        },
        "DebugExtension": {
            "_render": {
                "return": [],
                "context": []
            },
            "parse": {
                "return": [
                    "Node"
                ],
                "parser": [
                    "typing.Any",
                    "parser",
                    "object",
                    "lxml.etree.XMLParser"
                ]
            }
        },
        "_TranslationsBasic": {
            "gettext": {
                "message": [],
                "return": []
            },
            "ngettext": {
                "plural": [
                    "str"
                ],
                "singular": [
                    "str"
                ],
                "n": [
                    "int"
                ],
                "return": []
            }
        },
        "_TranslationsContext": {
            "npgettext": {
                "context": [],
                "n": [
                    "int"
                ],
                "plural": [],
                "return": [],
                "singular": [
                    "str"
                ]
            },
            "pgettext": {
                "message": [
                    "str",
                    "message"
                ],
                "context": [],
                "return": [
                    "pgettext",
                    "InternationalizationExtension",
                    "str",
                    "typing.Callable[[Context, str, str, typing.Any], str]",
                    "t.Callable[..., str]"
                ]
            }
        },
        "ExprStmtExtension": {
            "parse": {
                "return": [
                    "Node"
                ],
                "parser": []
            }
        },
        "LoopControlExtension": {
            "parse": {
                "return": [
                    "Node",
                    "Continue"
                ],
                "parser": [
                    "Parser",
                    "typing.Any"
                ]
            }
        }
    },
    "jinja2.filters": {
        "_GroupTuple": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__repr__": {
                "return": []
            },
            "global": {
                "grouper": [
                    "t.Any",
                    "grouper",
                    "expr",
                    "groupby",
                    "typing.Any"
                ],
                "list": []
            }
        },
        "global": {
            "_min_or_max": {
                "case_sensitive": [
                    "bool"
                ],
                "attribute": [
                    "str"
                ],
                "func": [
                    "typing.Callable"
                ],
                "environment": [
                    "typing.Any"
                ],
                "value": [],
                "return": []
            },
            "_prepare_attribute_parts": {
                "attr": [
                    "typing.Union[None, str, typing.Any]",
                    "attr",
                    "typing.Union[str, typing.Any]",
                    "str"
                ],
                "return": [
                    "attr",
                    "None",
                    "typing.List[typing.Union[int, str, typing.Any]]",
                    "str",
                    "typing.List[typing.Union[builtins.int, builtins.str, typing.Any]]",
                    "split",
                    "List[Any]"
                ]
            },
            "async_select_or_reject": {
                "args": [
                    "list[typing.Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "kwargs": [],
                "context": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Any",
                    "typing.Union[dict, object]",
                    "typing.Dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "typing.AsyncGenerator[typing.Any, None]"
                ],
                "lookup_attr": [],
                "modfunc": [
                    "typing.Callable"
                ],
                "value": [
                    "typing.AsyncIterable[typing.Any]"
                ]
            },
            "do_attr": {
                "name": [
                    "str"
                ],
                "return": [],
                "obj": [
                    "typing.Any",
                    "object"
                ],
                "environment": []
            },
            "do_capitalize": {
                "s": [],
                "return": [
                    "str"
                ]
            },
            "do_batch": {
                "fill_with": [
                    "Any",
                    "Optional[Any]",
                    "None"
                ],
                "value": [
                    "list[typing.Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "return": [],
                "linecount": [
                    "int"
                ]
            },
            "do_center": {
                "width": [],
                "value": [],
                "return": []
            },
            "do_default": {
                "boolean": [
                    "bool"
                ],
                "default_value": [],
                "value": [
                    "typing.Any"
                ],
                "return": [
                    "str",
                    "Any"
                ]
            },
            "do_dictsort": {
                "reverse": [],
                "value": [],
                "return": [
                    "list[typing.Tuple[typing.Any, typing.Any]]",
                    "list[typing.Any]"
                ],
                "by": [],
                "case_sensitive": [
                    "bool"
                ]
            },
            "do_filesizeformat": {
                "binary": [],
                "return": [],
                "value": []
            },
            "do_first": {
                "return": [
                    "typing.Any",
                    "typing.Awaitable[typing.Any]"
                ],
                "environment": [
                    "undefined",
                    "typing.Any",
                    "environment"
                ],
                "seq": [
                    "typing.AsyncIterable[typing.Any]"
                ]
            },
            "do_float": {
                "value": [
                    "str"
                ],
                "default": [
                    "float"
                ],
                "return": []
            },
            "do_forceescape": {
                "value": [
                    "typing.Any",
                    "typing.Union[str, typing.Any]"
                ],
                "return": []
            },
            "do_format": {
                "args": [
                    "tuple[typing.Any, ...]"
                ],
                "kwargs": [],
                "value": [],
                "return": [
                    "str",
                    "args"
                ]
            },
            "do_groupby": {
                "default": [],
                "attribute": [],
                "case_sensitive": [],
                "return": [
                    "typing.Any",
                    "typing.Dict"
                ],
                "value": [],
                "environment": []
            },
            "do_indent": {
                "blank": [],
                "return": [],
                "first": [],
                "s": [],
                "width": [
                    "typing.Union[str, int]",
                    "typing.Union[int, str]"
                ]
            },
            "do_int": {
                "base": [],
                "default": [
                    "int"
                ],
                "value": [
                    "typing.Union[str, int, float]",
                    "typing.Union[int, float, str]"
                ],
                "return": []
            },
            "do_join": {
                "attribute": [
                    "None"
                ],
                "d": [],
                "return": [
                    "str",
                    "list",
                    "attribute"
                ],
                "value": [
                    "typing.Any",
                    "typing.Awaitable[typing.Any]"
                ],
                "eval_ctx": [
                    "EvalContextModifier"
                ]
            },
            "do_items": {
                "return": [
                    "typing.Iterator[tuple[typing.Any, typing.Any]]",
                    "typing.Union[None, typing.Iterator[tuple[typing.Any, typing.Any]]]",
                    "typing.Optional[typing.Iterator[tuple[typing.Any, typing.Any]]]"
                ],
                "value": []
            },
            "do_list": {
                "return": [
                    "list[typing.Any]",
                    "typing.Any",
                    "Coroutine[typing.Any, typing.Any, typing.List[typing.Any]]",
                    "typing.Awaitable[typing.Any]",
                    "typing.Awaitable[list[typing.Any]]",
                    "Coroutine[typing.Any, typing.Any, typing.Any]",
                    "typing.Coroutine[typing.Any, typing.Any, typing.List[typing.Any]]",
                    "typing.Coroutine[typing.Any, typing.Any, typing.Any]",
                    "typing.Awaitable[typing.List[typing.Any]]"
                ],
                "value": [
                    "typing.Any",
                    "value"
                ]
            },
            "do_lower": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "do_last": {
                "seq": [
                    "typing.Iterable",
                    "Iterable",
                    "typing.Sequence",
                    "typing.Iterable[typing.Any]"
                ],
                "environment": [],
                "return": [
                    "typing.Any",
                    "seq",
                    "environment.undefined"
                ]
            },
            "do_mark_safe": {
                "value": [
                    "str"
                ],
                "return": []
            },
            "do_mark_unsafe": {
                "return": [
                    "str"
                ],
                "value": []
            },
            "do_max": {
                "attribute": [],
                "return": [],
                "environment": [],
                "value": [],
                "case_sensitive": []
            },
            "do_min": {
                "attribute": [
                    "Optional[str]",
                    "typing.Optional[typing.Any]",
                    "Optional[typing.Any]",
                    "typing.Any"
                ],
                "case_sensitive": [],
                "environment": [
                    "Any",
                    "dict",
                    "object",
                    "Environment"
                ],
                "return": [],
                "value": []
            },
            "do_pprint": {
                "return": [],
                "value": []
            },
            "do_random": {
                "return": [
                    "Any",
                    "str"
                ],
                "seq": [],
                "context": [
                    "typing.Any",
                    "Context",
                    "dict",
                    "RequestContext"
                ]
            },
            "do_reject": {
                "args": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "tuple[typing.Any, ...]",
                    "typing.Any"
                ],
                "return": [
                    "typing.Awaitable[typing.Any]",
                    "typing.Any",
                    "typing.Awaitable[bool]"
                ],
                "kwargs": [],
                "context": [
                    "typing.Any",
                    "dict[typing.Any, typing.Any]",
                    "context"
                ],
                "value": []
            },
            "do_rejectattr": {
                "args": [
                    "typing.Iterable[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "tuple[typing.Any, ...]",
                    "typing.Union[list, tuple]",
                    "tuple[typing.Any]"
                ],
                "return": [
                    "typing.Any",
                    "list[typing.Any]",
                    "list"
                ],
                "value": [],
                "kwargs": [],
                "context": [
                    "typing.Any",
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "do_replace": {
                "count": [
                    "typing.Optional[int]"
                ],
                "new": [
                    "str",
                    "Any",
                    "new"
                ],
                "old": [],
                "eval_ctx": [],
                "return": [],
                "s": []
            },
            "do_round": {
                "method": [
                    "str"
                ],
                "precision": [
                    "int"
                ],
                "return": [],
                "value": []
            },
            "do_select": {
                "args": [
                    "typing.Sequence[typing.Any]",
                    "typing.Iterable[typing.Any]"
                ],
                "context": [
                    "typing.Any"
                ],
                "return": [
                    "typing.Awaitable[typing.Any]",
                    "awaitable",
                    "Awaitable",
                    "typing.Any"
                ],
                "value": [
                    "typing.Any"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]",
                    "dict"
                ]
            },
            "do_selectattr": {
                "args": [
                    "tuple[typing.Any, ...]",
                    "typing.Sequence[typing.Any]",
                    "typing.Any",
                    "list[typing.Any]",
                    "tuple[typing.Any]"
                ],
                "return": [
                    "typing.Any"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]",
                    "dict"
                ],
                "context": [
                    "typing.Any",
                    "context"
                ],
                "value": [
                    "typing.Any",
                    "typing.Iterable[typing.Any]"
                ]
            },
            "do_slice": {
                "slices": [
                    "typing.Any",
                    "list[slice]",
                    "typing.Iterable[slice]",
                    "list[Slice]",
                    "typing.Union[list[slice], tuple[slice, ...]]",
                    "typing.Union[list[slice], tuple[slice]]",
                    "list[typing.Union[int, slice]]",
                    "list[typing.Union[slice,...]]"
                ],
                "return": [
                    "typing.Any",
                    "Any",
                    "typing.Awaitable[typing.List]",
                    "typing.Awaitable[list]",
                    "typing.List",
                    "slices"
                ],
                "value": [],
                "fill_with": []
            },
            "do_sort": {
                "attribute": [
                    "Optional[str]",
                    "None",
                    "attribute",
                    "typing.Optional[str]",
                    "typing.Optional[typing.Any]"
                ],
                "reverse": [
                    "bool"
                ],
                "environment": [],
                "value": [
                    "typing.Iterable"
                ],
                "case_sensitive": [],
                "return": [
                    "list",
                    "list[Any]",
                    "list[typing.Any]"
                ]
            },
            "do_striptags": {
                "return": [
                    "str"
                ],
                "value": [
                    "typing.Any",
                    "typing.Union[str, typing.Any]"
                ]
            },
            "do_sum": {
                "attribute": [],
                "start": [],
                "environment": [],
                "iterable": [
                    "typing.AsyncIterable[typing.Any]"
                ],
                "return": [
                    "typing.Any"
                ]
            },
            "do_title": {
                "s": [
                    "str"
                ],
                "return": []
            },
            "do_tojson": {
                "return": [
                    "str"
                ],
                "value": [
                    "typing.Any",
                    "None"
                ],
                "indent": [],
                "eval_ctx": []
            },
            "do_trim": {
                "chars": [
                    "typing.Optional[str]",
                    "Optional[str]"
                ],
                "return": [
                    "str"
                ],
                "value": [
                    "Any",
                    "str"
                ]
            },
            "do_truncate": {
                "killwords": [
                    "bool"
                ],
                "end": [
                    "str"
                ],
                "length": [],
                "leeway": [
                    "Optional[Any]",
                    "Optional[Unknown]",
                    "int",
                    "None",
                    "Optional[int]"
                ],
                "s": [
                    "str"
                ],
                "return": [],
                "env": []
            },
            "do_unique": {
                "case_sensitive": [],
                "value": [],
                "return": [
                    "typing.Any",
                    "typing.List[typing.Any]",
                    "value",
                    "attribute",
                    "typing.Awaitable[typing.List[typing.Any]]"
                ],
                "environment": [
                    "Context",
                    "environment",
                    "Environment",
                    "Any"
                ],
                "attribute": []
            },
            "do_upper": {
                "s": [
                    "str"
                ],
                "return": [
                    "str"
                ]
            },
            "do_urlencode": {
                "value": [
                    "typing.Union[str, dict[typing.Any, typing.Any], typing.Iterable[typing.Any]]",
                    "typing.Union[str, typing.Dict[typing.Any, typing.Any], typing.Iterable[typing.Any]]",
                    "typing.Union[str, dict, typing.Iterable]",
                    "typing.Union[str, typing.Iterable[typing.Any], dict[typing.Any, typing.Any]]"
                ],
                "return": []
            },
            "do_urlize": {
                "nofollow": [],
                "extra_schemes": [
                    "typing.Optional[typing.Tuple[str, ...]]",
                    "typing.Optional[typing.Iterable[str]]",
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.Tuple[str, ...]"
                ],
                "rel": [],
                "trim_url_limit": [
                    "int"
                ],
                "target": [],
                "value": [],
                "eval_ctx": [
                    "typing.Any",
                    "EvalContext"
                ],
                "return": []
            },
            "do_wordcount": {
                "return": [
                    "int"
                ],
                "s": [
                    "str",
                    "typing.Union[str, typing.Any]",
                    "typing.Union[str, bytes]"
                ]
            },
            "do_wordwrap": {
                "s": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "return": [
                    "str"
                ],
                "break_long_words": [],
                "environment": [
                    "typing.Any",
                    "environment"
                ],
                "wrapstring": [
                    "Optional[str]"
                ],
                "break_on_hyphens": [
                    "bool"
                ]
            },
            "do_xmlattr": {
                "d": [],
                "eval_ctx": [],
                "autospace": [],
                "return": []
            },
            "make_attrgetter": {
                "attribute": [
                    "str"
                ],
                "default": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "attrgetter",
                    "Optional[Any]"
                ],
                "postprocess": [
                    "Optional[Callable]",
                    "Optional[Callable[[Any], Any]]",
                    "attrgetter",
                    "postprocess"
                ],
                "return": [],
                "environment": []
            },
            "ignore_case": {
                "return": [
                    "str",
                    "V",
                    "typing.Union[V, str]",
                    "typing.Union[V, builtins.str]"
                ],
                "value": [
                    "typing.Union[str, V]",
                    "typing.Union[V, str]",
                    "typing.Union[V, builtins.str]"
                ]
            },
            "make_multi_attrgetter": {
                "attribute": [
                    "typing.Union[str, Any]",
                    "typing.Union[str, typing.Any]"
                ],
                "return": [
                    "attrgetter",
                    "Callable",
                    "item",
                    "postprocess",
                    "attribute"
                ],
                "postprocess": [
                    "Optional[Callable]",
                    "Optional[Callable[[Any], Any]]",
                    "postprocess",
                    "typing.Callable"
                ],
                "environment": []
            },
            "prepare_map": {
                "args": [
                    "list[typing.Any]",
                    "list[str]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "context": [
                    "typing.Any",
                    "object",
                    "Context",
                    "environment",
                    "context",
                    "ContextType",
                    "Any"
                ],
                "return": []
            },
            "prepare_select_or_reject": {
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "typing.Callable",
                    "Callable",
                    "modfunc",
                    "callable"
                ],
                "modfunc": [],
                "context": [
                    "UserContext",
                    "typing.Any"
                ],
                "lookup_attr": [
                    "bool",
                    "typing.Optional[str]"
                ]
            },
            "select_or_reject": {
                "context": [
                    "typing.Any",
                    "dict",
                    "object"
                ],
                "args": [],
                "kwargs": [],
                "lookup_attr": [
                    "str"
                ],
                "modfunc": [
                    "typing.Callable"
                ],
                "value": [],
                "return": []
            },
            "sync_do_first": {
                "seq": [
                    "typing.Iterable[typing.Any]"
                ],
                "environment": [
                    "undefined",
                    "typing.Any",
                    "environment",
                    "Environment",
                    "Any"
                ],
                "return": [
                    "typing.Any",
                    "environment.undefined"
                ]
            },
            "sync_do_groupby": {
                "attribute": [
                    "str",
                    "typing.Union[str, typing.List[str]]"
                ],
                "case_sensitive": [],
                "environment": [
                    "Environment",
                    "typing.Any"
                ],
                "value": [],
                "default": [],
                "return": []
            },
            "sync_do_join": {
                "eval_ctx": [],
                "attribute": [],
                "d": [
                    "str",
                    "typing.Any",
                    "typing.Union[str, typing.Any]"
                ],
                "return": [],
                "value": [
                    "typing.Iterable[typing.Any]",
                    "str"
                ]
            },
            "sync_do_list": {
                "value": [],
                "return": [
                    "list[typing.Any]"
                ]
            },
            "sync_do_reject": {
                "kwargs": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "args": [],
                "return": [
                    "typing.Any"
                ],
                "context": [],
                "value": []
            },
            "sync_do_rejectattr": {
                "args": [
                    "tuple[typing.Any, ...]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "value": [],
                "context": [],
                "return": []
            },
            "sync_do_select": {
                "args": [
                    "tuple[typing.Any, ...]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": [],
                "value": [],
                "context": [
                    "typing.Any",
                    "dict[str, typing.Any]"
                ]
            },
            "sync_do_selectattr": {
                "args": [
                    "tuple[typing.Any, ...]"
                ],
                "context": [
                    "dict[str, typing.Any]",
                    "typing.Any"
                ],
                "return": [],
                "value": [],
                "kwargs": []
            },
            "sync_do_slice": {
                "fill_with": [],
                "slices": [],
                "return": [
                    "typing.Iterator",
                    "typing.Generator",
                    "typing.Generator[Any, None, None]",
                    "typing.Iterator[Any]"
                ],
                "value": [
                    "Iterable",
                    "iterable",
                    "object",
                    "tuple",
                    "collections.abc",
                    "Any",
                    "bytearray"
                ]
            },
            "sync_do_sum": {
                "start": [],
                "environment": [],
                "iterable": [],
                "attribute": [],
                "return": []
            },
            "sync_do_unique": {
                "case_sensitive": [],
                "return": [],
                "attribute": [
                    "Optional[str]",
                    "str",
                    "typing.Optional[str]",
                    "attribute",
                    "None"
                ],
                "value": [
                    "typing.Iterable[typing.Any]"
                ],
                "environment": [
                    "Environment",
                    "typing.Any",
                    "Context",
                    "environment",
                    "StorageDriver"
                ]
            }
        },
        "HasHTML": {
            "__html__": {
                "return": []
            }
        }
    },
    "jinja2.idtracking": {
        "FrameSymbolVisitor": {
            "__init__": {
                "return": [
                    "None"
                ],
                "symbols": []
            },
            "visit_Assign": {
                "kwargs": [],
                "node": [
                    "typing.Any",
                    "ast.Assign",
                    "Node",
                    "ast",
                    "NodeTransformer",
                    "target"
                ],
                "return": [
                    "None"
                ]
            },
            "visit_AssignBlock": {
                "kwargs": [
                    "typing.Dict[str, typing.Any]"
                ],
                "return": [],
                "node": [
                    "Node",
                    "typing.Any",
                    "AssignBlock",
                    "AssignBlockNode",
                    "target"
                ]
            },
            "visit_Block": {
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "return": [
                    "None"
                ],
                "node": []
            },
            "visit_CallBlock": {
                "kwargs": [
                    "Dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "node": [
                    "Node",
                    "CallBlock"
                ]
            },
            "visit_FilterBlock": {
                "return": [
                    "None"
                ],
                "node": [
                    "typing.Any",
                    "FilterBlock",
                    "Node",
                    "filter",
                    "visit",
                    "Filter"
                ],
                "kwargs": [
                    "typing.Dict[str, typing.Any]"
                ]
            },
            "visit_For": {
                "kwargs": [
                    "typing.Dict[str, typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "node": []
            },
            "visit_FromImport": {
                "node": [
                    "FromImport",
                    "ImportFrom",
                    "Node",
                    "AST"
                ],
                "return": [],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ]
            },
            "visit_If": {
                "return": [
                    "None"
                ],
                "node": [
                    "ast.AST",
                    "if",
                    "ast"
                ],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "dict[str, typing.Any]"
                ]
            },
            "visit_Import": {
                "return": [
                    "None"
                ],
                "node": [],
                "kwargs": []
            },
            "visit_Macro": {
                "node": [],
                "kwargs": [
                    "Dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "return": []
            },
            "visit_NSRef": {
                "node": [],
                "return": [],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]"
                ]
            },
            "visit_Name": {
                "return": [],
                "store_as_param": [],
                "kwargs": [],
                "node": [
                    "ast.Name"
                ]
            },
            "visit_OverlayScope": {
                "return": [],
                "node": [],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            },
            "visit_Scope": {
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]"
                ],
                "return": [],
                "node": []
            },
            "visit_With": {
                "return": [
                    "None"
                ],
                "node": [
                    "Node",
                    "typing.Any",
                    "values"
                ],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Symbols": {
            "__init__": {
                "return": [
                    "None"
                ],
                "level": [],
                "parent": []
            },
            "_define_ref": {
                "return": [
                    "typing.Any"
                ],
                "name": [
                    "str"
                ],
                "load": [
                    "typing.Any",
                    "load"
                ]
            },
            "branch_update": {
                "return": [
                    "None"
                ],
                "branch_symbols": []
            },
            "analyze_node": {
                "kwargs": [
                    "typing.Dict[str, typing.Any]"
                ],
                "node": [],
                "return": [
                    "None"
                ]
            },
            "dump_param_targets": {
                "return": [
                    "typing.Any"
                ]
            },
            "dump_stores": {
                "return": [
                    "typing.Any",
                    "rv"
                ]
            },
            "find_ref": {
                "name": [],
                "return": []
            },
            "find_load": {
                "return": [
                    "None",
                    "Optional[Load]",
                    "self.loads"
                ],
                "target": [
                    "NodePath",
                    "str",
                    "int"
                ]
            },
            "copy": {
                "return": []
            },
            "ref": {
                "name": [
                    "str",
                    "typing.Any"
                ],
                "return": []
            },
            "load": {
                "name": [],
                "return": [
                    "None"
                ]
            },
            "declare_parameter": {
                "return": [],
                "name": []
            },
            "store": {
                "return": [],
                "name": [
                    "str",
                    "typing.Hashable",
                    "self.refs"
                ]
            }
        },
        "RootVisitor": {
            "__init__": {
                "symbols": [
                    "list[str]",
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "return": [
                    "None"
                ]
            },
            "_simple_visit": {
                "node": [],
                "return": [],
                "kwargs": []
            },
            "generic_visit": {
                "args": [
                    "tuple[typing.Any, ...]",
                    "tuple[typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "node": [
                    "typing.Any"
                ]
            },
            "visit_AssignBlock": {
                "return": [],
                "node": [
                    "Node",
                    "AssignBlock"
                ],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]",
                    "Dict[str, Any]"
                ]
            },
            "visit_CallBlock": {
                "node": [],
                "return": [],
                "kwargs": []
            },
            "visit_For": {
                "for_branch": [
                    "str"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "return": [],
                "node": []
            },
            "visit_OverlayScope": {
                "return": [
                    "None"
                ],
                "node": [],
                "kwargs": []
            },
            "visit_With": {
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "return": [
                    "None"
                ],
                "node": [
                    "Any",
                    "body"
                ]
            }
        },
        "global": {
            "find_symbols": {
                "nodes": [
                    "typing.Iterable[typing.Any]",
                    "list[typing.Any]",
                    "set"
                ],
                "parent_symbols": [],
                "return": []
            },
            "symbols_for_node": {
                "node": [
                    "Node"
                ],
                "parent_symbols": [
                    "Symbols",
                    "Optional[Symbols]",
                    "typing.Any"
                ],
                "return": [
                    "typing.Any",
                    "Symbol",
                    "sym"
                ]
            }
        }
    },
    "jinja2.lexer": {
        "Failure": {
            "__call__": {
                "return": [],
                "filename": [
                    "str",
                    "typing.Any"
                ],
                "lineno": [
                    "int"
                ]
            },
            "__init__": {
                "message": [
                    "str"
                ],
                "cls": [
                    "typing.Type"
                ],
                "return": []
            }
        },
        "Lexer": {
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "Environment",
                    "typing.Any",
                    "Config",
                    "object",
                    "ConfigEnvironment",
                    "environment",
                    "Any"
                ]
            },
            "_normalize_newlines": {
                "return": [],
                "value": []
            },
            "tokeniter": {
                "filename": [
                    "str"
                ],
                "name": [
                    "typing.Any",
                    "str"
                ],
                "state": [],
                "source": [
                    "str"
                ],
                "return": []
            },
            "tokenize": {
                "state": [
                    "str",
                    "Any",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "source": [
                    "str",
                    "typing.Any"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "return": [],
                "filename": [
                    "Optional[str]",
                    "Union[str, None]"
                ]
            },
            "wrap": {
                "filename": [],
                "name": [],
                "return": [],
                "stream": []
            }
        },
        "TokenStream": {
            "__init__": {
                "generator": [],
                "filename": [],
                "name": []
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "close": {
                "return": []
            },
            "__next__": {
                "return": []
            },
            "expect": {
                "expr": [
                    "Any",
                    "TokenType",
                    "TokenExpr"
                ],
                "return": []
            },
            "__iter__": {
                "return": []
            },
            "next_if": {
                "expr": [],
                "return": [
                    "Optional[Unknown]",
                    "None",
                    "Optional[Any]",
                    "Optional[SomeType]",
                    "next",
                    "self",
                    "Expr",
                    "T",
                    "TypeOfNext"
                ]
            },
            "skip": {
                "n": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "push": {
                "token": [],
                "return": []
            },
            "look": {
                "return": []
            },
            "skip_if": {
                "expr": [],
                "return": [
                    "bool"
                ]
            }
        },
        "TokenStreamIterator": {
            "__next__": {
                "return": [
                    "TokenInfo",
                    "tokenize.TokenInfo",
                    "Token"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "__iter__": {
                "return": []
            }
        },
        "Token": {
            "__str__": {
                "return": []
            },
            "global": {
                "lineno": [
                    "int",
                    "Token"
                ],
                "type": [
                    "type",
                    "str",
                    "Token",
                    "expr",
                    "test",
                    "token.type"
                ],
                "value": [
                    "value",
                    "str",
                    "typing.Any",
                    "typing.Union[str, bytes, int, float]",
                    "tokeniter",
                    "string",
                    "elif",
                    "int",
                    "wrap"
                ]
            },
            "test_any": {
                "return": [
                    "bool"
                ],
                "iterable": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "test": {
                "expr": [
                    "str"
                ],
                "return": [
                    "bool"
                ]
            }
        },
        "global": {
            "_describe_token_type": {
                "return": [
                    "typing.Any"
                ],
                "token_type": [
                    "typing.Any",
                    "typing.Hashable"
                ]
            },
            "count_newlines": {
                "value": [
                    "str"
                ],
                "return": [
                    "int"
                ]
            },
            "describe_token": {
                "return": [],
                "token": [
                    "LexToken",
                    "Token",
                    "value"
                ]
            },
            "compile_rules": {
                "return": [
                    "list[typing.Any]",
                    "rules",
                    "x",
                    "list[str]"
                ],
                "environment": [
                    "Any"
                ]
            },
            "describe_token_expr": {
                "return": [
                    "str"
                ],
                "expr": [
                    "str"
                ]
            },
            "get_lexer": {
                "return": [
                    "lexer",
                    "Lexer"
                ],
                "environment": [
                    "Environment",
                    "typing.Any",
                    "Any",
                    "object"
                ]
            },
            "global": {
                "_lexer_cache": []
            }
        },
        "_Rule": {
            "global": {
                "command": [
                    "typing.Optional[str]",
                    "command",
                    "t.Optional[str]",
                    "Optional[str]",
                    "click.Command",
                    "self.rules",
                    "None"
                ],
                "pattern": [],
                "tokens": []
            }
        }
    },
    "jinja2.loaders": {
        "FileSystemLoader": {
            "__init__": {
                "encoding": [],
                "followlinks": [
                    "bool"
                ],
                "return": [
                    "None"
                ],
                "searchpath": [
                    "typing.Union[typing.Iterable[typing.Any], str]"
                ]
            },
            "get_source": {
                "environment": [
                    "Environment"
                ],
                "return": [
                    "None",
                    "typing.Tuple[str, str, typing.Callable]"
                ],
                "template": [
                    "str",
                    "typing.Any",
                    "Template"
                ]
            },
            "list_templates": {
                "return": [
                    "list[typing.Any]"
                ]
            }
        },
        "DictLoader": {
            "__init__": {
                "return": [],
                "mapping": []
            },
            "get_source": {
                "environment": [
                    "Environment",
                    "environment"
                ],
                "template": [
                    "str"
                ],
                "return": []
            },
            "list_templates": {
                "return": [
                    "list[typing.Any]"
                ]
            }
        },
        "PackageLoader": {
            "__init__": {
                "encoding": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "package_name": [
                    "str"
                ],
                "package_path": []
            },
            "get_source": {
                "environment": [
                    "Environment"
                ],
                "template": [],
                "return": []
            },
            "list_templates": {
                "return": []
            }
        },
        "ModuleLoader": {
            "__init__": {
                "return": [
                    "None"
                ],
                "path": []
            },
            "get_module_filename": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "get_template_key": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "load": {
                "globals": [],
                "name": [
                    "str"
                ],
                "return": [],
                "environment": []
            }
        },
        "PrefixLoader": {
            "__init__": {
                "return": [
                    "None"
                ],
                "delimiter": [],
                "mapping": []
            },
            "get_loader": {
                "template": [],
                "return": []
            },
            "get_source": {
                "environment": [
                    "Environment",
                    "BaseLoader"
                ],
                "return": [],
                "template": [
                    "str"
                ]
            },
            "list_templates": {
                "return": []
            },
            "load": {
                "environment": [],
                "globals": [
                    "typing.Optional[dict[typing.Any, typing.Any]]"
                ],
                "name": [
                    "str"
                ],
                "return": []
            }
        },
        "ChoiceLoader": {
            "__init__": {
                "return": [
                    "None"
                ],
                "loaders": [
                    "typing.Any",
                    "loaders"
                ]
            },
            "get_source": {
                "environment": [
                    "Environment"
                ],
                "return": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[str]",
                    "str"
                ],
                "template": []
            },
            "load": {
                "name": [
                    "str"
                ],
                "environment": [
                    "Environment",
                    "typing.Any",
                    "BaseLoader"
                ],
                "return": [
                    "typing.Any",
                    "Template"
                ],
                "globals": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Optional[dict[typing.Any, typing.Any]]"
                ]
            },
            "list_templates": {
                "return": [
                    "list[typing.Any]"
                ]
            }
        },
        "FunctionLoader": {
            "__init__": {
                "load_func": [],
                "return": []
            },
            "get_source": {
                "template": [
                    "str"
                ],
                "return": [
                    "typing.Union[tuple[str, None, None], typing.Any]",
                    "typing.Union[typing.Tuple[str, None, None], typing.Any]",
                    "typing.Any"
                ],
                "environment": []
            }
        },
        "global": {
            "_get_zipimporter_files": {
                "return": [],
                "z": [
                    "zipimport.zipimporter",
                    "typing.Any",
                    "z",
                    "zipimporter"
                ]
            },
            "split_template_path": {
                "return": [
                    "list[typing.Any]"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "BaseLoader": {
            "get_source": {
                "return": [],
                "template": [
                    "str"
                ],
                "environment": [
                    "Environment",
                    "Any",
                    "environment"
                ]
            },
            "list_templates": {
                "return": []
            },
            "load": {
                "globals": [
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "Optional[dict[typing.Any, typing.Any]]"
                ],
                "environment": [
                    "Environment"
                ],
                "name": [
                    "str"
                ],
                "return": [
                    "Template"
                ]
            }
        }
    },
    "jinja2.meta": {
        "TrackingCodeGenerator": {
            "__init__": {
                "environment": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "enter_frame": {
                "return": [
                    "None"
                ],
                "frame": [
                    "types.FrameType",
                    "typing.Any",
                    "object"
                ]
            },
            "write": {
                "x": [],
                "return": []
            }
        },
        "global": {
            "find_undeclared_variables": {
                "return": [
                    "set[str]",
                    "typing.Union[typing.Set[str], typing.List[str]]",
                    "typing.Set[str]",
                    "typing.Union[set[str], list[str]]"
                ],
                "ast": []
            },
            "find_referenced_templates": {
                "ast": [],
                "return": []
            }
        }
    },
    "jinja2.nativetypes": {
        "NativeCodeGenerator": {
            "_output_child_post": {
                "return": [],
                "finalize": [
                    "Any",
                    "src",
                    "Finalize"
                ],
                "frame": [
                    "types.FrameType",
                    "frame",
                    "typing.Optional[types.FrameType]",
                    "Any",
                    "None",
                    "typing.Any",
                    "Optional[FrameType]"
                ],
                "node": [
                    "typing.Any",
                    "node"
                ]
            },
            "_default_finalize": {
                "return": [
                    "typing.Any"
                ],
                "value": [
                    "typing.Any"
                ]
            },
            "_output_child_pre": {
                "finalize": [
                    "src",
                    "Any",
                    "Finalize"
                ],
                "return": [
                    "None"
                ],
                "node": [
                    "typing.Any"
                ],
                "frame": [
                    "types.FrameType",
                    "typing.Optional[types.FrameType]",
                    "typing.Any",
                    "frame",
                    "pass"
                ]
            },
            "_output_child_to_const": {
                "frame": [
                    "Frame",
                    "FrameSummary"
                ],
                "node": [],
                "finalize": [
                    "const"
                ],
                "return": [
                    "typing.Any",
                    "str"
                ]
            },
            "_output_const_repr": {
                "return": [
                    "str"
                ],
                "group": [
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "NativeTemplate": {
            "render": {
                "args": [],
                "kwargs": [],
                "return": [
                    "str"
                ]
            },
            "render_async": {
                "args": [],
                "kwargs": [
                    "dict"
                ],
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "native_concat": {
                "values": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            }
        }
    },
    "jinja2.nodes": {
        "EvalContext": {
            "__init__": {
                "template_name": [
                    "str"
                ],
                "environment": [
                    "Environment",
                    "typing.Any"
                ],
                "return": []
            },
            "save": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "revert": {
                "old": [],
                "return": []
            }
        },
        "Node": {
            "__eq__": {
                "other": [
                    "typing.Any",
                    "self",
                    "other"
                ],
                "return": [
                    "bool"
                ]
            },
            "__init__": {
                "attributes": [],
                "fields": [],
                "return": []
            },
            "__repr__": {
                "return": []
            },
            "find": {
                "node_type": [
                    "typing.Type"
                ],
                "return": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "find_all": {
                "node_type": [],
                "return": [
                    "typing.Iterator",
                    "typing.Iterator[Node]",
                    "typing.Iterator[typing.Union[Node, Token]]",
                    "typing.Iterator[typing.Union[Node, Any]]"
                ]
            },
            "dump": {
                "return": [
                    "str",
                    "None"
                ]
            },
            "global": {
                "attributes": [],
                "lineno": [],
                "environment": [
                    "Environment",
                    "environment",
                    "Node",
                    ".environment",
                    "None",
                    "Optional[Environment]",
                    "t.Optional[Environment]",
                    "sandboxed",
                    "EvalContext"
                ],
                "fields": [
                    "t.Tuple[str, ...]",
                    "Tuple[str, ...]",
                    "fields",
                    "Node",
                    "NodeType",
                    "typing.Tuple[str, ...]",
                    "tuple[str, ...]",
                    "Stmt",
                    "..."
                ]
            },
            "iter_child_nodes": {
                "exclude": [
                    "typing.Any",
                    "Optional[typing.Any]",
                    "Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.Any]",
                    "Optional[Iterable[Any]]",
                    "typing.Optional[typing.Collection[str]]",
                    "Optional[Iterable]",
                    "typing.Optional[typing.Iterable]",
                    "Optional[typing.Iterable]",
                    "typing.Optional[typing.Iterable[typing.Any]]"
                ],
                "return": [
                    "typing.Iterator[Node]"
                ],
                "only": []
            },
            "iter_fields": {
                "exclude": [],
                "return": [
                    "yield",
                    "value",
                    "self.fields",
                    "getattr",
                    "typing.Any"
                ],
                "only": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[typing.Iterable[typing.Any]]"
                ]
            },
            "set_environment": {
                "environment": [],
                "return": []
            },
            "set_lineno": {
                "lineno": [
                    "int"
                ],
                "override": [
                    "bool"
                ],
                "return": [
                    "self"
                ]
            },
            "set_ctx": {
                "ctx": [],
                "return": [
                    "self",
                    "Self",
                    "MyClass",
                    "ClassName",
                    "Any"
                ]
            }
        },
        "InternalName": {
            "__init__": {
                "return": []
            },
            "global": {
                "name": []
            }
        },
        "global": {
            "_failing_new": {
                "args": [
                    "tuple[typing.Any, ...]",
                    "typing.Tuple[typing.Any, ...]",
                    "typing.Any"
                ],
                "kwargs": [],
                "return": []
            },
            "args_as_const": {
                "return": [],
                "node": [
                    "Node",
                    "typing.Any"
                ],
                "eval_ctx": []
            },
            "get_eval_context": {
                "node": [
                    "Node"
                ],
                "return": [
                    "typing.Any",
                    "typing.Union[EvalContext, LexicalEnvironment]",
                    "Union[EvalContext, LexicalEnvironment]"
                ],
                "ctx": []
            },
            "global": {
                "_uaop_to_func": [
                    "dict[str, typing.Any]",
                    "dict[str, typing.Callable]"
                ],
                "_cmpop_to_func": [
                    "dict[str, typing.Callable]",
                    "in",
                    "dict[str, typing.Union[typing.Callable, typing.Callable[[typing.Any, typing.Any], bool]]]"
                ],
                "_binop_to_func": []
            }
        },
        "And": {
            "as_const": {
                "return": [
                    "bool",
                    "typing.Any"
                ],
                "eval_ctx": [
                    "EvalContext",
                    "Optional[EvalContext]"
                ]
            }
        },
        "Concat": {
            "as_const": {
                "return": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext",
                    "Optional[EvalContext]",
                    "typing.Optional[EvalContext]",
                    "None"
                ]
            },
            "global": {
                "nodes": []
            }
        },
        "BinExpr": {
            "as_const": {
                "eval_ctx": [
                    "EvalContext"
                ],
                "return": [
                    "typing.Any"
                ]
            },
            "global": {
                "left": [],
                "right": [
                    "Expr",
                    "right",
                    "BinExpr",
                    "Operand",
                    "left",
                    "Union[None, int, buffer]",
                    "fields"
                ],
                "operator": [
                    "operator",
                    "str",
                    "UnaryExpr",
                    "Not",
                    "op",
                    "Compare",
                    "BinExpr",
                    "Neg",
                    "types.ModuleType"
                ]
            }
        },
        "Dict": {
            "as_const": {
                "return": [
                    "dict[typing.Any, typing.Any]"
                ],
                "eval_ctx": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[EvalContext]"
                ]
            },
            "global": {
                "items": []
            }
        },
        "CondExpr": {
            "as_const": {
                "return": [
                    "typing.Any"
                ],
                "eval_ctx": [
                    "EvalContext",
                    "typing.Any"
                ]
            },
            "global": {
                "expr1": [],
                "test": [
                    "Node",
                    "body",
                    "test",
                    "CondExpr",
                    "Expr",
                    "Compare",
                    "Operand",
                    "Stmt"
                ],
                "expr2": []
            }
        },
        "Const": {
            "as_const": {
                "eval_ctx": [],
                "return": [
                    "typing.Any"
                ]
            },
            "from_untrusted": {
                "environment": [
                    "typing.Optional[dict[str, typing.Any]]",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[Environment]",
                    "typing.Optional[dict]"
                ],
                "lineno": [
                    "Optional[int]"
                ],
                "return": [
                    "cls"
                ],
                "value": [
                    "value",
                    "cls",
                    "Any",
                    "float",
                    "object"
                ]
            },
            "global": {
                "value": []
            }
        },
        "Expr": {
            "as_const": {
                "eval_ctx": [
                    "typing.Optional[typing.Any]"
                ],
                "return": []
            },
            "can_assign": {
                "return": []
            }
        },
        "Getattr": {
            "as_const": {
                "eval_ctx": [],
                "return": [
                    "typing.Any"
                ]
            },
            "global": {
                "attr": [
                    "str",
                    "attr",
                    "Getattr",
                    "ExtensionAttribute"
                ],
                "ctx": [],
                "node": [
                    "node",
                    "Node",
                    "Expr",
                    "BinExpr",
                    "find",
                    "Helper",
                    "self.node",
                    "Call"
                ]
            }
        },
        "Compare": {
            "as_const": {
                "return": [],
                "eval_ctx": [
                    "EvalContext",
                    "typing.Optional[EvalContext]",
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ]
            },
            "global": {
                "ops": [
                    "List[Operand]",
                    "Operand",
                    "list[Operand]",
                    "ops"
                ],
                "expr": []
            }
        },
        "Getitem": {
            "as_const": {
                "eval_ctx": [
                    "EvalContext",
                    "EvalContextModifier"
                ],
                "return": []
            },
            "global": {
                "arg": [],
                "ctx": [
                    "t.Optional[EvalContext]",
                    "ctx",
                    "EvalContext",
                    "Getattr",
                    "str",
                    "fields",
                    "typing.Optional[EvalContext]",
                    "MtgContext",
                    "None",
                    "ContextReference",
                    "Node",
                    "Optional[EvalContext]",
                    "t.Mapping[str, t.Any]"
                ],
                "node": [
                    "Node",
                    "node",
                    "UnaryExpr",
                    "Expr",
                    "Slice",
                    "Helper",
                    "Optional[Expr]",
                    "None",
                    "t.Any",
                    "find",
                    "Literal",
                    "Union[Node, typing.Any]"
                ]
            }
        },
        "Filter": {
            "as_const": {
                "return": [
                    "typing.Any"
                ],
                "eval_ctx": [
                    "EvalContext",
                    "typing.Optional[typing.Any]"
                ]
            },
            "global": {
                "node": []
            }
        },
        "Keyword": {
            "as_const": {
                "eval_ctx": [
                    "EvalContextModifier",
                    "EvalContext"
                ],
                "return": []
            },
            "global": {
                "key": [
                    "str",
                    "key",
                    "Expr",
                    "Keyword",
                    "Pair",
                    "Node",
                    "value"
                ],
                "value": [
                    "value",
                    "t.Any",
                    "Const",
                    "typing.Any",
                    "Expr",
                    "Keyword",
                    "Pair",
                    "Impossible",
                    "t.Tuple[t.Any, t.Any]",
                    "x",
                    "Dict",
                    "const"
                ]
            }
        },
        "MarkSafe": {
            "as_const": {
                "return": [
                    "Markup"
                ],
                "eval_ctx": [
                    "EvalContextModifier",
                    "EvalContext"
                ]
            },
            "global": {
                "expr": [
                    "Expr",
                    "MarkSafeIfAutoescape",
                    "MarkSafe",
                    "expr",
                    "BinExpr",
                    "CondExpr",
                    "UnaryExpr",
                    "Any",
                    "Node"
                ]
            }
        },
        "Or": {
            "as_const": {
                "eval_ctx": [
                    "EvalContext"
                ],
                "return": []
            }
        },
        "MarkSafeIfAutoescape": {
            "as_const": {
                "eval_ctx": [
                    "EvalContext"
                ],
                "return": []
            },
            "global": {
                "expr": [
                    "Expr",
                    "expr",
                    "MarkSafeIfAutoescape",
                    "MarkSafe",
                    "UnaryExpr",
                    "node",
                    "Neg",
                    "str",
                    "Optional[Expr]",
                    "TemplateData",
                    "Test",
                    "CondExpr",
                    "Compare"
                ]
            }
        },
        "List": {
            "as_const": {
                "return": [
                    "list[typing.Any]"
                ],
                "eval_ctx": [
                    "typing.Optional[EvaluationContext]",
                    "EvaluationContext",
                    "typing.Optional[typing.Any]"
                ]
            },
            "global": {
                "items": [
                    "Dict",
                    "List",
                    "items",
                    "t.List[Expr]",
                    "Expr",
                    "Pair",
                    "Tuple",
                    "List[Pair]"
                ]
            }
        },
        "Pair": {
            "as_const": {
                "return": [],
                "eval_ctx": [
                    "EvalContext",
                    "EvalContextModifier",
                    "typing.Optional[EvalContext]"
                ]
            },
            "global": {
                "key": [],
                "value": []
            }
        },
        "Slice": {
            "as_const": {
                "eval_ctx": [],
                "return": [
                    "slice"
                ]
            },
            "global": {
                "start": [
                    "t.Optional[Expr]",
                    "None",
                    "start",
                    "Optional[Expr]",
                    "typing.Optional[Expr]",
                    "Subscript",
                    "step",
                    "Union[Expr, None]"
                ],
                "step": [
                    "Step",
                    "step",
                    "int",
                    "self"
                ],
                "stop": []
            }
        },
        "TemplateData": {
            "as_const": {
                "eval_ctx": [],
                "return": []
            },
            "global": {
                "data": [
                    "str",
                    "TemplateData",
                    "data",
                    "Markup",
                    "Const"
                ]
            }
        },
        "Tuple": {
            "as_const": {
                "return": [],
                "eval_ctx": [
                    "EvalContextModifier",
                    "typing.Optional[EvalContextModifier]",
                    "EvalContext",
                    "typing.Optional[EvalContext]"
                ]
            },
            "can_assign": {
                "return": []
            },
            "global": {
                "ctx": [
                    "ctx",
                    "t.Optional[EvalContext]",
                    "typing.Optional[EvalContext]",
                    "MtgContext",
                    "EvalContext",
                    "Optional[EvalContext]",
                    "None",
                    "str",
                    "ctx.autoescape"
                ],
                "items": [
                    "items",
                    "Dict",
                    "List[Expr]",
                    "List",
                    "List[Pair]",
                    "Tuple",
                    "Expr",
                    "Pair",
                    "list[Expr]",
                    "Node"
                ]
            }
        },
        "_FilterTestCommon": {
            "as_const": {
                "eval_ctx": [
                    "typing.Optional[typing.Any]"
                ],
                "return": [
                    "typing.Any"
                ]
            },
            "global": {
                "dyn_args": [
                    "t.Optional[Expr]",
                    "typing.Optional[Expr]",
                    "Optional[Expr]",
                    "None",
                    "Call",
                    "Expr"
                ],
                "args": [],
                "dyn_kwargs": [
                    "t.Optional[Expr]",
                    "Call",
                    "Optional[Expr]",
                    "None",
                    "Expr",
                    "typing.Optional[Expr]",
                    "Union[Expr, None]"
                ],
                "kwargs": [],
                "node": [],
                "name": [
                    "str",
                    "InternalName",
                    "store",
                    "name",
                    "Macro",
                    "EnvironmentAttribute",
                    "NSRef",
                    "ExtensionAttribute",
                    "Expr",
                    "param"
                ]
            }
        },
        "NSRef": {
            "can_assign": {
                "return": [
                    "bool"
                ]
            },
            "global": {
                "attr": [],
                "name": [
                    "str",
                    "name",
                    "NSRef",
                    "Macro",
                    "InternalName",
                    "load",
                    "ExtensionAttribute",
                    "store",
                    "param",
                    "Block"
                ]
            }
        },
        "Name": {
            "can_assign": {
                "return": [
                    "bool"
                ]
            },
            "global": {
                "name": [],
                "ctx": [
                    "t.Optional[EvalContext]",
                    "ctx",
                    "EvalContext",
                    "str",
                    "Getattr",
                    "Node",
                    "MtgContext",
                    "Optional[EvalContext]",
                    "None"
                ]
            }
        },
        "UnaryExpr": {
            "as_const": {
                "eval_ctx": [
                    "EvalContext"
                ],
                "return": [
                    "typing.Any"
                ]
            },
            "global": {
                "node": [
                    "Node",
                    "node",
                    "Expr",
                    "find",
                    "Union[Node, t.Any]",
                    "Literal",
                    "t.Any",
                    "dict[str, typing.Any]",
                    "Stmt",
                    "Template",
                    "Filter",
                    "Union[Node, Any]",
                    "BinExpr",
                    "child"
                ],
                "operator": [
                    "str",
                    "operator",
                    "BinExpr",
                    "Operand"
                ]
            }
        },
        "Assign": {
            "global": {
                "target": [
                    "Node",
                    "Expr",
                    "target",
                    "Assign",
                    "AssignBlock",
                    "For",
                    "Tuple",
                    "Union[Name, Tuple]",
                    "else",
                    "str"
                ],
                "node": []
            }
        },
        "AssignBlock": {
            "global": {
                "filter": [
                    "Filter",
                    "filter",
                    "t.Optional[Filter]",
                    "name",
                    "str",
                    "Expr",
                    "None",
                    "List[str]",
                    "typing.Optional[Filter]",
                    "Optional[Filter]"
                ],
                "target": [],
                "body": [
                    "body",
                    "t.List[Node]",
                    "For",
                    "If",
                    "Scope",
                    "List[Node]",
                    "Node",
                    "Macro",
                    "Template",
                    "nodes",
                    "typing",
                    "list[Node]",
                    "Output"
                ]
            }
        },
        "Block": {
            "global": {
                "body": [],
                "scoped": [
                    "bool",
                    "required",
                    "scoped",
                    "Block",
                    "ScopedEvalContextModifier"
                ],
                "name": [
                    "str",
                    "Macro",
                    "name",
                    "InternalName",
                    "store",
                    "NSRef",
                    "NSRef.name",
                    "param",
                    "Name",
                    "Block",
                    "ExtensionAttribute"
                ],
                "required": [
                    "str",
                    "required",
                    "in"
                ]
            }
        },
        "Call": {
            "global": {
                "dyn_args": [
                    "t.Optional[Expr]",
                    "Optional[Expr]",
                    "Expr",
                    "None",
                    "typing.Optional[Expr]",
                    "Call",
                    "Test",
                    "Keyword"
                ],
                "kwargs": [],
                "node": [],
                "dyn_kwargs": [],
                "args": [
                    "args",
                    "Call",
                    "t.Any",
                    "t.List[Expr]",
                    "List[Any]",
                    "tuple[typing.Any, ...]",
                    "list[typing.Any]",
                    "Tuple[t.Any, ...]",
                    "Test",
                    "List[Expr]",
                    "Call.fields",
                    "Tuple[Any, ...]",
                    "NodeType"
                ]
            }
        },
        "CallBlock": {
            "global": {
                "args": [],
                "body": [],
                "call": [],
                "defaults": []
            }
        },
        "EnvironmentAttribute": {
            "global": {
                "name": [
                    "store",
                    "Macro",
                    "name",
                    "str",
                    "InternalName",
                    "ExtensionAttribute",
                    "NSRef",
                    "EnvironmentAttribute",
                    "Block",
                    "Name"
                ]
            }
        },
        "ExprStmt": {
            "global": {
                "node": [
                    "Node",
                    "node",
                    "Expr",
                    "UnaryExpr",
                    "t.Union[Node, t.Any]",
                    "Optional[Expr]",
                    "find",
                    "BinExpr",
                    "Helper",
                    "Template",
                    "dump"
                ]
            }
        },
        "ExtensionAttribute": {
            "global": {
                "name": [],
                "identifier": [
                    "str",
                    "Extension",
                    "identifier"
                ]
            }
        },
        "FilterBlock": {
            "global": {
                "body": [
                    "body",
                    "If",
                    "t.List[Node]",
                    "Scope",
                    "List[Node]",
                    "Block",
                    "For",
                    "Node",
                    "str",
                    "Template"
                ],
                "filter": []
            }
        },
        "For": {
            "global": {
                "body": [],
                "else_": [],
                "recursive": [
                    "bool",
                    "recursive",
                    "For",
                    "fields",
                    "Tuple",
                    "None"
                ],
                "target": [
                    "Expr",
                    "Node",
                    "target",
                    "Assign",
                    "AssignBlock",
                    "Tuple",
                    "For",
                    "test",
                    "list[typing.Any]"
                ],
                "iter": [],
                "test": []
            }
        },
        "EvalContextModifier": {
            "global": {
                "options": []
            }
        },
        "FromImport": {
            "global": {
                "with_context": [],
                "template": [
                    "Expr",
                    "FromImport",
                    "template",
                    "Import",
                    "Include"
                ],
                "names": [
                    "names",
                    "str",
                    "FromImport",
                    "List[Union[str, Tuple[str, str]]]",
                    "t.List"
                ]
            }
        },
        "Extends": {
            "global": {
                "template": []
            }
        },
        "If": {
            "global": {
                "elif_": [
                    "If",
                    "List[If]",
                    "body",
                    "typing.List",
                    "t"
                ],
                "body": [
                    "For",
                    "body",
                    "If",
                    "List[Node]",
                    "t.List[Node]",
                    "OverlayScope",
                    "Impossible",
                    "list[Node]",
                    "CallBlock",
                    "Macro",
                    "Node"
                ],
                "test": [
                    "Node",
                    "test",
                    "Expr",
                    "body",
                    "For",
                    "CondExpr",
                    "str"
                ],
                "else_": [
                    "If",
                    "Node",
                    "t.List[Node]",
                    "List[Node]",
                    "For",
                    "Macro"
                ]
            }
        },
        "Import": {
            "global": {
                "template": [
                    "Expr",
                    "FromImport",
                    "Import",
                    "template",
                    "Include",
                    "t.List[Node]",
                    "Node",
                    "str",
                    "Call"
                ],
                "with_context": [
                    "bool",
                    "FromImport",
                    "Import",
                    "Include",
                    "fields"
                ],
                "target": [
                    "Node",
                    "target",
                    "Expr",
                    "Assign",
                    "For",
                    "Tuple",
                    "None",
                    "Union[Name, Tuple]",
                    "AssignBlock"
                ]
            }
        },
        "ImportedName": {
            "global": {
                "importname": [
                    "str",
                    "escape",
                    "importname",
                    "ImportedName",
                    "fields"
                ]
            }
        },
        "Include": {
            "global": {
                "with_context": [],
                "ignore_missing": [
                    "bool",
                    "Include",
                    "Expr",
                    "template"
                ],
                "template": []
            }
        },
        "Macro": {
            "global": {
                "body": [],
                "defaults": [
                    "Expr",
                    "defaults",
                    "FromImport",
                    "CallBlock",
                    "t.List[Expr]",
                    "List[Expr]",
                    "names"
                ],
                "name": [
                    "Macro",
                    "name",
                    "str",
                    "store",
                    "InternalName",
                    "fields",
                    "NSRef"
                ],
                "args": [
                    "args",
                    "t.List[Expr]",
                    "Expr",
                    "t.Any",
                    "tuple[typing.Any, ...]",
                    "t.List[t.Any]",
                    "Call",
                    "List[Any]",
                    "list[typing.Any]",
                    "List[Expr]",
                    "Test",
                    "Tuple[t.Any, ...]",
                    "List[t.Any]",
                    "list[t.Any]"
                ]
            }
        },
        "Operand": {
            "global": {
                "op": [
                    "str",
                    "Operand",
                    "op",
                    "Compare",
                    "ops"
                ],
                "expr": [
                    "Expr",
                    "CondExpr",
                    "expr",
                    "Assign",
                    "MarkSafe",
                    "MarkSafeIfAutoescape",
                    "UnaryExpr",
                    "Markup"
                ]
            }
        },
        "Output": {
            "global": {
                "nodes": [
                    "List[Expr]",
                    "nodes",
                    "Expr",
                    "List",
                    "print",
                    "Concat",
                    "t.List[Expr]",
                    "List[Node]"
                ]
            }
        },
        "OverlayScope": {
            "global": {
                "body": [],
                "context": [
                    "Expr",
                    "context",
                    "EvalContextModifier",
                    "EvalContext",
                    "ContextReference",
                    "DerivedContextReference",
                    "Node",
                    "t.Mapping[str, t.Any]",
                    "ScopedEvalContextModifier"
                ]
            }
        },
        "Scope": {
            "global": {
                "body": [
                    "For",
                    "If",
                    "body",
                    "List[Node]",
                    "OverlayScope",
                    "t.List[Node]",
                    "Node",
                    "Block",
                    "Macro",
                    "ScopedEvalContextModifier"
                ]
            }
        },
        "ScopedEvalContextModifier": {
            "global": {
                "body": []
            }
        },
        "With": {
            "global": {
                "body": [
                    "For",
                    "List[Node]",
                    "body",
                    "Scope",
                    "If",
                    "Node",
                    "ScopedEvalContextModifier",
                    "t.List[Node]",
                    "Output",
                    "CallBlock",
                    "OverlayScope",
                    "str",
                    "Block",
                    "t"
                ],
                "values": [],
                "targets": []
            }
        },
        "Template": {
            "global": {
                "body": [
                    "If",
                    "t.List[Node]",
                    "For",
                    "Scope",
                    "Macro",
                    "body",
                    "List[Node]",
                    "Output",
                    "Block",
                    "Expr",
                    "typing"
                ]
            }
        }
    },
    "jinja2.optimizer": {
        "Optimizer": {
            "generic_visit": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [],
                "node": [],
                "return": [
                    "Union[nodes.Const, nodes.Expr]",
                    "nodes.Expr",
                    "nodes.Const",
                    "Union[nodes.Const, nodes.Node]",
                    "nodes.Node"
                ]
            },
            "__init__": {
                "environment": [],
                "return": []
            }
        },
        "global": {
            "optimize": {
                "return": [
                    "nodes.Node"
                ],
                "environment": [],
                "node": []
            }
        }
    },
    "jinja2.parser": {
        "Parser": {
            "__init__": {
                "name": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "self",
                    "None"
                ],
                "environment": [],
                "filename": [
                    "typing.Optional[builtins.str]",
                    "typing.Union[builtins.str, builtins.None]",
                    "typing.Optional[str]"
                ],
                "source": [],
                "state": [
                    "str"
                ]
            },
            "_fail_ut_eof": {
                "return": [
                    "None"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "end_token_stack": [],
                "lineno": [
                    "int"
                ]
            },
            "fail": {
                "lineno": [
                    "int"
                ],
                "exc": [
                    "type",
                    "Type[TemplateSyntaxError]",
                    "TemplateSyntaxError"
                ],
                "return": [],
                "msg": [
                    "str"
                ]
            },
            "fail_eof": {
                "return": [
                    "None"
                ],
                "lineno": [],
                "end_tokens": [
                    "list",
                    "list[str]",
                    "Optional[List[Any]]",
                    "Optional[List[str]]",
                    "Optional[list]",
                    "Optional[Iterable]",
                    "List[Any]",
                    "list[Token]"
                ]
            },
            "fail_unknown_tag": {
                "lineno": [],
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            },
            "free_identifier": {
                "return": [
                    "Node",
                    "nodes.Node"
                ],
                "lineno": []
            },
            "is_tuple_end": {
                "extra_end_rules": [
                    "typing.Optional[typing.Iterable]",
                    "typing.Optional[typing.List[str]]",
                    "Optional[list]",
                    "Optional[Iterable]",
                    "typing.Optional[list]",
                    "Optional[Any]",
                    "Optional[Iterable[Any]]"
                ],
                "return": []
            },
            "parse_autoescape": {
                "return": []
            },
            "parse_block": {
                "return": [
                    "nodes.Block"
                ]
            },
            "parse_and": {
                "return": []
            },
            "parse_call": {
                "node": [
                    "ast.expr",
                    "nodes.Node",
                    "ast.stmt",
                    "ast.AST"
                ],
                "return": []
            },
            "parse_call_args": {
                "return": [
                    "tuple[typing.Any, typing.Any, typing.Any, typing.Any]"
                ]
            },
            "parse_call_block": {
                "return": [
                    "UnparsedNode",
                    "FinalNode",
                    "NodeType",
                    "Optional[UnparsedNode]",
                    "IntermediateNode"
                ]
            },
            "parse_concat": {
                "return": [
                    "typing.Union[typing.Any, nodes.Concat]"
                ]
            },
            "parse_condexpr": {
                "return": [
                    "Any",
                    "typing.Any",
                    "typing.Optional[ast.expr]"
                ]
            },
            "parse_dict": {
                "return": [
                    "Node"
                ]
            },
            "parse_filter": {
                "node": [
                    "nodes.Node"
                ],
                "start_inline": [],
                "return": [
                    "typing.Any",
                    "node"
                ]
            },
            "parse_expression": {
                "return": [],
                "with_condexpr": [
                    "bool"
                ]
            },
            "parse_extends": {
                "return": []
            },
            "parse_for": {
                "return": [
                    "nodes.For"
                ]
            },
            "parse_filter_block": {
                "return": []
            },
            "parse_from": {
                "return": [
                    "None"
                ]
            },
            "parse_filter_expr": {
                "return": [
                    "node",
                    "Expr",
                    "typing.Any"
                ],
                "node": [
                    "node",
                    "typing.Any",
                    "ASTNode",
                    "ast.Node",
                    "ast"
                ]
            },
            "parse_list": {
                "return": []
            },
            "parse_macro": {
                "return": [
                    "Node",
                    "typing.Any",
                    "ast.AST"
                ]
            },
            "parse": {
                "return": [
                    "typing.Any",
                    "UnknownTargetPlatform"
                ]
            },
            "parse_import": {
                "return": [
                    "List[Dependency]",
                    "False",
                    "List",
                    "Module"
                ]
            },
            "parse_or": {
                "return": [
                    "typing.Any"
                ]
            },
            "parse_if": {
                "return": [
                    "nodes.If",
                    "nodes",
                    "If",
                    "lineno",
                    "Validator"
                ]
            },
            "parse_import_context": {
                "node": [
                    "NodeType",
                    "typing.Any",
                    "Any",
                    "node"
                ],
                "default": [],
                "return": [
                    "typing.Any",
                    "node",
                    "TreeNode"
                ]
            },
            "parse_not": {
                "return": []
            },
            "parse_print": {
                "return": [
                    "Output"
                ]
            },
            "parse_primary": {
                "with_namespace": [],
                "return": []
            },
            "parse_pow": {
                "return": [
                    "Any",
                    "int",
                    "FVal",
                    "typing.Any"
                ]
            },
            "parse_postfix": {
                "return": [
                    "typing.Any"
                ],
                "node": []
            },
            "parse_compare": {
                "return": [
                    "typing.Union[Expr, nodes.Compare]",
                    "Union[Expr, nodes.Compare]"
                ]
            },
            "parse_include": {
                "return": []
            },
            "parse_math1": {
                "return": [
                    "typing.Any"
                ]
            },
            "parse_signature": {
                "return": [],
                "node": [
                    "node",
                    "ast.AST"
                ]
            },
            "parse_math2": {
                "return": [
                    "typing.Any",
                    "left"
                ]
            },
            "parse_statement": {
                "return": [
                    "typing.Any"
                ]
            },
            "parse_statements": {
                "return": [
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "end_tokens": [],
                "drop_needle": [
                    "bool"
                ]
            },
            "parse_subscript": {
                "node": [
                    "ast.AST",
                    "nodes.Node",
                    "typing.Any",
                    "nodes",
                    "nodes.Getitem",
                    "Name",
                    "ast",
                    "nodes.ExprNode",
                    "node"
                ],
                "return": []
            },
            "parse_tuple": {
                "explicit_parentheses": [
                    "bool"
                ],
                "simplified": [],
                "with_condexpr": [
                    "bool",
                    "True"
                ],
                "extra_end_rules": [],
                "with_namespace": [
                    "bool"
                ],
                "return": [
                    "typing.Union[typing.Any, nodes.Tuple]",
                    "nodes.Tuple",
                    "args",
                    "typing.Any"
                ]
            },
            "parse_subscribed": {
                "return": []
            },
            "parse_test": {
                "node": [
                    "nodes.Node",
                    "nodes",
                    "ast.AST"
                ],
                "return": []
            },
            "parse_unary": {
                "return": [],
                "with_filter": [
                    "bool"
                ]
            },
            "subparse": {
                "return": [
                    "list[typing.Any]"
                ],
                "end_tokens": []
            },
            "parse_set": {
                "return": []
            },
            "parse_with": {
                "return": []
            }
        },
        "global": {
            "global": {
                "_math_nodes": []
            }
        }
    },
    "jinja2.runtime": {
        "AsyncLoopContext": {
            "__aiter__": {
                "return": [
                    "typing.Any",
                    "Self",
                    "MyClass",
                    "ClassName",
                    "self"
                ]
            },
            "__anext__": {
                "return": [
                    "tuple[typing.Any, typing.Any]",
                    "tuple[typing.Any, typing.Self]"
                ]
            },
            "_peek_next": {
                "return": [
                    "typing.Any",
                    "typing.Awaitable[typing.Any]"
                ]
            },
            "_to_iterator": {
                "iterable": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "typing.AsyncIterator"
                ]
            },
            "global": {
                "_iterator": [
                    "t.AsyncIterator[V]",
                    "AsyncLoopContext",
                    "LoopContext",
                    "t.Iterator[V]",
                    "AsyncIterator[t.Any]",
                    "AsyncIterator[Any]",
                    "t.Iterator[t.Any]"
                ]
            }
        },
        "Undefined": {
            "__bool__": {
                "return": []
            },
            "__aiter__": {
                "return": []
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "other",
                    "self",
                    "object",
                    "Any"
                ]
            },
            "__getattr__": {
                "return": [
                    "None",
                    "Union[Exception, None]",
                    "typing.Any",
                    "typing.Union[Exception, None]"
                ],
                "name": [
                    "str"
                ]
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__init__": {
                "return": [],
                "hint": [
                    "typing.Optional[str]"
                ],
                "exc": [
                    "typing.Type[BaseException]",
                    "typing.Type[Exception]",
                    "typing.Type[UndefinedError]"
                ],
                "name": [
                    "str"
                ],
                "obj": [
                    "typing.Any"
                ]
            },
            "__iter__": {
                "return": []
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__ne__": {
                "other": [],
                "return": [
                    "bool",
                    "not"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_fail_with_undefined_error": {
                "args": [
                    "tuple[typing.Any, ...]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "LoopRenderFunc": {
            "__call__": {
                "depth": [
                    "int"
                ],
                "loop_render_func": [
                    "Callable",
                    "callable",
                    "function"
                ],
                "return": [],
                "reciter": [
                    "reciter",
                    "Any"
                ]
            }
        },
        "BlockReference": {
            "__call__": {
                "return": [
                    "Union[Markup, Any]",
                    "Union[str, Markup]",
                    "str",
                    "Union[Any, Markup]",
                    "Union[Markup, str]",
                    "Union[Any, str]",
                    "Markup"
                ]
            },
            "__init__": {
                "depth": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "context": [],
                "stack": []
            },
            "_async_call": {
                "return": [
                    "typing.Union[Markup, typing.Any]",
                    "typing.Union[Markup, str]",
                    "typing.Union[markupsafe.Markup, str]",
                    "Markup"
                ]
            }
        },
        "LoopContext": {
            "__call__": {
                "iterable": [],
                "return": [
                    "typing.Any",
                    "typing.Iterable"
                ]
            },
            "__init__": {
                "depth0": [
                    "int"
                ],
                "recurse": [
                    "Optional[Any]",
                    "Optional[bool]"
                ],
                "undefined": [
                    "typing.Any",
                    "bool"
                ],
                "iterable": [],
                "return": [
                    "None"
                ]
            },
            "__len__": {
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator",
                    "self",
                    "ClassName",
                    "MyClass"
                ]
            },
            "__next__": {
                "return": [
                    "tuple[typing.Any, typing.Any]",
                    "tuple[typing.Any, typing.Self]"
                ]
            },
            "_to_iterator": {
                "return": [],
                "iterable": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "_peek_next": {
                "return": []
            },
            "changed": {
                "return": [],
                "value": []
            },
            "cycle": {
                "args": [
                    "tuple[typing.Union[typing.Any,...]]",
                    "tuple"
                ],
                "return": [
                    "Any",
                    "cycle"
                ]
            },
            "global": {
                "_before": [
                    "V",
                    "typing.Any",
                    "missing",
                    "previtem",
                    "AsyncLoopContext",
                    "rv",
                    "Union[V, missing]",
                    "Any",
                    "t.Any",
                    "LoopContext[V]",
                    "typing.Union[typing.Any, Undefined]"
                ],
                "_current": [
                    "V",
                    "missing",
                    "LoopContext",
                    "rv",
                    "typing.Any",
                    "Iterator[V]",
                    "previtem",
                    "Undefined",
                    "t.Any",
                    "t.Iterable[V]",
                    "iterable",
                    "nextitem"
                ],
                "_last_changed_value": [],
                "_length": [],
                "_after": [
                    "missing",
                    "typing.Any",
                    "V",
                    "Any",
                    "t.Union[V, t.Any]",
                    "object",
                    "LoopContext",
                    "typing.Union[typing.Any, missing]",
                    "None",
                    "AsyncLoopContext",
                    "Union[V, missing]",
                    "LoopContext[V]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "Macro": {
            "__call__": {
                "args": [
                    "tuple[typing.Any, ...]",
                    "..."
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": []
            },
            "__init__": {
                "catch_kwargs": [
                    "dict"
                ],
                "catch_varargs": [
                    "list",
                    "tuple"
                ],
                "arguments": [],
                "environment": [
                    "Environment"
                ],
                "default_autoescape": [
                    "Union[bool, typing.Callable[str, bool]]",
                    "Optional[Union[bool, Callable[[Optional[str]], bool]]]",
                    "Union[bool, typing.Callable[..., bool]]",
                    "Union[bool, Callable[..., bool]]",
                    "Union[bool, Callable[[Optional[str]], bool]]",
                    "Optional[Union[bool, typing.Callable[str, bool]]]",
                    "Union[bool, typing.Callable[..., bool], None]",
                    "Optional[Union[bool, typing.Callable[..., bool]]]",
                    "Union[bool, None]",
                    "Optional[Union[bool, typing.Callable[[str], bool]]]",
                    "Union[bool, Callable, None]",
                    "Optional[Union[bool, Callable[..., bool]]]",
                    "Union[bool, typing.Callable[str, bool], None]",
                    "Optional[Union[bool, typing.Callable[[Optional[str]], bool]]]"
                ],
                "name": [],
                "func": [
                    "typing.Callable"
                ],
                "caller": [
                    "Any",
                    "typing.Any",
                    "typing.Callable"
                ]
            },
            "_async_invoke": {
                "return": [
                    "typing.Union[Markup, typing.Any]",
                    "typing.Any"
                ],
                "arguments": [],
                "autoescape": [
                    "bool"
                ]
            },
            "__repr__": {
                "return": []
            },
            "_invoke": {
                "return": [
                    "Any",
                    "str"
                ],
                "autoescape": [
                    "bool"
                ],
                "arguments": [
                    "Union[List[typing.Any], Tuple[typing.Any, ...]]",
                    "typing.Sequence[typing.Any]",
                    "Union[List, Tuple]",
                    "typing.Iterable[typing.Any]",
                    "Union[List[typing.Any], Tuple[typing.Any, ...]"
                ]
            }
        },
        "Context": {
            "__contains__": {
                "return": [
                    "bool"
                ],
                "name": []
            },
            "__getitem__": {
                "key": [
                    "str"
                ],
                "return": []
            },
            "__init__": {
                "blocks": [
                    "dict[str, typing.Any]",
                    "dict[str, Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "globals": [
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "dict[typing.Any, typing.Any]"
                ],
                "environment": [],
                "name": [
                    "str"
                ],
                "parent": [
                    "object"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "call": {
                "__obj": [
                    "typing.Any",
                    "typing.Callable"
                ],
                "kwargs": [],
                "args": [],
                "return": []
            },
            "derived": {
                "locals": [
                    "dict[str, typing.Any]",
                    "typing.Optional[dict[str, typing.Any]]",
                    "typing.Optional[typing.Dict[str, typing.Any]]"
                ],
                "return": []
            },
            "get": {
                "default": [],
                "return": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "typing.Any",
                    "str",
                    "typing.Hashable",
                    "Hashable",
                    "Any"
                ]
            },
            "get_exported": {
                "return": [
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "get_all": {
                "return": []
            },
            "resolve": {
                "key": [],
                "return": [
                    "typing.Any",
                    "resolve",
                    "missing"
                ]
            },
            "resolve_or_missing": {
                "return": [
                    "typing.Any",
                    "typing.Union[typing.Any, typing.Any, typing.Any]"
                ],
                "key": [
                    "typing.Hashable",
                    "typing.Any",
                    "key",
                    "str"
                ]
            },
            "super": {
                "current": [],
                "name": [
                    "str"
                ],
                "return": []
            }
        },
        "ChainableUndefined": {
            "__getattr__": {
                "name": [
                    "str"
                ],
                "return": [
                    "Self"
                ]
            },
            "__getitem__": {
                "_name": [
                    "str"
                ],
                "return": []
            },
            "__html__": {
                "return": [
                    "str"
                ]
            }
        },
        "TemplateReference": {
            "__getitem__": {
                "return": [],
                "name": [
                    "str"
                ]
            },
            "__init__": {
                "context": [],
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": []
            }
        },
        "DebugUndefined": {
            "__str__": {
                "return": []
            }
        },
        "global": {
            "_dict_method_all": {
                "return": [],
                "dict_method": []
            },
            "identity": {
                "return": [
                    "Any",
                    "x",
                    "object"
                ],
                "x": [
                    "Any",
                    "x",
                    "any",
                    "identity"
                ]
            },
            "make_logging_undefined": {
                "base": [],
                "logger": [
                    "logging.Logger"
                ],
                "return": [
                    "Undefined",
                    "LoggingUndefined"
                ]
            },
            "new_context": {
                "shared": [
                    "bool"
                ],
                "blocks": [],
                "return": [],
                "globals": [
                    "dict[typing.Any, typing.Any]"
                ],
                "vars": [
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "dict[typing.Any, typing.Any]",
                    "vars"
                ],
                "environment": [],
                "template_name": [],
                "locals": [
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]",
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "Optional[dict[typing.Any, typing.Any]]"
                ]
            },
            "markup_join": {
                "return": [
                    "Markup",
                    "str",
                    "concat"
                ],
                "seq": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "str_join": {
                "seq": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "str"
                ]
            }
        }
    },
    "jinja2.sandbox": {
        "SandboxedEnvironment": {
            "__init__": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "args": []
            },
            "call": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "tuple[typing.Any, ...]",
                    "typing.Any",
                    "tuple"
                ],
                "__context": [],
                "return": [],
                "__obj": [
                    "typing.Callable",
                    "typing.Any"
                ]
            },
            "call_binop": {
                "context": [
                    "typing.Any",
                    "context",
                    "object"
                ],
                "right": [
                    "Any",
                    "Expression",
                    "object",
                    "str"
                ],
                "operator": [],
                "return": [],
                "left": []
            },
            "call_unop": {
                "operator": [
                    "str"
                ],
                "context": [],
                "arg": [],
                "return": [
                    "typing.Any",
                    "arg"
                ]
            },
            "getitem": {
                "argument": [
                    "typing.Union[str, typing.Any]",
                    "typing.Union[str, typing.Hashable]"
                ],
                "obj": [],
                "return": []
            },
            "getattr": {
                "attribute": [
                    "str"
                ],
                "return": [],
                "obj": []
            },
            "global": {
                "default_binop_table": [
                    "dict[str, typing.Callable[[typing.Any, typing.Any], typing.Any]]",
                    "SandboxedEnvironment"
                ],
                "intercepted_binops": [],
                "intercepted_unops": [],
                "default_unop_table": []
            },
            "is_safe_attribute": {
                "attr": [],
                "obj": [],
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Any",
                    "Any"
                ]
            },
            "is_safe_callable": {
                "obj": [
                    "typing.Any",
                    "typing.Callable"
                ],
                "return": [
                    "bool"
                ]
            },
            "unsafe_undefined": {
                "attribute": [
                    "str"
                ],
                "return": [
                    "Undefined",
                    "undefined",
                    "SecurityError",
                    "exc",
                    "SecurityUndefined",
                    "typing.NoReturn",
                    "self.undefined"
                ],
                "obj": [
                    "typing.Any"
                ]
            },
            "wrap_str_format": {
                "value": [],
                "return": [
                    "Union[None, Callable]",
                    "None",
                    "Optional[Callable]",
                    "Union[None, str]"
                ]
            }
        },
        "SandboxedFormatter": {
            "__init__": {
                "kwargs": [
                    "dict"
                ],
                "env": [
                    "typing.Any",
                    "env",
                    "dict"
                ],
                "return": [
                    "None"
                ]
            },
            "get_field": {
                "args": [
                    "tuple"
                ],
                "return": [
                    "tuple[typing.Any, typing.Any]"
                ],
                "field_name": [],
                "kwargs": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Any"
                ]
            }
        },
        "global": {
            "global": {
                "UNSAFE_FUNCTION_ATTRIBUTES": [
                    "set"
                ],
                "_mutable_spec": [],
                "UNSAFE_METHOD_ATTRIBUTES": []
            },
            "is_internal_attribute": {
                "return": [
                    "bool"
                ],
                "obj": [
                    "typing.Any",
                    "types"
                ],
                "attr": []
            },
            "modifies_known_mutable": {
                "obj": [
                    "typing.Any"
                ],
                "return": [
                    "bool"
                ],
                "attr": []
            },
            "safe_range": {
                "args": [
                    "tuple[int, ...]",
                    "tuple[int, ...",
                    "tuple[typing.Any, ...]"
                ],
                "return": [
                    "list[typing.Any]",
                    "typing.Sequence[typing.Any]",
                    "typing.Any",
                    "int"
                ]
            },
            "unsafe": {
                "return": [],
                "f": []
            }
        },
        "ImmutableSandboxedEnvironment": {
            "is_safe_attribute": {
                "return": [
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "typing.Any",
                    "object"
                ],
                "value": []
            }
        }
    },
    "jinja2.tests": {
        "global": {
            "test_defined": {
                "return": [
                    "bool"
                ],
                "value": []
            },
            "test_boolean": {
                "value": [
                    "typing.Any",
                    "Any",
                    "bool"
                ],
                "return": []
            },
            "test_divisibleby": {
                "num": [
                    "typing.Union[int, float]",
                    "float"
                ],
                "value": [
                    "int",
                    "typing.Union[int, float]",
                    "float"
                ],
                "return": []
            },
            "test_even": {
                "return": [
                    "bool"
                ],
                "value": [
                    "int"
                ]
            },
            "test_escaped": {
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Any"
                ]
            },
            "test_filter": {
                "return": [
                    "bool"
                ],
                "env": [
                    "filters",
                    "typing.Any",
                    "Environment",
                    "flask.ctx.RequestContext",
                    "env.filters"
                ],
                "value": [
                    "typing.Any",
                    "env.filters",
                    "str",
                    "in",
                    "typing.Hashable"
                ]
            },
            "test_in": {
                "seq": [
                    "typing.Iterable[typing.Any]",
                    "seq",
                    "typing.Iterable",
                    "typing.Sequence[typing.Any]"
                ],
                "return": [],
                "value": []
            },
            "test_false": {
                "value": [],
                "return": [
                    "bool"
                ]
            },
            "test_float": {
                "return": [],
                "value": []
            },
            "test_integer": {
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Union[bool,int]",
                    "int",
                    "typing.Any"
                ]
            },
            "test_iterable": {
                "return": [],
                "value": []
            },
            "test_mapping": {
                "return": [
                    "bool"
                ],
                "value": []
            },
            "test_lower": {
                "return": [
                    "bool"
                ],
                "value": []
            },
            "test_none": {
                "return": [],
                "value": [
                    "Any",
                    "any"
                ]
            },
            "test_sameas": {
                "other": [
                    "is",
                    "object",
                    "value",
                    "Any"
                ],
                "value": [],
                "return": []
            },
            "test_number": {
                "return": [
                    "bool"
                ],
                "value": [
                    "Number"
                ]
            },
            "test_odd": {
                "return": [
                    "bool"
                ],
                "value": []
            },
            "test_sequence": {
                "return": [
                    "bool"
                ],
                "value": []
            },
            "test_string": {
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Any",
                    "Any",
                    "str"
                ]
            },
            "test_test": {
                "return": [
                    "bool"
                ],
                "env": [
                    "tests",
                    "TestEnvironment",
                    "env",
                    "env.tests",
                    "in"
                ],
                "value": []
            },
            "test_true": {
                "value": [],
                "return": [
                    "bool"
                ]
            },
            "test_undefined": {
                "return": [],
                "value": []
            },
            "test_upper": {
                "value": [
                    "typing.Any"
                ],
                "return": []
            }
        }
    },
    "jinja2.utils": {
        "Joiner": {
            "__call__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "sep": [
                    "str"
                ],
                "return": []
            }
        },
        "LRUCache": {
            "__contains__": {
                "return": [],
                "key": [
                    "Any",
                    "str",
                    "in",
                    "Key",
                    "int"
                ]
            },
            "__delitem__": {
                "key": [],
                "return": [
                    "None"
                ]
            },
            "__getitem__": {
                "return": [
                    "Any",
                    "Value",
                    "rv"
                ],
                "key": [
                    "str",
                    "Any",
                    "K",
                    "int"
                ]
            },
            "__getnewargs__": {
                "return": []
            },
            "__init__": {
                "return": [],
                "capacity": [
                    "int",
                    "Any",
                    "float"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__reversed__": {
                "return": []
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__setitem__": {
                "return": [],
                "key": [
                    "Any",
                    "in"
                ],
                "value": [
                    "Any"
                ]
            },
            "_postinit": {
                "return": [
                    "None"
                ]
            },
            "__setstate__": {
                "d": [],
                "return": []
            },
            "clear": {
                "return": []
            },
            "__getstate__": {
                "return": []
            },
            "get": {
                "default": [],
                "return": [
                    "typing.Optional[typing.Any]"
                ],
                "key": []
            },
            "copy": {
                "return": [
                    "self"
                ]
            },
            "keys": {
                "return": []
            },
            "items": {
                "return": [
                    "list[typing.Any]",
                    "typing.Any",
                    "result"
                ]
            },
            "setdefault": {
                "key": [
                    "str",
                    "typing.Hashable"
                ],
                "return": [
                    "typing.Any"
                ],
                "default": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ]
            },
            "values": {
                "return": [
                    "list[typing.Any]"
                ]
            }
        },
        "Namespace": {
            "__getattribute__": {
                "return": [
                    "Any",
                    "name"
                ],
                "name": []
            },
            "__init__": {
                "return": [],
                "args": [],
                "kwargs": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__setitem__": {
                "return": [],
                "name": [
                    "str"
                ],
                "value": [
                    "Any",
                    "value"
                ]
            }
        },
        "Cycler": {
            "__init__": {
                "items": [
                    "tuple[typing.Any, ...]",
                    "tuple[typing.Any]",
                    "tuple",
                    "tuple[typing.Any, ..."
                ],
                "return": []
            },
            "next": {
                "return": []
            },
            "reset": {
                "return": []
            }
        },
        "_MissingType": {
            "__reduce__": {
                "return": []
            },
            "__repr__": {
                "return": []
            }
        },
        "global": {
            "clear_caches": {
                "return": []
            },
            "consume": {
                "iterable": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "generate_lorem_ipsum": {
                "min": [
                    "int"
                ],
                "return": [],
                "max": [],
                "n": [],
                "html": []
            },
            "htmlsafe_json_dumps": {
                "dumps": [],
                "return": [],
                "obj": [
                    "typing.Any"
                ],
                "kwargs": []
            },
            "global": {
                "internal_code": [
                    "set[typing.Any]"
                ],
                "missing": []
            },
            "import_string": {
                "silent": [],
                "import_name": [
                    "str",
                    "in"
                ],
                "return": [
                    "None",
                    "module",
                    "obj",
                    "getattr"
                ]
            },
            "internalcode": {
                "f": [
                    "function",
                    "callable"
                ],
                "return": []
            },
            "is_undefined": {
                "return": [
                    "bool"
                ],
                "obj": [
                    "typing.Any",
                    "Undefined"
                ]
            },
            "open_if_exists": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ],
                "return": [
                    "Optional[IO[Any]]",
                    "Optional[BinaryIO]",
                    "Optional[IO]",
                    "BinaryIO",
                    "TextIO",
                    "Optional[Union[TextIO, BinaryIO]]",
                    "Optional[TextIO]"
                ]
            },
            "object_type_repr": {
                "return": [],
                "obj": []
            },
            "pass_environment": {
                "f": [],
                "return": []
            },
            "pass_context": {
                "f": [
                    "typing.Callable[..., A]",
                    "typing.Callable[..., typing.Any]"
                ],
                "return": []
            },
            "pformat": {
                "return": [],
                "obj": []
            },
            "pass_eval_context": {
                "f": [
                    "f"
                ],
                "return": []
            },
            "select_autoescape": {
                "default": [
                    "bool"
                ],
                "default_for_string": [
                    "bool"
                ],
                "enabled_extensions": [
                    "tuple[str, ...]",
                    "..."
                ],
                "return": [
                    "typing.Callable[[str], bool]"
                ],
                "disabled_extensions": [
                    "tuple[str, ...]"
                ]
            },
            "url_quote": {
                "charset": [
                    "str"
                ],
                "for_qs": [
                    "bool"
                ],
                "obj": [
                    "typing.Any",
                    "typing.Union[str, bytes]",
                    "typing.Union[str, bytes, typing.Any]"
                ],
                "return": []
            },
            "urlize": {
                "target": [
                    "str"
                ],
                "rel": [],
                "extra_schemes": [
                    "typing.Optional[typing.Iterable[str]]",
                    "scheme"
                ],
                "text": [
                    "str"
                ],
                "return": [],
                "trim_url_limit": []
            }
        },
        "_PassArg": {
            "from_obj": {
                "obj": [
                    "typing.Any"
                ],
                "return": []
            }
        }
    },
    "jinja2.visitor": {
        "VisitCallable": {
            "__call__": {
                "args": [],
                "return": [
                    "typing.Any"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "node": [
                    "Node",
                    "typing.Any",
                    "node",
                    "object"
                ]
            }
        },
        "NodeTransformer": {
            "generic_visit": {
                "args": [
                    "typing.Tuple[typing.Any, ...]",
                    "typing.Any",
                    "tuple[typing.Any, ...]"
                ],
                "kwargs": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "AST",
                    "Any",
                    "node"
                ],
                "node": [
                    "Node"
                ]
            },
            "visit_list": {
                "kwargs": [],
                "node": [],
                "return": [],
                "args": [
                    "tuple[typing.Any, ...]",
                    "tuple[typing.Any]"
                ]
            }
        },
        "NodeVisitor": {
            "generic_visit": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict",
                    "typing.Dict[str, typing.Any]",
                    "Dict[str, Any]"
                ],
                "args": [],
                "node": []
            },
            "visit": {
                "args": [],
                "kwargs": [],
                "node": [],
                "return": [
                    "typing.Any",
                    "f"
                ]
            },
            "get_visitor": {
                "node": [
                    "Any",
                    "Node",
                    "object",
                    "typing.Any"
                ],
                "return": []
            }
        }
    }
}