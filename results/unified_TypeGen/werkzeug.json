{
    "werkzeug._internal": {
        "_DictAccessorProperty": {
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__delete__": {
                "return": [],
                "instance": [
                    "instance",
                    "object",
                    "Any"
                ]
            },
            "__init__": {
                "return": [],
                "load_func": [],
                "name": [
                    "str"
                ],
                "read_only": [],
                "dump_func": [
                    "typing.Optional[typing.Callable]",
                    "typing.Callable"
                ],
                "doc": [
                    "typing.Optional[str]",
                    "str"
                ],
                "default": []
            },
            "__set__": {
                "return": [],
                "instance": [
                    "typing.Any"
                ],
                "value": []
            },
            "lookup": {
                "return": [
                    "None"
                ],
                "instance": []
            }
        },
        "_ColorStreamHandler": {
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "_Missing": {
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__reduce__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "_has_level_handler": {
                "return": [],
                "logger": [
                    "logging.Logger"
                ]
            },
            "_get_environ": {
                "obj": [
                    "object",
                    "typing.Union[dict, object]",
                    "typing.Any"
                ],
                "return": []
            },
            "_log": {
                "return": [
                    "None",
                    "NoReturn"
                ],
                "message": [
                    "str"
                ],
                "args": [
                    "tuple",
                    "typing.Tuple[Any, ...]",
                    "tuple[Any, ...]",
                    "tuple[typing.Any, ...]",
                    "args",
                    "typing",
                    "typing.Tuple[typing.Any, ...]"
                ],
                "type": [
                    "str"
                ],
                "kwargs": []
            },
            "_plain_int": {
                "value": [
                    "str"
                ],
                "return": []
            },
            "_wsgi_encoding_dance": {
                "return": [
                    "str"
                ],
                "s": []
            },
            "_wsgi_decoding_dance": {
                "return": [
                    "str"
                ],
                "s": [
                    "str",
                    "typing.Union[str, bytes]"
                ]
            },
            "global": {
                "_logger": [
                    "typing.Optional[logging.Logger]"
                ]
            }
        }
    },
    "werkzeug._reloader": {
        "ReloaderLoop": {
            "__enter__": {
                "return": [
                    "Self"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "exclude_patterns": [
                    "typing.Optional[typing.Iterable[str]]"
                ],
                "extra_files": [
                    "typing.Optional[typing.Iterable[str]]",
                    "or",
                    "typing.Optional[typing.Iterable[typing.Any]]"
                ],
                "interval": [
                    "int"
                ]
            },
            "log_reload": {
                "return": [],
                "filename": []
            },
            "restart_with_reloader": {
                "return": [
                    "int"
                ]
            },
            "run_step": {
                "return": []
            },
            "run": {
                "return": [
                    "None"
                ]
            },
            "trigger_reload": {
                "filename": [],
                "return": [
                    "None"
                ]
            }
        },
        "WatchdogReloaderLoop": {
            "__init__": {
                "return": [
                    "None"
                ],
                "kwargs": [],
                "args": []
            },
            "__enter__": {
                "return": []
            },
            "run": {
                "return": [
                    "None"
                ]
            },
            "trigger_reload": {
                "filename": [],
                "return": [
                    "None"
                ]
            },
            "run_step": {
                "return": []
            }
        },
        "global": {
            "_find_common_roots": {
                "return": [
                    "set[typing.Any]"
                ],
                "paths": []
            },
            "_find_stat_paths": {
                "return": [
                    "typing.Any",
                    "set[typing.Any]",
                    "list[typing.Any]"
                ],
                "extra_files": [
                    "typing.Iterable[str]",
                    "Iterable[str]"
                ],
                "exclude_patterns": []
            },
            "_find_watchdog_paths": {
                "extra_files": [],
                "return": [
                    "typing.Any"
                ],
                "exclude_patterns": [
                    "typing.Iterable[str]"
                ]
            },
            "ensure_echo_on": {
                "return": [
                    "None"
                ]
            },
            "_remove_by_pattern": {
                "exclude_patterns": [
                    "typing.Iterable[str]"
                ],
                "return": [],
                "paths": []
            },
            "_iter_module_paths": {
                "return": [
                    "None",
                    "Iterator[str]",
                    "Generator[str, None, None]",
                    "List[str]",
                    "Iterable[str]",
                    "list[str]",
                    "yield"
                ]
            },
            "_get_args_for_reloading": {
                "return": [
                    "list[typing.Union[str,typing.List[str]]]",
                    "list[typing.Union[str,Any]]",
                    "list[str]",
                    "list[typing.Union[str,typing.Any]]",
                    "list[typing.Union[str,list[str]]]"
                ]
            },
            "global": {
                "reloader_loops": [
                    "dict[str, typing.Type]",
                    "dict[str, typing.Union[StatReloaderLoop, WatchdogReloaderLoop]]",
                    "dict[str, typing.Any]",
                    "dict[str, typing.Type[typing.Union[StatReloaderLoop, WatchdogReloaderLoop]]]"
                ]
            },
            "run_with_reloader": {
                "exclude_patterns": [
                    "Optional[list[str]]",
                    "Optional[Any]"
                ],
                "extra_files": [
                    "Optional[list[str]]",
                    "list[str]"
                ],
                "main_func": [
                    "Callable",
                    "Callable[[], None]"
                ],
                "return": [
                    "None"
                ],
                "reloader_type": [],
                "interval": []
            }
        },
        "StatReloaderLoop": {
            "__enter__": {
                "return": []
            },
            "run_step": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "werkzeug.datastructures": {
        "global": {
            "__getattr__": {
                "return": [
                    "name",
                    "typing.Any",
                    "typing.Type[typing.Any]",
                    ".structures"
                ],
                "name": []
            }
        }
    },
    "werkzeug.datastructures.accept": {
        "Accept": {
            "__contains__": {
                "return": [],
                "value": []
            },
            "__init__": {
                "return": [],
                "values": [
                    "typing.Union[None, Accept, typing.Iterable[typing.Tuple]]",
                    "typing.Union[None, Accept,typing.Iterable[typing.Tuple]]",
                    "typing.Union[None, Accept, typing.Iterable[typing.Tuple[typing.Any, typing.Any]]]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_best_single_match": {
                "return": [],
                "match": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "_value_matches": {
                "return": [
                    "bool"
                ],
                "item": [
                    "str"
                ],
                "value": []
            },
            "_specificity": {
                "return": [
                    "tuple[bool]"
                ],
                "value": []
            },
            "find": {
                "key": [],
                "return": [
                    "int"
                ]
            },
            "quality": {
                "key": [],
                "return": [
                    "typing.Union[int, float]",
                    "typing.Union[typing.Any, int]",
                    "typing.Union[int, typing.Any]"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Iterator[typing.Any]"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "index": {
                "return": [],
                "key": []
            }
        },
        "global": {
            "_normalize_mime": {
                "return": [],
                "value": [
                    "str"
                ]
            },
            "_normalize_lang": {
                "return": [
                    "list[str]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MIMEAccept": {
            "_specificity": {
                "return": [
                    "tuple[bool]"
                ],
                "value": [
                    "str"
                ]
            },
            "_value_matches": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ],
                "item": [
                    "str"
                ]
            }
        },
        "CharsetAccept": {
            "_value_matches": {
                "item": [
                    "str"
                ],
                "return": [
                    "bool"
                ],
                "value": []
            }
        },
        "LanguageAccept": {
            "_value_matches": {
                "item": [],
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.auth": {
        "Authorization": {
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str",
                    "Any",
                    "self.parameters",
                    "int",
                    "Union[str, int]",
                    "dict",
                    "Hashable"
                ]
            },
            "__eq__": {
                "other": [
                    "Authorization"
                ],
                "return": []
            },
            "__getattr__": {
                "return": [],
                "name": [
                    "str"
                ]
            },
            "__getitem__": {
                "name": [],
                "return": [
                    "Optional[Any]",
                    "Any",
                    "typing.Any"
                ]
            },
            "__init__": {
                "auth_type": [],
                "return": [
                    "None"
                ],
                "data": [
                    "typing.Optional[dict]"
                ],
                "token": [
                    "typing.Any",
                    "str",
                    "typing.Optional[str]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "from_header": {
                "value": [
                    "str"
                ],
                "return": []
            },
            "get": {
                "return": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "default",
                    "self.parameters"
                ],
                "key": [],
                "default": []
            },
            "to_header": {
                "return": []
            },
            "__str__": {
                "return": []
            }
        },
        "WWWAuthenticate": {
            "__delattr__": {
                "return": [
                    "None"
                ],
                "name": []
            },
            "__delitem__": {
                "key": [
                    "str",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            },
            "__eq__": {
                "other": [
                    "WWWAuthenticate"
                ],
                "return": [
                    "bool"
                ]
            },
            "__contains__": {
                "key": [
                    "str",
                    "Any",
                    "self.parameters",
                    "int",
                    "Hashable"
                ],
                "return": []
            },
            "__getattr__": {
                "name": [
                    "str"
                ],
                "return": []
            },
            "__init__": {
                "auth_type": [
                    "str"
                ],
                "values": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "token": [
                    "typing.Optional[str]"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "value": [],
                "key": []
            },
            "__setattr__": {
                "return": [],
                "name": [
                    "str"
                ],
                "value": [
                    "typing.Any"
                ]
            },
            "__getitem__": {
                "return": [],
                "key": []
            },
            "__repr__": {
                "return": []
            },
            "_trigger_on_update": {
                "return": [
                    "None"
                ]
            },
            "from_header": {
                "value": [
                    "str"
                ],
                "return": [
                    "typing.Optional[cls]",
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "Optional[cls]",
                    "cls"
                ]
            },
            "__str__": {
                "return": []
            },
            "get": {
                "default": [],
                "return": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "self.parameters",
                    "default"
                ],
                "key": []
            },
            "to_header": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.cache_control": {
        "_CacheControl": {
            "__init__": {
                "on_update": [
                    "Optional[Callable]"
                ],
                "values": [
                    "typing.Optional[typing.Sequence[typing.Any]]",
                    "typing.Optional[typing.Iterable[typing.Any]]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "_get_cache_value": {
                "key": [
                    "Hashable"
                ],
                "type": [
                    "type"
                ],
                "return": [],
                "empty": [
                    "typing.Any"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_del_cache_value": {
                "return": [
                    "None"
                ],
                "key": [
                    "typing.Hashable",
                    "typing.Any",
                    "self",
                    "key",
                    "str",
                    "in"
                ]
            },
            "_set_cache_value": {
                "return": [
                    "None"
                ],
                "key": [],
                "type": [
                    "typing.Optional[type]",
                    "type"
                ],
                "value": []
            },
            "global": {
                "no_transform": [
                    "bool",
                    "ResponseCacheControl",
                    "property",
                    "type"
                ],
                "no_store": [],
                "stale_if_error": [],
                "max_age": [
                    "int",
                    "typing.Optional[int]",
                    "None",
                    "t.Any",
                    "typing.Union[int, None]",
                    "RequestCacheControl",
                    "ResponseCacheControl"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "cache_control_property": {
                "doc": [],
                "empty": [],
                "key": [
                    "str"
                ],
                "type": [],
                "return": []
            }
        },
        "ResponseCacheControl": {
            "global": {
                "immutable": [],
                "no_cache": [
                    "ResponseCacheControl",
                    "bool",
                    "RequestCacheControl",
                    "t.Any"
                ],
                "must_understand": [],
                "private": [
                    "private",
                    "None",
                    "ResponseCacheControl"
                ],
                "must_revalidate": [
                    "bool"
                ],
                "stale_while_revalidate": [
                    "int",
                    "None",
                    "typing.Optional[int]",
                    "t.Any",
                    "ResponseCacheControl",
                    "typing.Union[int, None]"
                ],
                "proxy_revalidate": [],
                "public": [
                    "bool",
                    "public"
                ],
                "s_maxage": [
                    "None",
                    "int",
                    "t.Any",
                    "typing.Optional[int]",
                    "Optional[int]",
                    "typing.Union[int, None]"
                ]
            }
        },
        "RequestCacheControl": {
            "global": {
                "min_fresh": [
                    "int",
                    "None",
                    "RequestCacheControl",
                    "t.Any",
                    "typing.Optional[int]",
                    "typing.Union[int, None]"
                ],
                "max_stale": [
                    "int",
                    "t.Any",
                    "None",
                    "bool"
                ],
                "only_if_cached": [],
                "no_cache": []
            }
        }
    },
    "werkzeug.datastructures.csp": {
        "ContentSecurityPolicy": {
            "__init__": {
                "return": [
                    "None"
                ],
                "values": [
                    "typing.Optional[typing.Sequence[typing.Any]]",
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.Tuple[typing.Any, ...]]"
                ],
                "on_update": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "_del_value": {
                "key": [
                    "typing.Hashable",
                    "typing.Any"
                ],
                "return": []
            },
            "_set_value": {
                "return": [
                    "None"
                ],
                "value": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "key": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_get_value": {
                "return": [
                    "typing.Any",
                    "Any"
                ],
                "key": [
                    "str",
                    "typing.Any",
                    "typing.Hashable",
                    "Union[str, int]",
                    "Any"
                ]
            },
            "global": {
                "default_src": [
                    "property"
                ],
                "connect_src": [
                    "property",
                    "typing.Union[str, None]",
                    "typing.Optional[str]"
                ],
                "frame_ancestors": [],
                "manifest_src": [
                    "property",
                    "typing.Union[str, None]",
                    "ContentSecurityPolicy"
                ],
                "media_src": [
                    "property"
                ],
                "base_uri": [
                    "property",
                    "typing.Union[str, None]"
                ],
                "img_src": [
                    "property",
                    "typing.Union[str, None]",
                    "ContentSecurityPolicy"
                ],
                "object_src": [
                    "property"
                ],
                "navigate_to": [],
                "plugin_types": [
                    "property",
                    "ContentSecurityPolicy",
                    "typing.Optional[str]"
                ],
                "report_uri": [
                    "typing.Union[str, None]",
                    "ContentSecurityPolicy",
                    "Union[str, None]"
                ],
                "sandbox": [
                    "property"
                ],
                "script_src": [],
                "child_src": [
                    "property",
                    "typing.Union[str, None]"
                ],
                "script_src_elem": [
                    "property"
                ],
                "style_src_elem": [
                    "property"
                ],
                "style_src_attr": [
                    "property",
                    "t.Any"
                ],
                "style_src": [],
                "prefetch_src": [
                    "property"
                ],
                "font_src": [],
                "report_to": [
                    "property",
                    "ContentSecurityPolicy"
                ],
                "form_action": [
                    "property",
                    "typing.Union[str, None]",
                    "typing.Any",
                    "typing.Optional[str]"
                ],
                "worker_src": [],
                "frame_src": [],
                "script_src_attr": [
                    "property",
                    "t.Any",
                    "typing.Any"
                ]
            },
            "to_header": {
                "return": []
            }
        },
        "global": {
            "csp_property": {
                "return": [
                    "property"
                ],
                "key": []
            }
        }
    },
    "werkzeug.datastructures.etag": {
        "ETags": {
            "__bool__": {
                "return": []
            },
            "__call__": {
                "include_weak": [],
                "etag": [],
                "return": [],
                "data": []
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "etag": []
            },
            "__init__": {
                "star_tag": [],
                "weak_etags": [
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Iterable[typing.Any]",
                    "typing.Optional[typing.Iterable[typing.Hashable]]",
                    "typing.Optional[typing.Iterable[str]]",
                    "frozenset"
                ],
                "strong_etags": [
                    "Iterable",
                    "Iterable[str]",
                    "Optional[Iterable]",
                    "List[str]"
                ]
            },
            "__iter__": {
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "as_set": {
                "return": [
                    "set[typing.Any]",
                    "typing.Any",
                    "typing.Set[typing.Any]",
                    "rv"
                ],
                "include_weak": []
            },
            "contains": {
                "etag": [],
                "return": [
                    "bool"
                ]
            },
            "contains_raw": {
                "etag": [],
                "return": []
            },
            "contains_weak": {
                "etag": [],
                "return": [
                    "bool"
                ]
            },
            "is_weak": {
                "etag": [
                    "str"
                ],
                "return": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "is_strong": {
                "etag": [
                    "str"
                ],
                "return": [
                    "bool"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.file_storage": {
        "FileStorage": {
            "__getattr__": {
                "name": [
                    "str"
                ],
                "return": [
                    "Any",
                    "typing.Any"
                ]
            },
            "__bool__": {
                "return": []
            },
            "__init__": {
                "content_type": [
                    "typing.Optional[str]"
                ],
                "headers": [
                    "typing.Optional[Headers]",
                    "Optional[Headers]"
                ],
                "filename": [
                    "Optional[str]",
                    "str"
                ],
                "stream": [
                    "typing.Optional[typing.IO]"
                ],
                "content_length": [],
                "name": [
                    "typing.Optional[str]",
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_parse_content_type": {
                "return": []
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "save": {
                "buffer_size": [
                    "int"
                ],
                "return": [],
                "dst": [
                    "str",
                    "Union[str, IO]",
                    "copyfileobj",
                    "Union[str, PathLike, BinaryIO]",
                    "Union[PathLike, str]",
                    "Union[str, IO[bytes]]",
                    "Union[str, PathLike]",
                    "Union[PathLike, str, IO[bytes]]",
                    "Union[str, PathLike, IO[bytes]]",
                    "PathLike",
                    "fspath",
                    "close",
                    "Union[str, PathLike, IO]"
                ]
            },
            "__repr__": {
                "return": []
            }
        },
        "FileMultiDict": {
            "add_file": {
                "content_type": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "filename": [],
                "file": []
            }
        }
    },
    "werkzeug.datastructures.headers": {
        "Headers": {
            "__contains__": {
                "return": [],
                "key": [
                    "str",
                    "Key"
                ]
            },
            "__copy__": {
                "return": [
                    "self",
                    "Tree"
                ]
            },
            "__delitem__": {
                "key": [
                    "Union[str, int]",
                    "str"
                ],
                "return": []
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "other",
                    "self",
                    "Dict"
                ]
            },
            "__init__": {
                "return": [
                    "None",
                    "typing.Optional[typing.Any]",
                    "NoReturn"
                ],
                "defaults": [
                    "typing.Iterable[typing.Any]",
                    "list[typing.Any]",
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.List[typing.Any]]"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__ior__": {
                "return": [
                    "NotImplementedType",
                    "self",
                    "Union[NotImplementedType, TypeOfSelf]",
                    "Union[NotImplementedType, ClassType]"
                ],
                "other": []
            },
            "__iter__": {
                "return": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__or__": {
                "return": [
                    "cabc.Mapping",
                    "Mapping",
                    "dict",
                    "self"
                ],
                "other": []
            },
            "_del_key": {
                "return": [
                    "None"
                ],
                "key": []
            },
            "_get_key": {
                "return": [
                    "typing.Any"
                ],
                "key": [
                    "str"
                ]
            },
            "add": {
                "key": [
                    "str"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "value": [
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            },
            "add_header": {
                "key": [],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": [],
                "value": []
            },
            "__str__": {
                "return": []
            },
            "get_all": {
                "name": [
                    "str"
                ],
                "return": []
            },
            "items": {
                "lower": [
                    "bool"
                ],
                "return": []
            },
            "extend": {
                "arg": [
                    "None"
                ],
                "kwargs": [
                    "dict",
                    "Dict[str, Any]",
                    "dict[str, Any]"
                ],
                "return": []
            },
            "keys": {
                "return": [
                    "typing.Generator[typing.Any, None, None]"
                ],
                "lower": [
                    "bool"
                ]
            },
            "popitem": {
                "return": [
                    "typing.Any"
                ]
            },
            "remove": {
                "key": [
                    "typing.Any",
                    "typing.Hashable",
                    "str"
                ],
                "return": []
            },
            "set": {
                "kwargs": [],
                "value": [
                    "typing.Any"
                ],
                "return": [
                    "None"
                ],
                "key": []
            },
            "setdefault": {
                "default": [
                    "typing.Any"
                ],
                "key": [
                    "str",
                    "typing.Hashable",
                    "typing.Any",
                    "typing.Union[str, int]"
                ],
                "return": []
            },
            "setlist": {
                "return": [],
                "values": [
                    "typing.Iterable[typing.Any]",
                    "list[typing.Any]",
                    "values",
                    "list",
                    "typing.Sequence[typing.Any]"
                ],
                "key": [
                    "typing.Hashable"
                ]
            },
            "setlistdefault": {
                "return": [
                    "list[typing.Any]"
                ],
                "default": [
                    "typing.Any",
                    "typing.Sequence[typing.Any]",
                    "list",
                    "typing.List[typing.Any]",
                    "Sequence[typing.Any]",
                    "default"
                ],
                "key": []
            },
            "copy": {
                "return": []
            },
            "update": {
                "arg": [
                    "MultiDict[str, t.Any]",
                    "arg",
                    "typing.Union[Headers, MultiDict[str, typing.Any], cabc.Mapping[str, typing.Union[typing.Any, list[typing.Any], tuple[typing.Any, ...], cabc.Set[typing.Any]]], cabc.Iterable[tuple[str, typing.Any]], None]",
                    "None"
                ],
                "kwargs": [
                    "dict",
                    "dict[str, Any]",
                    "Any"
                ],
                "return": []
            },
            "clear": {
                "return": []
            },
            "values": {
                "return": []
            },
            "to_wsgi_list": {
                "return": [
                    "list"
                ]
            }
        },
        "EnvironHeaders": {
            "__eq__": {
                "other": [],
                "return": [
                    "bool"
                ]
            },
            "__getitem__": {
                "return": [],
                "key": [
                    "str"
                ]
            },
            "__len__": {
                "return": []
            },
            "__init__": {
                "return": [],
                "environ": [
                    "dict[str, typing.Any]",
                    "WSGIEnvironment"
                ]
            },
            "__or__": {
                "return": [
                    "None"
                ],
                "other": []
            },
            "__iter__": {
                "return": [
                    "yield",
                    "title",
                    "str",
                    "value",
                    "key"
                ]
            },
            "_get_key": {
                "key": [
                    "str"
                ],
                "return": []
            },
            "copy": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_options_header_vkw": {
                "kw": [],
                "return": [
                    "str",
                    "kw"
                ],
                "value": []
            },
            "_str_header_value": {
                "return": [
                    "str"
                ],
                "value": [
                    "str",
                    "typing.Any"
                ]
            }
        }
    },
    "werkzeug.datastructures.mixins": {
        "ImmutableDictMixin": {
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "int",
                    "str",
                    "Any",
                    "object"
                ]
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__ior__": {
                "return": [],
                "other": [
                    "other",
                    "int"
                ]
            },
            "__reduce_ex__": {
                "return": [],
                "protocol": []
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "value": [],
                "key": []
            },
            "_iter_hashitems": {
                "return": [
                    "typing.Iterator",
                    "typing.ItemsView"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "_hash_cache": [
                    "typing.Union[int, None]"
                ]
            },
            "pop": {
                "key": [
                    "str"
                ],
                "return": [
                    "None",
                    "default",
                    "typing.Optional[Any]",
                    "pop",
                    "typing.Optional[typing.Any]",
                    "Optional[Any]",
                    "typing.Any",
                    "key",
                    "dict.pop"
                ],
                "default": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Any, typing.Any]",
                    "popitem",
                    "None"
                ]
            },
            "setdefault": {
                "default": [],
                "return": [],
                "key": []
            },
            "update": {
                "arg": [],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "ImmutableHeadersMixin": {
            "__delitem__": {
                "kwargs": [],
                "return": [],
                "key": []
            },
            "__ior__": {
                "return": [
                    "None"
                ],
                "other": [
                    "other",
                    "int"
                ]
            },
            "__setitem__": {
                "return": [],
                "key": [
                    "str",
                    "Any"
                ],
                "value": [
                    "Any",
                    "value"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "key": [],
                "value": [
                    "typing.Any"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Any",
                    "typing.Dict[str, typing.Any]"
                ]
            },
            "add_header": {
                "value": [
                    "Any"
                ],
                "key": [
                    "Any",
                    "t.Any"
                ],
                "kwargs": [],
                "return": []
            },
            "extend": {
                "arg": [
                    "typing.Any"
                ],
                "kwargs": [
                    "dict[str, unknown]"
                ],
                "return": []
            },
            "insert": {
                "return": [
                    "None"
                ],
                "pos": [],
                "value": []
            },
            "pop": {
                "default": [
                    "typing.Any"
                ],
                "key": [
                    "typing.Optional[str]"
                ],
                "return": []
            },
            "popitem": {
                "return": []
            },
            "set": {
                "key": [
                    "typing.Any"
                ],
                "return": [
                    "None"
                ],
                "value": [],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "dict[str, typing.Any]",
                    "typing.Any"
                ]
            },
            "remove": {
                "return": [
                    "None"
                ],
                "key": []
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "values": [
                    "list[typing.Any]",
                    "list",
                    "typing.Any"
                ],
                "key": [
                    "str",
                    "typing.Hashable",
                    "typing.Any",
                    "key"
                ]
            },
            "setlistdefault": {
                "default": [
                    "list",
                    "typing.Any"
                ],
                "return": [
                    "None",
                    "list",
                    "typing.Any",
                    "setlistdefault"
                ],
                "key": []
            },
            "setdefault": {
                "default": [
                    "typing.Any"
                ],
                "key": [
                    "typing.Any"
                ],
                "return": []
            },
            "update": {
                "return": [],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "arg": []
            }
        },
        "UpdateDictMixin": {
            "__delitem__": {
                "key": [
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            },
            "__ior__": {
                "return": [
                    "Any",
                    "typing.Any",
                    "Self"
                ],
                "other": [
                    "Any",
                    "typing.Any",
                    "int",
                    "builtins.int",
                    "typing.Set",
                    "other",
                    "set"
                ]
            },
            "__setitem__": {
                "key": [
                    "str",
                    "int",
                    "Any"
                ],
                "value": [
                    "Any"
                ],
                "return": [
                    "None"
                ]
            },
            "clear": {
                "return": []
            },
            "global": {
                "on_update": []
            },
            "setdefault": {
                "default": [],
                "key": [
                    "typing.Hashable",
                    "typing.Any",
                    "self",
                    "in"
                ],
                "return": [
                    "typing.Any",
                    "setdefault"
                ],
                "self": []
            },
            "popitem": {
                "return": []
            },
            "update": {
                "arg": [
                    "typing.Union[cabc.Mapping[K, V], cabc.Iterable[tuple[K, V]], None]"
                ],
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "dict[K, V]",
                    "arg",
                    "kwargs",
                    "V",
                    "cabc.Mapping[K, V]"
                ]
            }
        },
        "ImmutableListMixin": {
            "__delitem__": {
                "key": [
                    "str",
                    "int",
                    "object"
                ],
                "return": []
            },
            "__hash__": {
                "return": []
            },
            "__iadd__": {
                "other": [],
                "return": [
                    "Self",
                    "self",
                    "MyClass",
                    "ClassName"
                ]
            },
            "__imul__": {
                "return": [],
                "other": [
                    "other",
                    "float"
                ]
            },
            "__reduce_ex__": {
                "protocol": [],
                "return": []
            },
            "__setitem__": {
                "value": [
                    "Any",
                    "value"
                ],
                "key": [],
                "return": []
            },
            "extend": {
                "iterable": [],
                "return": []
            },
            "append": {
                "return": [],
                "item": [
                    "typing.Any"
                ]
            },
            "insert": {
                "return": [
                    "None"
                ],
                "pos": [
                    "int"
                ],
                "value": [
                    "Any",
                    "object",
                    "int",
                    "None",
                    "pos"
                ]
            },
            "pop": {
                "return": [
                    "typing.Any"
                ],
                "index": []
            },
            "remove": {
                "return": [
                    "None"
                ],
                "item": [
                    "Item",
                    "object",
                    "item",
                    "Any"
                ]
            },
            "global": {
                "_hash_cache": []
            },
            "reverse": {
                "return": [],
                "self": [
                    "self",
                    "object",
                    "Self",
                    "ClassName",
                    "Any",
                    "reverse"
                ]
            },
            "sort": {
                "reverse": [
                    "bool"
                ],
                "return": [
                    "None"
                ],
                "key": []
            }
        },
        "ImmutableMultiDictMixin": {
            "__reduce_ex__": {
                "return": [],
                "protocol": [
                    "int"
                ]
            },
            "_iter_hashitems": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "key": [
                    "str",
                    "Hashable",
                    "typing.Hashable"
                ],
                "value": []
            },
            "popitemlist": {
                "return": []
            },
            "poplist": {
                "key": [
                    "str"
                ],
                "return": [
                    "list",
                    "typing.Any",
                    "typing.List[typing.Any]",
                    "None"
                ]
            },
            "setlist": {
                "new_list": [
                    "typing.Any",
                    "list[typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "key": []
            },
            "setlistdefault": {
                "default_list": [],
                "return": [
                    "None",
                    "list"
                ],
                "key": []
            }
        },
        "global": {
            "_always_update": {
                "return": [
                    "typing.Callable[..., t.Any]",
                    "typing.Callable[..., typing.Any]"
                ],
                "f": []
            },
            "_immutable_error": {
                "return": [
                    "None"
                ],
                "self": [
                    "self",
                    "Any"
                ]
            }
        }
    },
    "werkzeug.datastructures.range": {
        "ContentRange": {
            "__bool__": {
                "return": []
            },
            "__init__": {
                "length": [
                    "typing.Optional[int]"
                ],
                "return": [],
                "stop": [
                    "typing.Any",
                    "typing.Union[int, float]",
                    "float",
                    "int",
                    "typing.Union[typing.Any, None]",
                    "typing.Union[typing.Any,typing.Any]",
                    "typing.Union[typing.Any, int]"
                ],
                "units": [],
                "on_update": [
                    "typing.Optional[typing.Callable]",
                    "typing.Any",
                    "typing.Callable",
                    "function"
                ],
                "start": []
            },
            "__repr__": {
                "return": []
            },
            "global": {
                "units": [
                    "str",
                    "units"
                ],
                "stop": [
                    "int",
                    "stop",
                    "ContentRange",
                    "set"
                ],
                "length": [],
                "start": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "set": {
                "return": [
                    "None"
                ],
                "stop": [],
                "units": [],
                "start": [],
                "length": []
            },
            "to_header": {
                "return": []
            },
            "unset": {
                "return": [
                    "None"
                ]
            }
        },
        "IfRange": {
            "__init__": {
                "etag": [
                    "typing.Optional[str]"
                ],
                "date": []
            },
            "__repr__": {
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "to_header": {
                "return": []
            }
        },
        "Range": {
            "__init__": {
                "units": [],
                "return": [],
                "ranges": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "make_content_range": {
                "length": [
                    "int"
                ],
                "return": [
                    "Optional[ContentRange]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "range_for_length": {
                "length": [
                    "int"
                ],
                "return": []
            },
            "to_content_range_header": {
                "return": [],
                "length": []
            },
            "to_header": {
                "return": [
                    "str"
                ]
            }
        },
        "_CallbackProperty": {
            "__set__": {
                "instance": [],
                "return": [
                    "None"
                ],
                "value": [
                    "typing.Any"
                ]
            },
            "__set_name__": {
                "name": [
                    "str"
                ],
                "owner": [
                    "type",
                    "typing.Any"
                ],
                "return": []
            }
        }
    },
    "werkzeug.datastructures.structures": {
        "HeaderSet": {
            "__bool__": {
                "return": []
            },
            "__contains__": {
                "header": [
                    "str"
                ],
                "return": [
                    "bool"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "idx": [
                    "int"
                ],
                "self": []
            },
            "__getitem__": {
                "idx": [],
                "return": []
            },
            "__init__": {
                "on_update": [],
                "return": [
                    "None",
                    "Optional[Dict]"
                ],
                "headers": [
                    "typing.Optional[typing.Iterable]",
                    "typing.Optional[typing.Iterable[typing.Tuple[str, str]]]",
                    "typing.Optional[Iterable]",
                    "typing.Optional[Iterable[typing.Tuple[str, str]]]",
                    "typing.Iterable"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__setitem__": {
                "idx": [
                    "int"
                ],
                "self": [
                    "self",
                    "ClassName",
                    "object",
                    "Any",
                    "typing"
                ],
                "value": [
                    "str"
                ],
                "return": []
            },
            "__iter__": {
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "add": {
                "return": [],
                "header": []
            },
            "as_set": {
                "return": [
                    "set[typing.Any]"
                ],
                "preserve_casing": [
                    "bool"
                ]
            },
            "clear": {
                "return": [],
                "self": []
            },
            "discard": {
                "return": [
                    "None"
                ],
                "header": [
                    "typing.Any"
                ]
            },
            "find": {
                "header": [
                    "str"
                ],
                "return": []
            },
            "index": {
                "header": [
                    "str",
                    "typing.Union[str, int]",
                    "int"
                ],
                "return": []
            },
            "remove": {
                "header": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "self": []
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "update": {
                "iterable": [
                    "typing.Iterable[typing.Any]",
                    "typing.Iterable[str]"
                ],
                "return": [
                    "None"
                ],
                "self": [
                    "self",
                    "typing.Any",
                    "ClassName",
                    "update",
                    "Any",
                    "list",
                    "iterable"
                ]
            }
        },
        "CombinedMultiDict": {
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "typing.Hashable",
                    "typing.Any"
                ]
            },
            "__getitem__": {
                "return": [
                    "typing.Any"
                ],
                "key": [
                    "typing.Hashable",
                    "typing.Any",
                    "str"
                ]
            },
            "__init__": {
                "dicts": [],
                "return": []
            },
            "__iter__": {
                "return": []
            },
            "__reduce_ex__": {
                "protocol": [],
                "return": []
            },
            "__repr__": {
                "return": []
            },
            "_keys_impl": {
                "return": [
                    "set"
                ]
            },
            "__len__": {
                "return": []
            },
            "copy": {
                "return": [
                    "MultiDict"
                ]
            },
            "fromkeys": {
                "value": [],
                "return": [],
                "keys": []
            },
            "lists": {
                "return": [
                    "typing.ItemsView[typing.Any, typing.Any]",
                    "list[typing.Tuple[typing.Any, typing.Any]]",
                    "list[typing.Any]",
                    "list[tuple[typing.Any, typing.Any]]"
                ]
            },
            "keys": {
                "return": [
                    "Iterable[Key]",
                    "list[Key]",
                    "set[Key]",
                    "Dict[Key, Value]",
                    "dict[Key, Any]",
                    "Key"
                ]
            },
            "listvalues": {
                "return": [
                    "typing.Generator[typing.Any, None, None]"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, None, None]"
                ]
            }
        },
        "MultiDict": {
            "__copy__": {
                "return": [
                    "self"
                ]
            },
            "__deepcopy__": {
                "return": [
                    "self"
                ],
                "memo": []
            },
            "__getitem__": {
                "return": [
                    "typing.Any"
                ],
                "key": []
            },
            "__getstate__": {
                "return": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "__init__": {
                "return": [],
                "mapping": [
                    "Optional[Union[MultiDict, cabc.Mapping, Iterable[Tuple[Any, Any]]]]",
                    "cabc.Mapping",
                    "mapping"
                ]
            },
            "__ior__": {
                "other": [
                    "Union[cabc.Mapping, cabc.Iterable]"
                ],
                "return": []
            },
            "__iter__": {
                "return": []
            },
            "__or__": {
                "return": [
                    "NotImplemented",
                    "NotImplementedType",
                    "rv",
                    "cabc.Mapping"
                ],
                "other": [
                    "cabc.Mapping",
                    "collections.abc.Mapping"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "Any"
                ]
            },
            "__setstate__": {
                "value": [
                    "dict"
                ],
                "return": []
            },
            "add": {
                "return": [
                    "None"
                ],
                "key": [],
                "value": []
            },
            "deepcopy": {
                "return": [
                    "self"
                ],
                "memo": [
                    "typing.Optional[dict]"
                ]
            },
            "items": {
                "multi": [],
                "return": []
            },
            "lists": {
                "return": [
                    "typing.Iterator[tuple[typing.Any, list[typing.Any]]]",
                    "typing.Generator[tuple[typing.Any, list[typing.Any]], None, None]",
                    "values",
                    "yield",
                    "lists"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Any, typing.Any]"
                ]
            },
            "listvalues": {
                "return": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Any",
                    "list[typing.Any]"
                ]
            },
            "popitemlist": {
                "return": [
                    "tuple[typing.Any, typing.Any]"
                ]
            },
            "copy": {
                "return": [
                    "self"
                ]
            },
            "poplist": {
                "key": [
                    "str"
                ],
                "return": []
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [],
                "new_list": [
                    "typing.Iterable[typing.Any]"
                ]
            },
            "setlistdefault": {
                "default_list": [],
                "key": [
                    "str"
                ],
                "return": [
                    "list",
                    "Any",
                    "setlistdefault",
                    "List[Any]"
                ]
            },
            "update": {
                "mapping": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Mapping[typing.Any, typing.Any]",
                    "typing.Dict[typing.Any, typing.Any]",
                    "typing.Any"
                ],
                "return": [
                    "None"
                ]
            },
            "values": {
                "return": []
            }
        },
        "ImmutableMultiDict": {
            "__copy__": {
                "return": [
                    "self",
                    "MyClass",
                    "Tree",
                    "Any"
                ]
            },
            "copy": {
                "return": [
                    "MultiDict"
                ]
            }
        },
        "_OrderedMultiDict": {
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": []
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": []
            },
            "__getitem__": {
                "return": [
                    "Any",
                    "value",
                    "Value"
                ],
                "key": []
            },
            "__init__": {
                "mapping": [],
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__getstate__": {
                "return": []
            },
            "__reduce_ex__": {
                "protocol": [
                    "int"
                ],
                "return": []
            },
            "__setitem__": {
                "value": [
                    "Any",
                    "add"
                ],
                "key": [
                    "str"
                ],
                "return": []
            },
            "__setstate__": {
                "values": [
                    "typing.Iterable[tuple[typing.Any, typing.Any]]",
                    "typing.Iterable[tuple]",
                    "typing.Iterable[typing.Tuple[typing.Any, typing.Any]]"
                ],
                "return": []
            },
            "add": {
                "return": [],
                "value": [
                    "typing.Any"
                ],
                "key": []
            },
            "items": {
                "multi": [
                    "bool"
                ],
                "return": []
            },
            "keys": {
                "return": [
                    "typing.Generator[typing.Any, None, None]"
                ]
            },
            "lists": {
                "return": [
                    "lists",
                    "ptr.key"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Union[int,Any]]"
                ]
            },
            "popitemlist": {
                "return": []
            },
            "poplist": {
                "return": [
                    "list[typing.Any]"
                ],
                "key": []
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [
                    "typing.Any",
                    "typing.Hashable",
                    "str"
                ],
                "new_list": [
                    "typing.Iterable[typing.Any]",
                    "list[typing.Any]",
                    "typing.Any"
                ]
            },
            "setlistdefault": {
                "key": [
                    "str"
                ],
                "return": [],
                "default_list": []
            },
            "listvalues": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "update": {
                "return": [],
                "mapping": []
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, None, None]"
                ]
            }
        },
        "ImmutableTypeConversionDict": {
            "__copy__": {
                "return": [
                    "self",
                    "MyClass",
                    "Any",
                    "ClassName"
                ]
            },
            "copy": {
                "return": [
                    "TypeConversionDict"
                ]
            }
        },
        "global": {
            "__getattr__": {
                "return": [
                    "typing.Any",
                    "typing.Type"
                ],
                "name": [
                    "str"
                ]
            },
            "iter_multi_items": {
                "return": [
                    "typing.Generator[typing.Union[typing.Tuple[typing.Any, typing.Any], typing.Any], None, None]",
                    "typing.Generator[typing.Union[typing.Any, tuple[typing.Any, typing.Any]], None, None]"
                ],
                "mapping": []
            }
        },
        "_ImmutableOrderedMultiDict": {
            "__copy__": {
                "return": []
            },
            "__init__": {
                "return": [],
                "mapping": [
                    "typing.Optional[typing.Mapping[typing.Any, typing.Any]]",
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "typing.Optional[typing.Iterable[typing.Tuple[typing.Any, typing.Any]]]",
                    "typing.Optional[typing.Mapping]",
                    "typing.Optional[typing.Any]"
                ]
            },
            "_iter_hashitems": {
                "return": [
                    "typing.Iterator[typing.Tuple[int, typing.Any]]",
                    "typing.Iterator[tuple[int, typing.Any]]",
                    "typing.Iterator[typing.Any]"
                ]
            },
            "copy": {
                "return": []
            }
        },
        "ImmutableDict": {
            "__copy__": {
                "return": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "copy": {
                "return": [
                    "dict[typing.Any, typing.Any]"
                ]
            }
        },
        "CallbackDict": {
            "__init__": {
                "return": [
                    "None"
                ],
                "initial": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "on_update": [
                    "callable",
                    "function",
                    "None"
                ]
            },
            "__repr__": {
                "return": []
            }
        },
        "_omd_bucket": {
            "__init__": {
                "key": [],
                "omd": [],
                "value": [],
                "return": []
            },
            "unlink": {
                "return": [
                    "None"
                ],
                "omd": []
            }
        },
        "ImmutableList": {
            "__repr__": {
                "return": []
            }
        }
    },
    "werkzeug.debug": {
        "DebuggedApplication": {
            "__call__": {
                "start_response": [
                    "typing.Callable"
                ],
                "environ": [
                    "dict",
                    "typing.Dict[str, Any]"
                ],
                "return": [
                    "typing.Iterable[bytes]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ],
                "console_init_func": [],
                "evalex": [],
                "console_path": [],
                "show_hidden_frames": [],
                "pin_logging": [
                    "bool"
                ],
                "request_key": [],
                "pin_security": []
            },
            "_fail_pin_auth": {
                "return": [
                    "None"
                ]
            },
            "check_host_trust": {
                "return": [
                    "bool"
                ],
                "environ": [
                    "dict",
                    "dict[str, Any]",
                    "dict[str, str]",
                    "Mapping[str, str]"
                ]
            },
            "check_pin_trust": {
                "environ": [
                    "dict[str, typing.Any]"
                ],
                "return": []
            },
            "debug_application": {
                "return": [
                    "typing.Iterable",
                    "typing.Iterable[bytes]",
                    "response",
                    "typing.Generator"
                ],
                "environ": [
                    "dict",
                    "WSGIEnvironment"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "execute_command": {
                "command": [
                    "str"
                ],
                "return": [
                    "typing.Union[SecurityError, Response]",
                    "Response",
                    "typing.Union[Response, SecurityError]"
                ],
                "request": [
                    "typing.Any",
                    "django.http.HttpRequest",
                    "Request"
                ],
                "frame": [
                    "eval",
                    "webbrowser.Frame",
                    "id",
                    "tkinter.Frame",
                    "Frame",
                    "selenium.webdriver.remote.webelement.WebElement"
                ]
            },
            "display_console": {
                "request": [
                    "typing.Any",
                    "environ",
                    "request",
                    "WSGIEnvironment",
                    "WSGIApplication"
                ],
                "return": []
            },
            "get_resource": {
                "filename": [],
                "return": [
                    "Union[NotFound, Response]",
                    "Response",
                    "flask.Response",
                    "typing.Any",
                    "Union[NotFound, File]"
                ],
                "request": [
                    "Flask.request",
                    "Flask.Request",
                    "flask.Request",
                    "Request",
                    "typing.Any"
                ]
            },
            "log_pin_request": {
                "return": [
                    "Union[SecurityError, Response]"
                ],
                "request": []
            },
            "global": {
                "_pin": [],
                "_pin_cookie": []
            },
            "pin_auth": {
                "return": [
                    "typing.Union[typing.Any, SecurityError]",
                    "SecurityError",
                    "typing.Union[SecurityError, typing.Any]",
                    "typing.Any",
                    "rv"
                ],
                "request": []
            }
        },
        "_ConsoleFrame": {
            "__init__": {
                "namespace": [
                    "str",
                    "Namespace",
                    "dict[str, typing.Any]"
                ]
            },
            "eval": {
                "code": [
                    "str"
                ],
                "return": []
            }
        },
        "global": {
            "get_machine_id": {
                "return": [
                    "typing.Any"
                ]
            },
            "get_pin_and_cookie_name": {
                "app": [
                    "typing.Any",
                    "flask.Flask"
                ],
                "return": []
            },
            "hash_pin": {
                "pin": [
                    "int",
                    "pass",
                    "pin"
                ],
                "return": []
            },
            "global": {
                "_machine_id": []
            }
        }
    },
    "werkzeug.debug.console": {
        "ThreadedStream": {
            "__dir__": {
                "return": [
                    "List[str]",
                    "typing.List[str]"
                ]
            },
            "__getattribute__": {
                "name": [
                    "str"
                ],
                "return": [
                    "Any",
                    "stream",
                    "getattr",
                    "function"
                ]
            },
            "__repr__": {
                "return": []
            },
            "__setattr__": {
                "return": [
                    "None"
                ],
                "value": [
                    "Any",
                    "object"
                ],
                "name": [
                    "str"
                ]
            },
            "displayhook": {
                "obj": [
                    "typing.Any",
                    "obj"
                ],
                "return": []
            },
            "fetch": {
                "return": [
                    "typing.Union[str, typing.Any]"
                ]
            },
            "push": {
                "return": [
                    "None"
                ]
            }
        },
        "Console": {
            "__init__": {
                "globals": [],
                "locals": [
                    "typing.Optional[dict[str, typing.Any]]",
                    "dict[str, typing.Any]"
                ],
                "return": [
                    "None"
                ]
            },
            "eval": {
                "code": [
                    "str"
                ],
                "return": [
                    "typing.Any"
                ]
            }
        },
        "HTMLStringO": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "_write": {
                "x": [
                    "typing.Any",
                    "Any"
                ],
                "return": []
            },
            "flush": {
                "return": []
            },
            "isatty": {
                "return": []
            },
            "reset": {
                "return": [
                    "str"
                ]
            },
            "readline": {
                "return": [
                    "str",
                    "typing.Any"
                ]
            },
            "seek": {
                "mode": [
                    "int"
                ],
                "n": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "x": []
            },
            "writelines": {
                "return": [
                    "None"
                ],
                "x": [
                    "List[str]",
                    "typing.List[str]"
                ]
            }
        },
        "_InteractiveConsole": {
            "__init__": {
                "globals": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "locals": [
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "return": []
            },
            "global": {
                "locals": [
                    "dict[str, typing.Any]",
                    "dict[str, t.Any]"
                ]
            },
            "runcode": {
                "code": [
                    "str"
                ],
                "return": [
                    "None"
                ]
            },
            "runsource": {
                "return": [
                    "str"
                ],
                "kwargs": [],
                "source": [
                    "str"
                ]
            },
            "showsyntaxerror": {
                "return": [
                    "None"
                ],
                "filename": []
            },
            "showtraceback": {
                "return": [
                    "None"
                ]
            },
            "write": {
                "return": [],
                "data": []
            }
        },
        "_ConsoleLoader": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "get_source_by_code": {
                "code": [
                    "object",
                    "Hashable",
                    "int",
                    "Any",
                    "str"
                ],
                "return": []
            },
            "register": {
                "return": [],
                "code": [
                    "types.CodeType"
                ],
                "source": [
                    "typing.Any"
                ]
            }
        },
        "global": {
            "global": {
                "_stream": [
                    "ContextVar"
                ],
                "_ipy": [
                    "ContextVar"
                ]
            }
        }
    },
    "werkzeug.debug.repr": {
        "DebugReprGenerator": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "dict_repr": {
                "limit": [],
                "recursive": [
                    "bool"
                ],
                "d": [],
                "return": []
            },
            "dispatch_repr": {
                "return": [
                    "str"
                ],
                "recursive": [
                    "bool"
                ],
                "obj": []
            },
            "dump_locals": {
                "d": [],
                "return": [
                    "str",
                    "items",
                    "typing.Any"
                ]
            },
            "dump_object": {
                "return": [],
                "obj": [
                    "typing.Union[dict, typing.Any]",
                    "typing.Union[dict[typing.Any, typing.Any], typing.Any]",
                    "typing.Union[dict, object]",
                    "typing.Any"
                ]
            },
            "fallback_repr": {
                "return": [
                    "str"
                ]
            },
            "render_object_dump": {
                "items": [
                    "typing.Iterable[tuple[typing.Any, typing.Any]]"
                ],
                "title": [
                    "str"
                ],
                "return": [],
                "repr": []
            },
            "object_repr": {
                "obj": [
                    "typing.Any"
                ],
                "return": []
            },
            "repr": {
                "obj": [
                    "typing.Any",
                    "repr",
                    "obj"
                ],
                "return": []
            },
            "regex_repr": {
                "obj": [
                    "obj",
                    "pattern",
                    "re.Pattern",
                    "re"
                ],
                "return": [
                    "str"
                ]
            },
            "string_repr": {
                "limit": [],
                "obj": [
                    "typing.Union[bytes, str]",
                    "typing.Any",
                    "typing.Union[str, bytes]",
                    "bytes"
                ],
                "return": []
            }
        },
        "_Helper": {
            "__call__": {
                "topic": [
                    "str",
                    "Optional[str]"
                ],
                "return": []
            },
            "__repr__": {
                "return": []
            }
        },
        "global": {
            "_add_subclass_info": {
                "return": [
                    "typing.Union[typing.Any, str]",
                    "str"
                ],
                "obj": [
                    "object",
                    "Any"
                ],
                "inner": [],
                "base": []
            },
            "_sequence_repr_maker": {
                "return": [],
                "base": [
                    "base"
                ],
                "limit": [
                    "int"
                ],
                "right": [
                    "right",
                    "list",
                    "left",
                    "Iterable",
                    "Any",
                    "Sequence",
                    "List",
                    "object"
                ],
                "left": []
            },
            "debug_repr": {
                "return": [
                    "str",
                    "typing.Any"
                ],
                "obj": [
                    "Any"
                ]
            },
            "dump": {
                "return": [
                    "None"
                ],
                "obj": []
            }
        }
    },
    "werkzeug.debug.tbtools": {
        "DebugFrameSummary": {
            "__init__": {
                "kwargs": [
                    "dict"
                ],
                "locals": [
                    "typing.Any",
                    "dict[str, typing.Any]"
                ],
                "globals": [
                    "dict[str, typing.Any]",
                    "globals"
                ],
                "return": [
                    "None"
                ]
            },
            "eval": {
                "code": [
                    "str"
                ],
                "return": []
            },
            "render_html": {
                "mark_library": [
                    "bool"
                ],
                "return": [
                    "str",
                    "None"
                ]
            }
        },
        "DebugTraceback": {
            "__init__": {
                "hide": [],
                "skip": [
                    "int"
                ],
                "exc": [
                    "BaseException",
                    "exc"
                ],
                "te": [
                    "Exception",
                    "Optional[traceback]",
                    "Optional[TracebackType]",
                    "TracebackType",
                    "types.TracebackType",
                    "Optional[Exception]",
                    "traceback",
                    "BaseException",
                    "types",
                    "Traceback",
                    "Optional[BaseException]"
                ],
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "render_debugger_html": {
                "evalex": [
                    "bool"
                ],
                "evalex_trusted": [
                    "bool",
                    "typing.Any"
                ],
                "return": [],
                "secret": []
            },
            "render_traceback_html": {
                "return": [],
                "include_title": []
            },
            "render_traceback_text": {
                "return": []
            }
        },
        "global": {
            "_process_traceback": {
                "hide": [],
                "return": [
                    "typing.Any",
                    "typing.Optional[types.TracebackType]",
                    "types.TracebackType",
                    "typing.Optional[BaseException]",
                    "te"
                ],
                "te": [
                    "Optional[TracebackException]",
                    "Optional[traceback.TracebackException]",
                    "traceback.TracebackException"
                ],
                "skip": [],
                "exc": []
            },
            "render_console_html": {
                "evalex_trusted": [],
                "secret": [
                    "str"
                ],
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.exceptions": {
        "Aborter": {
            "__call__": {
                "return": [],
                "code": [],
                "kwargs": [
                    "dict"
                ],
                "args": [
                    "tuple"
                ]
            },
            "__init__": {
                "mapping": [
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [],
                "extra": []
            }
        },
        "HTTPException": {
            "__call__": {
                "environ": [
                    "WSGIEnvironment"
                ],
                "start_response": [
                    "typing.Callable"
                ],
                "return": []
            },
            "__init__": {
                "description": [],
                "response": [
                    "typing.Optional[flask.Response]",
                    "typing.Optional[Any]",
                    "typing.Any"
                ],
                "return": [
                    "None",
                    "NoReturn",
                    "typing.NoReturn"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "get_body": {
                "return": [
                    "str"
                ],
                "environ": [
                    "None"
                ],
                "scope": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "get_description": {
                "environ": [],
                "return": [
                    "str"
                ],
                "scope": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Any",
                    "Optional[object]",
                    "None"
                ]
            },
            "get_headers": {
                "environ": [
                    "typing.Optional[dict]",
                    "typing.Optional[typing.Any]"
                ],
                "scope": [],
                "return": [
                    "list[tuple[typing.Union[str,str]]]"
                ]
            },
            "get_response": {
                "environ": [
                    "dict",
                    "dict[str, typing.Any]"
                ],
                "return": [],
                "scope": []
            },
            "global": {
                "description": [
                    "description",
                    "typing.Union[str, None]",
                    "HTTPException",
                    "typing.Optional[str]",
                    "None",
                    "Unauthorized",
                    "Optional[str]"
                ],
                "code": []
            }
        },
        "BadRequestKeyError": {
            "__init__": {
                "arg": [
                    "typing.Optional[typing.Any]",
                    "typing.Any"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "InternalServerError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [],
                "response": [
                    "typing.Optional[flask.Response]"
                ],
                "original_exception": [
                    "typing.Optional[Exception]"
                ]
            }
        },
        "MethodNotAllowed": {
            "__init__": {
                "return": [
                    "None",
                    "NoReturn"
                ],
                "valid_methods": [
                    "typing.Optional[typing.List[str]]",
                    "typing.Any",
                    "typing.List[str]"
                ],
                "response": [],
                "description": []
            },
            "get_headers": {
                "environ": [
                    "typing.Optional[typing.Any]",
                    "dict[str, typing.Any]",
                    "typing.Optional[typing.Dict[typing.Any, typing.Any]]"
                ],
                "scope": [
                    "typing.Any",
                    "dict",
                    "typing.Optional[typing.Dict]",
                    "typing.Optional[dict]"
                ],
                "return": []
            }
        },
        "RequestedRangeNotSatisfiable": {
            "__init__": {
                "length": [
                    "typing.Optional[int]"
                ],
                "description": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "None"
                ],
                "response": [
                    "typing.Optional[flask.Response]"
                ],
                "units": []
            },
            "get_headers": {
                "environ": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[dict]",
                    "typing.Optional[typing.Dict[typing.Any, typing.Any]]"
                ],
                "return": [],
                "scope": []
            }
        },
        "Unauthorized": {
            "__init__": {
                "response": [
                    "typing.Optional[flask.Response]"
                ],
                "description": [],
                "return": [],
                "www_authenticate": []
            },
            "get_headers": {
                "environ": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[typing.Dict[typing.Any, typing.Any]]",
                    "typing.Optional[dict]"
                ],
                "scope": [],
                "return": [
                    "dict[str, str]",
                    "dict[str, typing.Any]"
                ]
            }
        },
        "_RetryAfter": {
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [],
                "response": [
                    "typing.Optional[flask.Response]"
                ],
                "retry_after": []
            },
            "get_headers": {
                "return": [
                    "dict[str, str]"
                ],
                "scope": [],
                "environ": []
            }
        },
        "global": {
            "_find_exceptions": {
                "return": []
            },
            "abort": {
                "kwargs": [
                    "dict"
                ],
                "return": [
                    "None"
                ],
                "status": [],
                "args": []
            },
            "global": {
                "_aborter": [
                    "Aborter"
                ],
                "default_exceptions": []
            }
        }
    },
    "werkzeug.formparser": {
        "TStreamFactory": {
            "__call__": {
                "content_length": [],
                "return": [],
                "filename": [
                    "str"
                ],
                "total_content_length": [
                    "typing.Any",
                    "int",
                    "Any"
                ],
                "content_type": []
            }
        },
        "FormDataParser": {
            "__init__": {
                "cls": [],
                "max_content_length": [],
                "max_form_parts": [
                    "int"
                ],
                "silent": [
                    "bool"
                ],
                "max_form_memory_size": [],
                "stream_factory": [],
                "return": [
                    "None",
                    "pass"
                ]
            },
            "_parse_multipart": {
                "stream": [
                    "typing.IO"
                ],
                "options": [],
                "return": [
                    "typing.Tuple[typing.IO, typing.Dict, typing.Dict]",
                    "ImmutableMultiDict",
                    "files",
                    "Dict",
                    "typing.Tuple[typing.IO, ImmutableMultiDict, ImmutableMultiDict]",
                    "typing.Dict"
                ],
                "mimetype": [
                    "str"
                ],
                "content_length": []
            },
            "_parse_urlencoded": {
                "return": [],
                "content_length": [
                    "typing.Optional[int]"
                ],
                "options": [],
                "mimetype": [
                    "str"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "parse": {
                "content_length": [
                    "int"
                ],
                "stream": [
                    "typing.IO"
                ],
                "options": [],
                "return": [
                    "typing.Tuple[typing.IO, typing.Any, typing.Any]",
                    "typing.Tuple[typing.Any, typing.Any, typing.Any]"
                ],
                "mimetype": []
            },
            "parse_from_environ": {
                "environ": [
                    "dict"
                ],
                "return": [
                    "tuple",
                    "typing.Any",
                    "typing.Tuple"
                ]
            }
        },
        "MultiPartParser": {
            "__init__": {
                "buffer_size": [
                    "int"
                ],
                "return": [
                    "None"
                ],
                "cls": [
                    "typing.Type[MultiDict[str, typing.Any]]"
                ],
                "max_form_memory_size": [
                    "int"
                ],
                "stream_factory": [
                    "typing.Optional[typing.Callable]",
                    "typing.Optional[typing.Callable[[], typing.IO]]",
                    "typing.Callable[..., typing.Any]",
                    "typing.Callable[..., typing.IO]",
                    "typing.Optional[typing.Callable[..., typing.IO]]",
                    "typing.Callable"
                ],
                "max_form_parts": []
            },
            "fail": {
                "message": [],
                "return": []
            },
            "get_part_charset": {
                "headers": [
                    "dict"
                ],
                "return": [
                    "str"
                ]
            },
            "parse": {
                "boundary": [
                    "str"
                ],
                "return": [
                    "tuple[self.cls, self.cls]",
                    "self.cls",
                    "files",
                    "Tuple[self.cls, self.cls]"
                ],
                "stream": [],
                "content_length": []
            },
            "start_file_streaming": {
                "event": [
                    "Request",
                    "filename",
                    "typing.Any",
                    "Event",
                    "typing.Dict[str, str]",
                    "typing.NamedTuple",
                    "typing.Union[Dict, CustomEventType]",
                    "typing.Union[Request, HttpRequest, Event]",
                    "typing.Union[Request, Event]",
                    "Dict",
                    "typing.Union[Dict, CustomEventClass]",
                    "event.filename",
                    "str"
                ],
                "return": [],
                "total_content_length": []
            }
        },
        "global": {
            "_chunk_iter": {
                "read": [
                    "read",
                    "typing.Callable[[int], bytes]"
                ],
                "size": [
                    "int"
                ],
                "return": [
                    "typing.Generator[typing.Union[Any,None,None]]",
                    "typing.Generator[typing.Any, None, None]",
                    "typing.Generator[typing.Union[Any, None], None, None]",
                    "typing.Generator",
                    "typing.Generator[typing.Union[typing.Any, None], None, None]",
                    "typing.Generator[typing.Union[Unknown,None],None,None]",
                    "None",
                    "typing.Generator[typing.Union[Any,None],None,None]"
                ]
            },
            "default_stream_factory": {
                "content_type": [
                    "str"
                ],
                "content_length": [],
                "return": [
                    "t.IO[bytes]"
                ],
                "total_content_length": [
                    "typing.Optional[int]"
                ],
                "filename": [
                    "str"
                ]
            },
            "parse_form_data": {
                "max_form_memory_size": [
                    "int"
                ],
                "max_form_parts": [
                    "int"
                ],
                "environ": [],
                "silent": [],
                "stream_factory": [
                    "Callable"
                ],
                "max_content_length": [],
                "return": [],
                "cls": []
            }
        }
    },
    "werkzeug.http": {
        "global": {
            "dump_cookie": {
                "httponly": [
                    "bool"
                ],
                "expires": [],
                "partitioned": [
                    "bool"
                ],
                "max_size": [
                    "int",
                    "typing.Optional[int]"
                ],
                "domain": [
                    "typing.Optional[str]",
                    "str",
                    "typing.Union[None,str]"
                ],
                "secure": [
                    "bool"
                ],
                "key": [],
                "sync_expires": [
                    "bool"
                ],
                "samesite": [],
                "value": [
                    "str"
                ],
                "path": [],
                "return": [],
                "max_age": []
            },
            "dump_age": {
                "age": [],
                "return": []
            },
            "dump_header": {
                "return": [
                    "str"
                ],
                "iterable": []
            },
            "dump_csp_header": {
                "return": [
                    "str"
                ],
                "header": []
            },
            "dump_options_header": {
                "header": [],
                "options": [
                    "dict"
                ],
                "return": []
            },
            "generate_etag": {
                "data": [],
                "return": [
                    "str"
                ]
            },
            "is_byte_range_valid": {
                "return": [
                    "bool",
                    "False"
                ],
                "length": [],
                "stop": [],
                "start": []
            },
            "http_date": {
                "timestamp": [
                    "int",
                    "float",
                    "date",
                    "datetime",
                    "email.utils.formatdate",
                    "None"
                ],
                "return": []
            },
            "is_entity_header": {
                "header": [],
                "return": [
                    "bool"
                ]
            },
            "is_hop_by_hop_header": {
                "header": [
                    "str"
                ],
                "return": [
                    "bool"
                ]
            },
            "is_resource_modified": {
                "etag": [
                    "typing.Optional[str]"
                ],
                "environ": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "typing.Dict[str, typing.Any]"
                ],
                "data": [
                    "typing.Optional[typing.Any]",
                    "typing.Optional[bytes]",
                    "typing.Any",
                    "None"
                ],
                "ignore_if_range": [],
                "last_modified": [],
                "return": []
            },
            "parse_age": {
                "value": [],
                "return": [
                    "typing.Optional[datetime.timedelta]",
                    "datetime.timedelta"
                ]
            },
            "parse_content_range_header": {
                "value": [],
                "on_update": [
                    "typing.Optional[typing.Callable]",
                    "typing.Callable",
                    "ds.ContentRange"
                ],
                "return": [
                    "typing.Optional[ds.ContentRange]"
                ]
            },
            "parse_date": {
                "value": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "typing.Optional[datetime.datetime]"
                ]
            },
            "parse_dict_header": {
                "return": [
                    "dict[typing.Any, typing.Any]",
                    "typing.Any",
                    "dict[str, str]"
                ],
                "value": [
                    "str"
                ]
            },
            "parse_cookie": {
                "cls": [
                    "typing.Optional[typing.Any]",
                    "Optional[typing.Any]",
                    "typing.Any"
                ],
                "header": [
                    "Union[dict, str]",
                    "Any",
                    "str",
                    "Union"
                ],
                "return": []
            },
            "parse_etags": {
                "value": [],
                "return": []
            },
            "parse_if_range_header": {
                "value": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "ds.IfRange"
                ]
            },
            "parse_list_header": {
                "return": [],
                "value": []
            },
            "parse_range_header": {
                "make_inclusive": [
                    "bool"
                ],
                "value": [],
                "return": []
            },
            "parse_options_header": {
                "return": [],
                "value": []
            },
            "parse_set_header": {
                "value": [
                    "str"
                ],
                "return": [],
                "on_update": []
            },
            "quote_etag": {
                "etag": [],
                "return": [
                    "str"
                ],
                "weak": []
            },
            "quote_header_value": {
                "allow_token": [
                    "bool"
                ],
                "return": [
                    "str"
                ],
                "value": []
            },
            "remove_entity_headers": {
                "allowed": [
                    "tuple[str, ...]"
                ],
                "return": [],
                "headers": [
                    "list[tuple[str, str]]",
                    "list[tuple[str, typing.Any]]"
                ]
            },
            "remove_hop_by_hop_headers": {
                "return": [],
                "headers": [
                    "list[typing.Tuple[str, str]]",
                    "list[tuple[str, str]]",
                    "list[typing.Any]"
                ]
            },
            "unquote_header_value": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.local": {
        "Local": {
            "__call__": {
                "return": [
                    "LocalProxy"
                ],
                "name": [
                    "str"
                ],
                "unbound_message": [
                    "Optional[Any]",
                    "str",
                    "Optional[str]"
                ]
            },
            "__getattr__": {
                "name": [
                    "str"
                ],
                "return": []
            },
            "__delattr__": {
                "name": [
                    "str"
                ],
                "return": []
            },
            "__init__": {
                "context_var": [
                    "ContextVar",
                    "Optional[ContextVar]"
                ],
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__setattr__": {
                "return": [
                    "None"
                ],
                "name": [],
                "value": [
                    "Any"
                ]
            },
            "__release_local__": {
                "return": []
            }
        },
        "LocalStack": {
            "__call__": {
                "unbound_message": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "LocalProxy"
                ],
                "name": [
                    "Optional[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "context_var": []
            },
            "__release_local__": {
                "return": [
                    "None"
                ]
            },
            "pop": {
                "return": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ]
            },
            "push": {
                "obj": [
                    "typing.Any"
                ],
                "return": [
                    "stack"
                ]
            }
        },
        "_ProxyLookup": {
            "__call__": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": [],
                "args": [],
                "instance": []
            },
            "__get__": {
                "return": [
                    "RuntimeError",
                    "self.fallback",
                    "fallback",
                    "self",
                    "Any"
                ],
                "owner": [
                    "typing.Optional[type]",
                    "type",
                    "None",
                    "typing.Any"
                ],
                "instance": []
            },
            "__init__": {
                "class_value": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "Any",
                    "typing.Optional[Any]",
                    "typing"
                ],
                "fallback": [],
                "f": [
                    "typing.Any",
                    "typing.Union[typing.Callable, typing.Any]",
                    "typing.Optional[typing.Callable]",
                    "typing.Callable"
                ],
                "is_attr": [
                    "bool"
                ],
                "return": [
                    "None",
                    "pass"
                ]
            },
            "__repr__": {
                "return": []
            },
            "__set_name__": {
                "return": [],
                "name": [],
                "owner": [
                    "type",
                    "typing.Any"
                ]
            }
        },
        "LocalManager": {
            "__init__": {
                "return": [
                    "None"
                ],
                "locals": []
            },
            "cleanup": {
                "return": [
                    "None"
                ]
            },
            "make_middleware": {
                "return": [
                    "typing.Callable[..., typing.Any]",
                    "typing.Callable[[typing.Any, typing.Callable], typing.Any]"
                ],
                "app": [
                    "typing.Callable"
                ]
            },
            "middleware": {
                "func": [],
                "return": [
                    "typing.Callable",
                    "typing.Any",
                    "func"
                ]
            },
            "__repr__": {
                "return": []
            }
        },
        "LocalProxy": {
            "__init__": {
                "local": [
                    "typing.Union[Local, LocalStack, ContextVar, typing.Callable]",
                    "typing.Union[Local, LocalStack, typing.Callable]"
                ],
                "name": [],
                "unbound_message": [
                    "str"
                ],
                "return": []
            },
            "global": {
                "_get_current_object": [
                    "LocalProxy",
                    "T",
                    "LocalStack",
                    "local",
                    "LocalStack[T]"
                ]
            }
        },
        "_ProxyIOp": {
            "__init__": {
                "f": [
                    "callable",
                    "Optional[IO]",
                    "Union[IO, Callable]",
                    "function"
                ],
                "fallback": [],
                "return": []
            }
        },
        "global": {
            "_identity": {
                "o": [],
                "return": [
                    "typing.Any"
                ]
            },
            "_l_to_r_op": {
                "return": [
                    "F",
                    "typing.Any"
                ],
                "op": []
            },
            "release_local": {
                "local": [],
                "return": []
            }
        }
    },
    "werkzeug.middleware.dispatcher": {
        "DispatcherMiddleware": {
            "__call__": {
                "return": [],
                "environ": [],
                "start_response": []
            },
            "__init__": {
                "mounts": [
                    "dict[typing.Any, typing.Any]",
                    "dict",
                    "Optional[dict]"
                ],
                "return": [
                    "None"
                ],
                "app": [
                    "Flask",
                    "app",
                    "Any",
                    "ASGIApp"
                ]
            }
        }
    },
    "werkzeug.middleware.http_proxy": {
        "ProxyMiddleware": {
            "__call__": {
                "return": [],
                "environ": [],
                "start_response": []
            },
            "__init__": {
                "return": [
                    "None",
                    "self"
                ],
                "chunk_size": [
                    "int"
                ],
                "timeout": [
                    "int"
                ],
                "app": [],
                "targets": []
            },
            "proxy_to": {
                "opts": [
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "return": [],
                "path": [],
                "prefix": []
            }
        }
    },
    "werkzeug.middleware.lint": {
        "GuardedWrite": {
            "__call__": {
                "return": [
                    "None"
                ],
                "s": []
            },
            "__init__": {
                "return": [],
                "write": [
                    "function",
                    "callable",
                    "Callable",
                    "typing.Callable"
                ],
                "chunks": [
                    "list[typing.Any]",
                    "typing.Any",
                    "typing.Iterable[typing.Any]"
                ]
            }
        },
        "LintMiddleware": {
            "__call__": {
                "return": [],
                "args": [],
                "kwargs": [
                    "typing.Dict[str, typing.Any]",
                    "dict[str, typing.Any]",
                    "dict[str, Any]"
                ]
            },
            "__init__": {
                "app": [],
                "return": [
                    "None"
                ]
            },
            "check_environ": {
                "return": [],
                "environ": [
                    "dict[str, Any]",
                    "dict[str, str]",
                    "dict[str, Union[str, tuple]]",
                    "dict[str, Union[str, tuple[int, int]]]",
                    "wsgi.version",
                    "environ"
                ]
            },
            "check_headers": {
                "headers": [
                    "dict[str, str]"
                ],
                "return": []
            },
            "check_iterator": {
                "app_iter": [],
                "return": [
                    "None",
                    "typing.Iterator",
                    "pass",
                    "typing"
                ]
            },
            "check_start_response": {
                "return": [
                    "tuple[typing.Any, typing.Any]",
                    "tuple"
                ],
                "status": [],
                "headers": [],
                "exc_info": [
                    "typing.Optional[tuple]",
                    "typing.Optional[typing.Tuple]",
                    "typing.Optional[typing.Union[tuple, typing.Any]]"
                ]
            }
        },
        "GuardedIterator": {
            "__init__": {
                "headers_set": [
                    "typing.Any"
                ],
                "return": [],
                "iterator": [
                    "typing.Iterable",
                    "iterator"
                ],
                "chunks": []
            },
            "__del__": {
                "return": [
                    "None"
                ]
            },
            "__next__": {
                "return": []
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": []
            }
        },
        "ErrorStream": {
            "__init__": {
                "return": [
                    "None"
                ],
                "stream": [
                    "typing.IO",
                    "io.IOBase",
                    "stream"
                ]
            },
            "close": {
                "return": []
            },
            "flush": {
                "return": [
                    "None"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "s": [
                    "str"
                ]
            },
            "writelines": {
                "seq": [
                    "Iterable",
                    "Iterable[str]"
                ],
                "return": []
            }
        },
        "InputStream": {
            "__init__": {
                "stream": [],
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": []
            },
            "close": {
                "return": []
            },
            "read": {
                "args": [],
                "return": []
            },
            "readline": {
                "return": [
                    "str",
                    "bytes"
                ],
                "args": []
            }
        },
        "global": {
            "check_type": {
                "context": [
                    "str",
                    "typing.Any"
                ],
                "need": [],
                "obj": [
                    "typing.Any",
                    "Any"
                ],
                "return": []
            }
        }
    },
    "werkzeug.middleware.profiler": {
        "ProfilerMiddleware": {
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "django.core.handlers.wsgi.WSGIHandler",
                    "object",
                    "flask.Flask",
                    "app"
                ],
                "restrictions": [],
                "sort_by": [],
                "stream": [
                    "typing.TextIO"
                ],
                "profile_dir": [
                    "str",
                    "Optional[str]"
                ],
                "filename_format": []
            },
            "__call__": {
                "return": [
                    "None",
                    "list",
                    "runapp"
                ],
                "start_response": [
                    "typing.Callable[[str, list[tuple[str, str]], Optional[tuple]], None]",
                    "StartResponse",
                    "headers",
                    "typing.Callable",
                    "typing.Callable[[str, list[tuple[str, typing.Any]], typing.Optional[typing.Any]], None]",
                    "typing.Callable[[str, list, typing.Optional[tuple]], None]",
                    "typing.Callable[[str, list, Optional[Any]], None]"
                ],
                "environ": [
                    "dict",
                    "WSGIEnvironment"
                ]
            }
        }
    },
    "werkzeug.middleware.proxy_fix": {
        "ProxyFix": {
            "__call__": {
                "return": [
                    "typing.Iterable[bytes]"
                ],
                "environ": [],
                "start_response": []
            },
            "__init__": {
                "x_for": [
                    "int"
                ],
                "x_port": [],
                "x_prefix": [],
                "x_proto": [
                    "int"
                ],
                "app": [],
                "x_host": [
                    "int"
                ],
                "return": [
                    "None"
                ]
            },
            "_get_real_value": {
                "return": [
                    "typing.Optional[typing.Any]",
                    "typing.Any",
                    "None"
                ],
                "value": [
                    "str"
                ],
                "trusted": []
            }
        }
    },
    "werkzeug.middleware.shared_data": {
        "SharedDataMiddleware": {
            "__call__": {
                "environ": [],
                "return": [
                    "typing.Iterable[bytes]"
                ],
                "start_response": []
            },
            "__init__": {
                "app": [
                    "Any"
                ],
                "return": [
                    "None",
                    "self"
                ],
                "cache_timeout": [],
                "fallback_mimetype": [
                    "str"
                ],
                "disallow": [],
                "exports": [],
                "cache": []
            },
            "_opener": {
                "return": [
                    "tuple",
                    "function",
                    "int"
                ],
                "filename": [
                    "str"
                ]
            },
            "generate_etag": {
                "file_size": [
                    "int"
                ],
                "return": [],
                "mtime": [],
                "real_filename": []
            },
            "get_directory_loader": {
                "return": [],
                "directory": []
            },
            "get_file_loader": {
                "filename": [],
                "return": []
            },
            "get_package_loader": {
                "package_path": [
                    "str"
                ],
                "return": [
                    "Callable[[str], Callable]",
                    "Callable[[str], Any]",
                    "typing.Callable[[str], typing.Any]",
                    "Callable[[Any], Callable]",
                    "typing.Any"
                ],
                "package": []
            },
            "is_allowed": {
                "filename": [
                    "str",
                    "typing.Any"
                ],
                "return": [
                    "bool"
                ]
            }
        }
    },
    "werkzeug.routing.converters": {
        "AnyConverter": {
            "__init__": {
                "return": [
                    "None"
                ],
                "items": [],
                "map": []
            },
            "to_url": {
                "return": [
                    "str"
                ],
                "value": [
                    "int",
                    "typing.Any",
                    "str"
                ]
            }
        },
        "BaseConverter": {
            "__init__": {
                "return": [],
                "kwargs": [
                    "dict[typing.Any, typing.Any]"
                ],
                "map": [],
                "args": [
                    "tuple[typing.Union[typing.Any,...]]"
                ]
            },
            "__init_subclass__": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": []
            },
            "to_python": {
                "return": [],
                "value": [
                    "typing.Any"
                ]
            },
            "to_url": {
                "return": [
                    "str"
                ],
                "value": []
            }
        },
        "NumberConverter": {
            "__init__": {
                "return": [
                    "None"
                ],
                "fixed_digits": [
                    "int"
                ],
                "map": [
                    "dict"
                ],
                "min": [
                    "typing.Optional[int]",
                    "typing.Optional[float]"
                ],
                "max": [
                    "typing.Optional[int]",
                    "typing.Optional[float]",
                    "typing.Union[int,float,None]"
                ],
                "signed": [
                    "bool"
                ]
            },
            "to_python": {
                "return": [
                    "float",
                    "int"
                ],
                "value": [
                    "str"
                ]
            },
            "global": {
                "num_convert": []
            },
            "to_url": {
                "return": [],
                "value": [
                    "typing.Any"
                ]
            }
        },
        "FloatConverter": {
            "__init__": {
                "map": [
                    "Dict",
                    "dict",
                    "Mapping",
                    "MutableMapping"
                ],
                "max": [
                    "typing.Optional[float]",
                    "typing.Optional[int]"
                ],
                "signed": [],
                "return": [],
                "min": [
                    "typing.Optional[int]"
                ]
            }
        },
        "UnicodeConverter": {
            "__init__": {
                "return": [
                    "None"
                ],
                "length": [
                    "typing.Optional[int]"
                ],
                "minlength": [
                    "int"
                ],
                "map": [
                    "typing.Mapping",
                    "typing.Any"
                ],
                "maxlength": [
                    "typing.Optional[int]"
                ]
            }
        },
        "global": {
            "global": {
                "DEFAULT_CONVERTERS": [
                    "dict[str, type]"
                ]
            }
        },
        "UUIDConverter": {
            "to_python": {
                "return": [
                    "UUID",
                    "uuid.UUID"
                ],
                "value": [
                    "str"
                ]
            },
            "to_url": {
                "return": [
                    "str"
                ],
                "value": []
            }
        }
    },
    "werkzeug.routing.exceptions": {
        "BuildError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "method": [],
                "endpoint": [
                    "str"
                ],
                "values": [
                    "typing.Any"
                ],
                "adapter": []
            },
            "__str__": {
                "return": []
            },
            "closest_rule": {
                "adapter": [
                    "typing.Any"
                ],
                "return": []
            }
        },
        "NoMatch": {
            "__init__": {
                "have_match_for": [
                    "bool"
                ],
                "websocket_mismatch": [
                    "bool"
                ],
                "return": [
                    "None"
                ]
            }
        },
        "RequestAliasRedirect": {
            "__init__": {
                "endpoint": [
                    "str",
                    "Any"
                ],
                "return": [],
                "matched_values": [
                    "typing.Any",
                    "list[typing.Any]",
                    "typing.List[typing.Any]",
                    "typing.Union[list, dict]",
                    "typing.Sequence[typing.Any]"
                ]
            }
        },
        "RequestPath": {
            "__init__": {
                "return": [
                    "None"
                ],
                "path_info": [
                    "Any",
                    "str"
                ]
            }
        },
        "RequestRedirect": {
            "__init__": {
                "return": [
                    "None"
                ],
                "new_url": []
            },
            "get_response": {
                "scope": [
                    "dict",
                    "Any",
                    "Optional[Dict]",
                    "Optional[dict]",
                    "Optional[Any]"
                ],
                "return": [
                    "werkzeug.wrappers.Response"
                ],
                "environ": []
            }
        }
    },
    "werkzeug.routing.map": {
        "Map": {
            "__init__": {
                "default_subdomain": [
                    "str"
                ],
                "merge_slashes": [
                    "bool"
                ],
                "host_matching": [
                    "bool"
                ],
                "return": [],
                "converters": [],
                "sort_key": [
                    "typing.Union[typing.Any,None]",
                    "typing.Union[typing.Any, None]",
                    "typing.Any"
                ],
                "rules": [
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.Sequence[typing.Any]]"
                ],
                "strict_slashes": [],
                "redirect_defaults": [],
                "sort_parameters": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "add": {
                "return": [],
                "rulefactory": [
                    "typing.Any",
                    "RuleFactory",
                    "add",
                    "self",
                    "rulefactory"
                ]
            },
            "bind": {
                "return": [
                    "MapAdapter"
                ],
                "path_info": [],
                "query_args": [
                    "typing.Optional[dict[str, str]]"
                ],
                "script_name": [],
                "server_name": [
                    "str"
                ],
                "subdomain": [],
                "default_method": [
                    "str"
                ],
                "url_scheme": [
                    "str"
                ]
            },
            "bind_to_environ": {
                "server_name": [],
                "environ": [
                    "dict[str, typing.Any]",
                    "dict[str, str]"
                ],
                "subdomain": [
                    "typing.Optional[str]",
                    "str",
                    "typing.Union[str, None]"
                ],
                "return": []
            },
            "iter_rules": {
                "endpoint": [
                    "typing.Optional[str]"
                ],
                "return": []
            },
            "is_endpoint_expecting": {
                "return": [],
                "endpoint": [],
                "arguments": [
                    "typing.Iterable[typing.Any]",
                    "tuple[str, ...]",
                    "tuple[typing.Any, ...]",
                    "typing.Iterable[str]",
                    "typing.Iterable[typing.Hashable]",
                    "tuple[typing.Hashable]"
                ]
            },
            "update": {
                "return": []
            }
        },
        "MapAdapter": {
            "__init__": {
                "default_method": [],
                "path_info": [
                    "typing.Any",
                    "str"
                ],
                "query_args": [
                    "Optional[dict[str, str]]"
                ],
                "server_name": [
                    "str"
                ],
                "script_name": [],
                "url_scheme": [
                    "str"
                ],
                "map": [],
                "subdomain": []
            },
            "_partial_build": {
                "endpoint": [],
                "values": [
                    "typing.Mapping[str, typing.Any]",
                    "typing.Mapping[typing.Any, typing.Any]",
                    "dict[typing.Any, typing.Any]",
                    "dict[str, typing.Any]"
                ],
                "method": [
                    "str",
                    "typing.Optional[str]"
                ],
                "return": [
                    "rv",
                    "typing.Tuple[str, str, bool]",
                    "typing.Tuple[str, typing.Dict[str, typing.Any], bool]",
                    "typing.Union[typing.Tuple[typing.Any, typing.Any, bool], typing.Any]",
                    "typing.Any"
                ],
                "append_unknown": [
                    "bool"
                ]
            },
            "allowed_methods": {
                "return": [
                    "list[str]",
                    "typing.Union[typing.List[typing.Any], typing.Any]",
                    "list[typing.Any]",
                    "typing.Union[typing.Any, list]"
                ],
                "path_info": [
                    "str"
                ]
            },
            "build": {
                "return": [],
                "endpoint": [],
                "force_external": [
                    "bool"
                ],
                "append_unknown": [
                    "bool"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "url_scheme": [],
                "values": [
                    "typing.Union[MultiDict, dict[str, typing.Any], None]",
                    "typing.Union[MultiDict, dict, None]",
                    "typing.Optional[typing.Union[typing.Dict[str, typing.Any], MultiDict]]",
                    "typing.Union[typing.Dict[str, typing.Any], MultiDict, None]",
                    "typing.Optional[typing.Union[MultiDict, dict]]",
                    "typing.Optional[typing.Union[dict, MultiDict]]",
                    "typing.Optional[typing.Union[typing.Dict, MultiDict]]",
                    "typing.Optional[typing.Union[MultiDict, typing.Dict[str, typing.Any]]]",
                    "typing.Optional[dict]"
                ]
            },
            "dispatch": {
                "catch_http_exceptions": [],
                "path_info": [],
                "method": [
                    "str"
                ],
                "return": [
                    "Any",
                    "Union[Any, RequestRedirect, HTTPException]"
                ],
                "view_func": [
                    "typing.Callable"
                ]
            },
            "get_default_redirect": {
                "method": [],
                "query_args": [
                    "typing.Dict[str, typing.Any]",
                    "typing.Union[dict, str]",
                    "dict[typing.Any, typing.Any]",
                    "typing.Any"
                ],
                "values": [],
                "rule": [
                    "Rule",
                    "Route",
                    "endpoint",
                    "typing.Any",
                    "rule",
                    "rule.endpoint"
                ],
                "return": []
            },
            "encode_query_args": {
                "query_args": [],
                "return": [
                    "str"
                ]
            },
            "get_host": {
                "return": [
                    "str"
                ],
                "domain_part": [
                    "typing.Optional[str]"
                ]
            },
            "make_alias_redirect_url": {
                "endpoint": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "path": [],
                "values": [],
                "method": [
                    "str"
                ],
                "query_args": [
                    "dict[str, str]"
                ]
            },
            "make_redirect_url": {
                "domain_part": [],
                "query_args": [
                    "dict[str, str]"
                ],
                "path_info": [],
                "return": []
            },
            "test": {
                "return": [],
                "path_info": [
                    "str",
                    "Optional[str]"
                ],
                "method": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.routing.matcher": {
        "StateMachineMatcher": {
            "add": {
                "return": [],
                "rule": []
            },
            "__init__": {
                "return": [],
                "merge_slashes": []
            },
            "match": {
                "method": [
                    "str"
                ],
                "path": [],
                "websocket": [
                    "bool",
                    "WebSocket"
                ],
                "domain": [],
                "return": []
            },
            "update": {
                "return": [
                    "None",
                    "update"
                ]
            }
        },
        "State": {
            "global": {
                "dynamic": [
                    "list[tuple[RulePart, State]]",
                    "State"
                ],
                "rules": [],
                "static": []
            }
        }
    },
    "werkzeug.routing.rules": {
        "RuleTemplate": {
            "__call__": {
                "args": [
                    "typing.Any",
                    "tuple[typing.Any, ...]",
                    "typing.Tuple[typing.Any, ...]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "__init__": {
                "return": [
                    "rules",
                    "None"
                ],
                "rules": []
            }
        },
        "EndpointPrefix": {
            "__init__": {
                "return": [],
                "prefix": [],
                "rules": [
                    "list",
                    "rules",
                    "dict",
                    "list[Rule]"
                ]
            },
            "get_rules": {
                "map": [],
                "return": []
            }
        },
        "Rule": {
            "__init__": {
                "return": [
                    "None"
                ],
                "build_only": [
                    "bool"
                ],
                "host": [],
                "endpoint": [
                    "typing.Optional[str]",
                    "str"
                ],
                "strict_slashes": [],
                "subdomain": [],
                "alias": [
                    "bool",
                    "typing.Any"
                ],
                "methods": [],
                "websocket": [
                    "bool"
                ],
                "redirect_to": [],
                "defaults": [
                    "typing.Optional[dict[str, typing.Any]]",
                    "typing.Optional[typing.Iterable[typing.Any]]",
                    "typing.Optional[typing.Dict[str, typing.Any]]",
                    "typing.Optional[typing.Iterable[str]]",
                    "typing.Optional[typing.Union[dict, typing.Iterable]]",
                    "typing.Optional[dict[typing.Any, typing.Any]]",
                    "dict[typing.Any, typing.Any]",
                    "typing.Optional[typing.Union[dict, list, set]]"
                ],
                "string": [
                    "str"
                ],
                "merge_slashes": [
                    "typing.Optional[bool]",
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "other",
                    "self",
                    "isinstance"
                ]
            },
            "_compile_builder": {
                "return": [],
                "append_unknown": []
            },
            "_encode_query_vars": {
                "query_vars": [
                    "dict",
                    "dict[typing.Any, typing.Any]",
                    "typing.Any"
                ],
                "return": []
            },
            "__repr__": {
                "return": []
            },
            "_get_func_code": {
                "code": [],
                "return": [
                    "typing.Callable"
                ],
                "name": [
                    "str"
                ]
            },
            "__str__": {
                "return": []
            },
            "_parse_rule": {
                "return": [],
                "rule": [
                    "str"
                ]
            },
            "bind": {
                "rebind": [
                    "bool"
                ],
                "map": [
                    "Map"
                ],
                "return": []
            },
            "build": {
                "append_unknown": [],
                "return": [
                    "typing.Optional[typing.Any]"
                ],
                "values": [
                    "dict[str, typing.Any]",
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "compile": {
                "return": [
                    "None"
                ]
            },
            "get_converter": {
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "tuple[typing.Any]",
                    "typing.Sequence[typing.Any]"
                ],
                "converter_name": [
                    "str"
                ],
                "variable_name": [
                    "str"
                ],
                "return": [
                    "typing.Any",
                    "Converter"
                ]
            },
            "empty": {
                "return": [
                    "typing.Any",
                    "typing.Self",
                    "typing.Type[Self]",
                    "MyClass",
                    "typing.Type[self]",
                    "ClassName"
                ]
            },
            "get_rules": {
                "map": [
                    "typing.Any",
                    "dict[typing.Any, typing.Any]",
                    "map"
                ],
                "return": [
                    "Iterator[Rule]",
                    "Rule",
                    "Iterator[typing.Any]",
                    "Iterator[Self]",
                    "typing.Generator[Self, None, None]",
                    "typing.Any",
                    "Rules"
                ]
            },
            "get_empty_kwargs": {
                "return": [
                    "dict"
                ]
            },
            "build_compare_key": {
                "return": []
            },
            "refresh": {
                "return": [
                    "None"
                ]
            },
            "suitable_for": {
                "method": [
                    "str",
                    "typing.Optional[str]",
                    "typing.Any"
                ],
                "values": [],
                "return": []
            },
            "provides_defaults_for": {
                "rule": [],
                "return": []
            }
        },
        "RuleTemplateFactory": {
            "__init__": {
                "rules": [],
                "context": [
                    "typing.Any",
                    "context",
                    "object",
                    "self.context"
                ],
                "return": [
                    "None"
                ]
            },
            "get_rules": {
                "return": [],
                "map": [
                    "typing.Any",
                    "map",
                    "rulefactory",
                    "typing.Mapping[typing.Any, typing.Any]",
                    "typing.Mapping",
                    "dict[typing.Any, typing.Any]"
                ]
            }
        },
        "Subdomain": {
            "__init__": {
                "subdomain": [],
                "return": [],
                "rules": []
            },
            "get_rules": {
                "map": [
                    "typing.Any",
                    "map",
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": []
            }
        },
        "Submount": {
            "__init__": {
                "path": [
                    "str"
                ],
                "rules": [
                    "list",
                    "dict"
                ],
                "return": [
                    "None",
                    "rules",
                    "pass"
                ]
            },
            "get_rules": {
                "map": [],
                "return": [
                    "typing.Generator[typing.Any, None, None]",
                    "rule",
                    "typing.Iterator[typing.Any]",
                    "typing.Any",
                    "Iterator[Rule]",
                    "Generator[Rule, None, None]",
                    "rulefactory"
                ]
            }
        },
        "global": {
            "_find": {
                "pos": [],
                "value": [],
                "return": [],
                "target": [
                    "value",
                    "int",
                    "Any",
                    "str",
                    "index"
                ]
            },
            "_prefix_names": {
                "expected_type": [],
                "return": [],
                "src": []
            },
            "_pythonize": {
                "return": [
                    "typing.Union[typing.Any, int, float, str]",
                    "typing.Union[int, float, str]",
                    "typing.Union[Any, int, float, str]",
                    "typing.Union[typing.Dict, int, float, str]",
                    "typing.Union[typing.Dict[typing.Any, typing.Any], int, float, str]",
                    "typing.Union[int,float,str]",
                    "typing.Union[int, float,str]"
                ],
                "value": [
                    "str",
                    "typing.Union[str, int, float]"
                ]
            },
            "parse_converter_args": {
                "argstr": [],
                "return": [
                    "tuple[tuple, dict]"
                ]
            }
        },
        "RuleFactory": {
            "get_rules": {
                "map": [],
                "return": [
                    "None",
                    "typing.Any",
                    "pass",
                    "Rules"
                ]
            }
        },
        "RulePart": {
            "global": {
                "static": [
                    "bool",
                    "static"
                ],
                "content": [
                    "str"
                ],
                "final": [],
                "suffixed": [],
                "weight": [
                    "Weighting",
                    "NamedTuple",
                    "weight",
                    "tuple"
                ]
            }
        },
        "Weighting": {
            "global": {
                "number_argument_weights": [
                    "int",
                    "Weighting"
                ],
                "argument_weights": [
                    "list[int]",
                    "convobj.weight",
                    "Weighting",
                    "int"
                ],
                "static_weights": [
                    "Weighting"
                ],
                "number_static_weights": [
                    "int",
                    "Weighting"
                ]
            }
        }
    },
    "werkzeug.sansio.http": {
        "global": {
            "_cookie_unslash_replace": {
                "return": [
                    "Union[str, bytes]",
                    "typing.Union[str, bytes]"
                ],
                "m": [
                    "typing.Match"
                ]
            },
            "is_resource_modified": {
                "etag": [
                    "typing.Optional[str]"
                ],
                "data": [
                    "typing.Any",
                    "bytes"
                ],
                "http_if_range": [],
                "ignore_if_range": [
                    "bool"
                ],
                "http_if_match": [
                    "str",
                    "typing.Optional[str]"
                ],
                "http_if_modified_since": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "bool"
                ],
                "last_modified": [
                    "typing.Union[str, datetime.datetime, None]",
                    "typing.Optional[typing.Union[str, datetime.datetime]]"
                ],
                "http_range": [
                    "typing.Optional[str]"
                ],
                "http_if_none_match": [
                    "typing.Optional[str]",
                    "str"
                ]
            },
            "parse_cookie": {
                "cookie": [
                    "str",
                    "typing.Optional[str]"
                ],
                "return": [
                    "cls",
                    "typing.Any",
                    "T"
                ],
                "cls": [
                    "typing.Optional[type[ds.MultiDict[str, str]]]",
                    "typing.Optional[typing.Type[ds.MultiDict[str, str]]]"
                ]
            }
        }
    },
    "werkzeug.sansio.multipart": {
        "MultipartDecoder": {
            "__init__": {
                "max_form_memory_size": [
                    "int"
                ],
                "boundary": [
                    "bytes",
                    "Union[str, bytes]",
                    "Union[bytes, str]",
                    "Union[bytes]"
                ],
                "return": [],
                "max_parts": []
            },
            "_parse_headers": {
                "return": [
                    "Headers"
                ],
                "data": [
                    "bytes"
                ]
            },
            "_parse_data": {
                "data": [
                    "bytes"
                ],
                "return": [
                    "tuple[bytes, unknown, unknown]",
                    "tuple[bytes, int, bool]"
                ],
                "start": []
            },
            "last_newline": {
                "data": [
                    "bytes"
                ],
                "return": [
                    "int"
                ]
            },
            "receive_data": {
                "return": [],
                "data": [
                    "typing.Optional[bytes]",
                    "typing.Union[None, bytes]",
                    "data",
                    "typing.Optional[typing.Union[bytes, bytearray]]",
                    "typing.Union[None, typing.Sequence[typing.Any]]",
                    "None",
                    "list[typing.Any]",
                    "self.buffer"
                ]
            },
            "next_event": {
                "return": [
                    "typing.Any",
                    "Event",
                    "NeedData"
                ]
            }
        },
        "MultipartEncoder": {
            "__init__": {
                "return": [
                    "None"
                ],
                "boundary": []
            },
            "send_event": {
                "return": [],
                "event": [
                    "Event",
                    "Union[Preamble, Field, File, Data, Epilogue]"
                ]
            }
        },
        "Data": {
            "global": {
                "more_data": [],
                "data": []
            }
        },
        "File": {
            "global": {
                "headers": [
                    "list[tuple[str, str]]"
                ],
                "filename": [
                    "str",
                    "typing.Optional[str]"
                ],
                "name": []
            }
        },
        "Field": {
            "global": {
                "name": [
                    "str",
                    "name"
                ],
                "headers": [
                    "list[tuple[str, str]]"
                ]
            }
        },
        "Epilogue": {
            "global": {
                "data": []
            }
        },
        "Preamble": {
            "global": {
                "data": [
                    "bytes",
                    "data",
                    "bytearray"
                ]
            }
        }
    },
    "werkzeug.sansio.request": {
        "Request": {
            "__init__": {
                "method": [
                    "str"
                ],
                "headers": [],
                "path": [
                    "str"
                ],
                "query_string": [
                    "str"
                ],
                "remote_addr": [],
                "scheme": [
                    "str"
                ],
                "server": [],
                "return": [
                    "None"
                ],
                "root_path": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_parse_content_type": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "list_storage_class": [
                    "ImmutableList",
                    "Request",
                    "type[ImmutableList]",
                    "..datastructures",
                    "werkzeug.datastructures"
                ],
                "parameter_storage_class": [],
                "trusted_hosts": [],
                "user_agent_class": [
                    "type[UserAgent]"
                ],
                "dict_storage_class": []
            }
        }
    },
    "werkzeug.sansio.response": {
        "Response": {
            "__init__": {
                "return": [],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "headers": [],
                "mimetype": [
                    "typing.Optional[str]"
                ],
                "status": [
                    "typing.Optional[int]",
                    "int"
                ]
            },
            "delete_cookie": {
                "domain": [
                    "typing.Optional[str]",
                    "typing.Union[str, None]"
                ],
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "httponly": [
                    "bool"
                ],
                "partitioned": [
                    "bool"
                ],
                "secure": [
                    "bool"
                ],
                "samesite": [
                    "typing.Optional[str]"
                ],
                "path": []
            },
            "get_etag": {
                "return": []
            },
            "set_cookie": {
                "domain": [],
                "httponly": [
                    "bool"
                ],
                "partitioned": [],
                "key": [
                    "str"
                ],
                "path": [],
                "secure": [],
                "expires": [
                    "typing.Optional[int]"
                ],
                "value": [
                    "str"
                ],
                "return": [
                    "None"
                ],
                "samesite": [
                    "typing.Optional[str]",
                    "None"
                ],
                "max_age": [
                    "typing.Optional[int]"
                ]
            },
            "_clean_status": {
                "return": [
                    "tuple[str, int]",
                    "typing.Tuple[str, int]",
                    "typing.Union[typing.Tuple[str, int], typing.Tuple[typing.Any, int]]",
                    "status"
                ],
                "value": [
                    "typing.Union[str,int,HTTPStatus]"
                ]
            },
            "global": {
                "default_mimetype": [],
                "headers": [
                    "werkzeug.datastructures.Headers",
                    "Headers",
                    "headers",
                    "werkzeug.datastructures"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "set_etag": {
                "etag": [],
                "return": [],
                "weak": []
            }
        },
        "global": {
            "_set_property": {
                "return": [
                    "property"
                ],
                "name": [
                    "str"
                ],
                "doc": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "werkzeug.sansio.utils": {
        "global": {
            "get_content_length": {
                "http_content_length": [],
                "http_transfer_encoding": [
                    "str",
                    "typing.Optional[str]"
                ],
                "return": [
                    "typing.Optional[int]"
                ]
            },
            "get_current_url": {
                "host": [
                    "str"
                ],
                "query_string": [],
                "return": [
                    "str"
                ],
                "root_path": [
                    "typing.Optional[str]"
                ],
                "scheme": [
                    "str"
                ],
                "path": []
            },
            "get_host": {
                "return": [
                    "str",
                    "typing.Any",
                    "host",
                    "typing.Optional[str]"
                ],
                "scheme": [],
                "trusted_hosts": [
                    "Optional[list[str]]"
                ],
                "server": [
                    "typing.Optional[typing.Tuple[str, typing.Optional[int]]]",
                    "typing.Optional[typing.Union[typing.Tuple[str, typing.Optional[int]], typing.Tuple[str, int]]]"
                ],
                "host_header": [
                    "typing.Optional[str]"
                ]
            },
            "host_is_trusted": {
                "return": [
                    "bool"
                ],
                "trusted_list": [
                    "typing.Union[str, list[str]]",
                    "typing.Union[str, typing.Iterable[typing.Any]]",
                    "typing.Union[str, typing.List[str]]",
                    "typing.Union[str, list]",
                    "Union[str, list[str]]",
                    "typing.Union[list[str], str]"
                ],
                "hostname": []
            }
        }
    },
    "werkzeug.security": {
        "global": {
            "_hash_internal": {
                "method": [],
                "salt": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "return": []
            },
            "check_password_hash": {
                "return": [],
                "password": [
                    "str"
                ],
                "pwhash": [
                    "str"
                ]
            },
            "generate_password_hash": {
                "method": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "salt_length": [
                    "int"
                ]
            },
            "gen_salt": {
                "return": [
                    "str"
                ],
                "length": []
            },
            "safe_join": {
                "directory": [
                    "str"
                ],
                "return": [
                    "typing.Union[str, None]",
                    "typing.Union[str,None]"
                ],
                "pathnames": []
            },
            "global": {
                "_os_alt_seps": []
            }
        }
    },
    "werkzeug.serving": {
        "WSGIRequestHandler": {
            "__getattr__": {
                "name": [],
                "return": [
                    "typing.Callable",
                    "typing.Any"
                ]
            },
            "address_string": {
                "return": []
            },
            "connection_dropped": {
                "error": [
                    "Exception",
                    "typing.Optional[Exception]",
                    "typing.Union[Exception, str]",
                    "BaseException",
                    "typing.Union[Exception, BaseException]"
                ],
                "environ": [],
                "return": []
            },
            "handle": {
                "return": []
            },
            "global": {
                "server": [
                    "BaseWSGIServer",
                    "server",
                    "ForkingWSGIServer",
                    "ThreadedWSGIServer",
                    "srv",
                    "HTTPServer",
                    "threaded"
                ]
            },
            "log_error": {
                "args": [
                    "typing.Any"
                ],
                "return": [
                    "None"
                ],
                "format": []
            },
            "log": {
                "return": [
                    "None"
                ],
                "message": [],
                "type": [
                    "typing.Any",
                    "int",
                    "str"
                ],
                "args": [
                    "typing.Tuple[typing.Any, ...]",
                    "tuple[typing.Any]"
                ]
            },
            "log_request": {
                "code": [
                    "str"
                ],
                "size": [],
                "return": []
            },
            "log_message": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Tuple[typing.Any, ...]",
                    "typing.Iterable[typing.Any]"
                ],
                "format": []
            },
            "port_integer": {
                "return": [
                    "int"
                ]
            },
            "make_environ": {
                "return": []
            },
            "run_wsgi": {
                "return": [
                    "None"
                ]
            }
        },
        "_SslDummy": {
            "__getattr__": {
                "name": [
                    "str"
                ],
                "return": []
            }
        },
        "BaseWSGIServer": {
            "__init__": {
                "return": [
                    "None",
                    "self"
                ],
                "app": [
                    "App",
                    "Application",
                    "Flask"
                ],
                "passthrough_errors": [
                    "bool"
                ],
                "handler": [],
                "ssl_context": [
                    "typing.Union[None, tuple, str, ssl.SSLContext]",
                    "typing.Union[ssl.SSLContext, tuple, str, None]",
                    "typing.Union[tuple, str, ssl.SSLContext, None]",
                    "typing.Union[None, tuple, str]",
                    "typing.Union[None, str, tuple]",
                    "typing.Union[None, str, tuple, ssl.SSLContext]"
                ],
                "host": [
                    "str"
                ],
                "port": [],
                "fd": []
            },
            "handle_error": {
                "client_address": [
                    "Tuple[str, int]",
                    "tuple",
                    "tuple[str, int]"
                ],
                "request": [
                    "Request",
                    "HttpRequest",
                    "typing.Any"
                ],
                "return": []
            },
            "log": {
                "message": [
                    "str"
                ],
                "type": [
                    "int",
                    "Any",
                    "CRITICAL",
                    "Union[DEBUG, INFO, WARNING, CRITICAL]",
                    "Union[CRITICAL, DEBUG, INFO, WARNING]",
                    "WARNING",
                    "INFO"
                ],
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Iterable[typing.Any]",
                    "typing.Tuple[typing.Any, ...]"
                ]
            },
            "log_startup": {
                "return": []
            },
            "serve_forever": {
                "return": [],
                "poll_interval": []
            }
        },
        "ForkingWSGIServer": {
            "__init__": {
                "return": [
                    "None"
                ],
                "fd": [
                    "int"
                ],
                "app": [],
                "passthrough_errors": [
                    "bool"
                ],
                "handler": [
                    "typing.Optional[Handler]",
                    "typing.Optional[typing.Callable]",
                    "typing.Any",
                    "None"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "processes": [],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ]
            }
        },
        "DechunkedInput": {
            "__init__": {
                "rfile": [],
                "return": [
                    "None"
                ]
            },
            "readinto": {
                "return": [
                    "int",
                    "read"
                ],
                "buf": []
            },
            "read_chunk_len": {
                "return": []
            },
            "readable": {
                "return": []
            }
        },
        "global": {
            "_ansi_style": {
                "value": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "styles": []
            },
            "generate_adhoc_ssl_pair": {
                "cn": [],
                "return": []
            },
            "generate_adhoc_ssl_context": {
                "return": [
                    "ssl.SSLContext"
                ]
            },
            "get_interface_ip": {
                "family": [],
                "return": [
                    "str"
                ]
            },
            "get_sockaddr": {
                "family": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "return": [
                    "typing.Union[str, tuple, bytes]",
                    "typing.Union[str, tuple,bytes]",
                    "typing.Union[str, tuple, typing.Any]"
                ],
                "port": []
            },
            "global": {
                "connection_dropped_errors": [
                    "tuple[typing.Type[BaseException], ...]"
                ]
            },
            "is_running_from_reloader": {
                "return": [
                    "bool"
                ]
            },
            "is_ssl_error": {
                "error": [
                    "typing.Optional[Exception]"
                ],
                "return": []
            },
            "load_ssl_context": {
                "pkey_file": [
                    "typing.Optional[str]"
                ],
                "cert_file": [],
                "return": [
                    "ssl.SSLContext"
                ],
                "protocol": []
            },
            "make_server": {
                "host": [
                    "str"
                ],
                "app": [
                    "typing.Callable"
                ],
                "request_handler": [],
                "processes": [],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "fd": [
                    "typing.Optional[int]",
                    "typing.Optional[Any]"
                ],
                "passthrough_errors": [
                    "bool"
                ],
                "port": [
                    "int"
                ],
                "return": [
                    "Union[ThreadedWSGIServer, ForkingWSGIServer, BaseWSGIServer]",
                    "BaseWSGIServer",
                    "typing.Union[ThreadedWSGIServer, ForkingWSGIServer, BaseWSGIServer]"
                ],
                "threaded": []
            },
            "make_ssl_devcert": {
                "base_path": [
                    "str"
                ],
                "cn": [],
                "return": [
                    "typing.Tuple[str, str]",
                    "typing.Tuple[typing.Any, typing.Any]"
                ],
                "host": []
            },
            "run_simple": {
                "exclude_patterns": [],
                "application": [
                    "SharedDataMiddleware",
                    "DebuggedApplication",
                    "application",
                    "WSGIApplication",
                    "Server",
                    "Union[Flask, SharedDataMiddleware, DebuggedApplication]",
                    "werkzeug.wsgi.WSGIApplication"
                ],
                "processes": [],
                "reloader_interval": [],
                "reloader_type": [],
                "extra_files": [
                    "Optional[list[str]]",
                    "list[str]"
                ],
                "port": [
                    "int"
                ],
                "hostname": [
                    "str"
                ],
                "threaded": [
                    "bool"
                ],
                "use_evalex": [
                    "bool"
                ],
                "request_handler": [
                    "typing.Optional[typing.Callable]",
                    "Optional[Callable]",
                    "typing.Callable",
                    "Optional[typing.Callable]",
                    "typing.Any",
                    "Optional[BaseHTTPRequestHandler]",
                    "Optional[werkzeug.serving.WSGIRequestHandler]",
                    "BaseHTTPRequestHandler"
                ],
                "static_files": [
                    "Optional[dict[str, Union[tuple[str, str], str]]]",
                    "Optional[dict]",
                    "Optional[dict[str, str]]",
                    "dict"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "return": [
                    "None"
                ],
                "use_debugger": [],
                "use_reloader": [],
                "passthrough_errors": []
            },
            "select_address_family": {
                "port": [],
                "return": [
                    "int"
                ],
                "host": []
            }
        }
    },
    "werkzeug.test": {
        "EnvironBuilder": {
            "__del__": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "content_length": [],
                "environ_base": [
                    "dict"
                ],
                "auth": [
                    "typing.Union[tuple[str, str], Authorization, None]",
                    "typing.Union[tuple, Authorization, None]",
                    "typing.Union[tuple, Authorization]",
                    "typing.Union[tuple[str, str], Authorization]",
                    "typing.Union[tuple, typing.Any]"
                ],
                "return": [
                    "None"
                ],
                "data": [
                    "Union[None, str, bytes, IO, Dict]",
                    "bytes",
                    "Union[str, bytes, IO]",
                    "Union[None, IO, str, bytes, Iterable]",
                    "str",
                    "Union[None, str, bytes, dict, object]",
                    "Union[None, str, bytes, dict, object with read method]",
                    "Union[str, bytes, dict, None, IO]",
                    "Union[bytes, str, IO[Any]]",
                    "Union[bytes, str, dict, object]",
                    "Union[str, bytes, IO[Any], Dict[str, Any]]",
                    "Union[str, bytes, dict, None]",
                    "Union[None, str, bytes, IO]",
                    "Union[str, bytes, dict, object]",
                    "Union[None, str, bytes, dict, Iterable]",
                    "Union[str, bytes]",
                    "BytesIO"
                ],
                "errors_stream": [],
                "base_url": [
                    "str"
                ],
                "environ_overrides": [],
                "headers": [
                    "typing.Union[dict, Headers, None]",
                    "typing.Union[dict[str, str], Headers, None]",
                    "typing.Optional[typing.Union[dict, Headers]]",
                    "typing.Union[None, dict, Headers]",
                    "typing.Optional[Headers]",
                    "typing.Union[None, Headers, dict[str, str]]"
                ],
                "input_stream": [],
                "mimetype": [],
                "json": [
                    "typing.Optional[typing.Union[dict, list, str, int, float, bool, None]]",
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[typing.Union[dict, list, str, int, float, bool]]",
                    "typing.Optional[typing.Dict[str, typing.Any]]"
                ],
                "multithread": [
                    "bool"
                ],
                "method": [],
                "content_type": [],
                "path": [
                    "str"
                ],
                "run_once": [
                    "bool"
                ],
                "multiprocess": [],
                "query_string": [
                    "typing.Optional[typing.Union[str, typing.Mapping]]",
                    "typing.Optional[typing.Union[str, werkzeug.datastructures.MultiDict]]",
                    "typing.Union[str, None, typing.Mapping]",
                    "typing.Union[str, werkzeug.datastructures.MultiDict, None]",
                    "typing.Union[str, typing.Mapping, None]",
                    "typing.Optional[typing.Union[str, typing.Dict, werkzeug.datastructures.MultiDict]]",
                    "typing.Union[str, typing.Dict, None]",
                    "typing.Optional[typing.Union[str, typing.Dict]]"
                ]
            },
            "_add_file_from_data": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "typing.Union[tuple, typing.Any]",
                    "typing.Union[typing.Any, typing.Tuple[typing.Any, ...]]",
                    "typing.Union[typing.Any, tuple]",
                    "typing.Union[typing.Any, tuple[typing.Any]]",
                    "typing.Any"
                ]
            },
            "_get_form": {
                "return": [
                    "typing.Any"
                ],
                "storage": [
                    "typing.Any",
                    "Any",
                    "storage"
                ],
                "name": []
            },
            "_make_base_url": {
                "host": [
                    "str"
                ],
                "return": [
                    "str"
                ],
                "scheme": [
                    "str"
                ],
                "script_root": [
                    "str"
                ]
            },
            "_set_form": {
                "return": [],
                "name": [],
                "value": []
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "from_environ": {
                "return": [
                    "Self",
                    "typing.Any"
                ],
                "environ": [],
                "kwargs": []
            },
            "get_request": {
                "return": [
                    "cls"
                ],
                "cls": [
                    "typing.Type",
                    "typing.Optional[typing.Type]"
                ]
            },
            "get_environ": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "_args": [
                    "None",
                    "MultiDict",
                    "args",
                    "MultiDict[str, str]",
                    "werkzeug.datastructures.MultiDict",
                    "a.b",
                    "EnvironBuilder",
                    "typing.Union[werkzeug.datastructures.MultiDict[str, str], None]"
                ],
                "_form": [
                    "MultiDict[str, str]",
                    "MultiDict",
                    "form",
                    "a.b",
                    "typing.Optional[MultiDict[str, str]]",
                    "MultiDict[str, t.Any]",
                    "None",
                    "EnvironBuilder",
                    "werkzeug.datastructures"
                ],
                "_input_stream": [],
                "_query_string": [
                    "typing.Union[str, None]",
                    "EnvironBuilder",
                    "None",
                    "args",
                    "typing.Optional[str]",
                    "value"
                ],
                "_files": []
            }
        },
        "Client": {
            "__init__": {
                "return": [
                    "None"
                ],
                "allow_subdomain_redirects": [],
                "response_wrapper": [],
                "application": [],
                "use_cookies": []
            },
            "__repr__": {
                "return": []
            },
            "_add_cookies_to_wsgi": {
                "return": [
                    "None"
                ],
                "environ": []
            },
            "_update_cookies_from_response": {
                "headers": [
                    "typing.Iterable[typing.Any]",
                    "typing.List[typing.Union[typing.Tuple[str, str], str]]",
                    "typing.Iterable[str]",
                    "list[typing.Any]"
                ],
                "server_name": [],
                "return": [],
                "path": []
            },
            "delete_cookie": {
                "return": [],
                "domain": [],
                "key": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            },
            "delete": {
                "return": [],
                "args": [],
                "kw": [
                    "dict"
                ]
            },
            "get": {
                "kw": [
                    "dict"
                ],
                "args": [],
                "return": []
            },
            "get_cookie": {
                "domain": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "key": [],
                "return": [
                    "typing.Any",
                    "typing.Optional[typing.Any]",
                    "Optional[str]"
                ]
            },
            "head": {
                "args": [
                    "typing.Any",
                    "typing.Tuple[typing.Any, ...]",
                    "tuple[typing.Any, ...]"
                ],
                "kw": [
                    "dict"
                ],
                "return": []
            },
            "open": {
                "buffered": [
                    "bool"
                ],
                "follow_redirects": [],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "return": [
                    "None",
                    "open"
                ]
            },
            "options": {
                "args": [
                    "typing.Any",
                    "tuple[typing.Any, ...]",
                    "typing.Tuple[typing.Any, ...]"
                ],
                "kw": [
                    "dict"
                ],
                "return": []
            },
            "patch": {
                "args": [],
                "kw": [
                    "dict"
                ],
                "return": [
                    "typing.Any",
                    "patch",
                    "open"
                ]
            },
            "put": {
                "args": [],
                "kw": [],
                "return": [
                    "typing.Any",
                    "open",
                    "put",
                    "T",
                    "typing.IO[typing.Any]"
                ]
            },
            "run_wsgi_app": {
                "buffered": [
                    "bool"
                ],
                "environ": [],
                "return": []
            },
            "resolve_redirect": {
                "response": [],
                "buffered": [
                    "bool"
                ],
                "return": [
                    "typing.Any",
                    "self.open",
                    "builder",
                    "open"
                ]
            },
            "post": {
                "return": [
                    "typing.Any",
                    "open"
                ],
                "args": [],
                "kw": []
            },
            "set_cookie": {
                "key": [
                    "str"
                ],
                "origin_only": [
                    "bool"
                ],
                "domain": [],
                "kwargs": [],
                "value": [],
                "path": [],
                "return": [
                    "None"
                ]
            },
            "trace": {
                "args": [
                    "typing.Any",
                    "typing.Tuple[typing.Any, ...]",
                    "tuple[typing.Any, ...]",
                    "typing.Tuple[typing.Any, ..."
                ],
                "return": [],
                "kw": []
            }
        },
        "TestResponse": {
            "__init__": {
                "history": [
                    "tuple"
                ],
                "return": [
                    "None"
                ],
                "status": [
                    "int"
                ],
                "kwargs": [
                    "typing.Dict[str, typing.Any]"
                ],
                "headers": [],
                "response": [],
                "request": []
            },
            "global": {
                "request": [
                    "Request",
                    "request",
                    "werkzeug.wrappers.request.Request",
                    "EnvironBuilder",
                    ".wrappers.request",
                    "None"
                ],
                "history": [
                    "list[TestResponse]",
                    "tuple[TestResponse, ...]",
                    "response.history",
                    "TestResponse",
                    "history"
                ]
            }
        },
        "Cookie": {
            "_from_response_header": {
                "header": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "server_name": [],
                "return": [
                    "Cookie",
                    "RequestsCookieJar",
                    "Any",
                    "Optional",
                    "domain",
                    "cls",
                    "CookieInfo",
                    "CookieJar",
                    "path"
                ]
            },
            "_matches_request": {
                "server_name": [
                    "str"
                ],
                "return": [
                    "bool"
                ],
                "path": [
                    "str"
                ]
            },
            "_to_request_header": {
                "return": []
            },
            "global": {
                "expires": [],
                "decoded_key": [
                    "str",
                    "Cookie"
                ],
                "domain": [
                    "params",
                    "variable",
                    "Optional[str]",
                    "sep"
                ],
                "decoded_value": [],
                "http_only": [
                    "typing.Optional[bool]",
                    "HttpOnly",
                    "Cookie",
                    "typing.Union[bool, None]",
                    "a.b.c",
                    "None"
                ],
                "secure": [
                    "typing.Optional[bool]",
                    "secure",
                    "typing.Union[bool, None]",
                    "None",
                    "root"
                ],
                "value": [
                    "value",
                    "EnvironBuilder",
                    "t.Any",
                    "key",
                    "list",
                    "typing.Any",
                    "str",
                    "read",
                    "data"
                ],
                "max_age": [],
                "key": [
                    "key",
                    "str",
                    "Cookie",
                    "EnvironBuilder",
                    "partition",
                    "path",
                    "FileMultiDict",
                    "data"
                ],
                "origin_only": [
                    "Domain",
                    "bool",
                    "Cookie",
                    "False",
                    "True"
                ],
                "same_site": [],
                "path": [
                    "str",
                    "path",
                    "Client"
                ]
            }
        },
        "global": {
            "_iter_data": {
                "return": [],
                "data": []
            },
            "create_environ": {
                "args": [
                    "sequence"
                ],
                "kwargs": [],
                "return": [
                    "builder",
                    "os.environ"
                ]
            },
            "encode_multipart": {
                "boundary": [
                    "typing.Optional[str]",
                    "typing.Any",
                    "Optional[str]",
                    "None",
                    "str"
                ],
                "return": [
                    "tuple[typing.Any, typing.Any]",
                    "tuple[typing.Optional[str], bytes]",
                    "tuple[str, bytes]"
                ],
                "values": []
            },
            "run_wsgi_app": {
                "buffered": [],
                "app": [
                    "WSGIApplication",
                    "Any"
                ],
                "environ": [
                    "dict[str, typing.Any]"
                ],
                "return": [
                    "Tuple[Any, str, Headers]",
                    "Tuple[Iterable, str, Headers]",
                    "Headers",
                    "Tuple"
                ]
            },
            "stream_encode_multipart": {
                "data": [],
                "use_tempfile": [
                    "bool"
                ],
                "return": [
                    "str",
                    "tuple[IOBase, int, str]",
                    "tuple[typing.Any, typing.Any, typing.Any]",
                    "boundary",
                    "tuple[Iterator, int, str]"
                ],
                "boundary": [
                    "Optional[str]",
                    "boundary"
                ],
                "threshold": []
            }
        }
    },
    "werkzeug.testapp": {
        "global": {
            "_get_werkzeug_version": {
                "return": [
                    "str"
                ]
            },
            "test_app": {
                "req": [
                    "Request"
                ],
                "return": []
            },
            "iter_sys_path": {
                "return": []
            }
        }
    },
    "werkzeug.urls": {
        "global": {
            "_codec_error_url_quote": {
                "e": [
                    "UnicodeEncodeError",
                    "UnicodeError",
                    "Exception"
                ],
                "return": [
                    "tuple",
                    "tuple[typing.Any, typing.Any]",
                    "end",
                    "tuple[str, int]",
                    "out"
                ]
            },
            "_make_unquote_part": {
                "return": [
                    "function",
                    "Callable"
                ],
                "chars": [],
                "name": []
            },
            "_decode_idna": {
                "return": [],
                "domain": [
                    "str"
                ]
            },
            "_urlencode": {
                "query": [
                    "typing.Iterable[typing.Tuple[typing.Any, typing.Any]]",
                    "typing.Dict[typing.Any, typing.Any]",
                    "typing.Mapping[typing.Any, typing.Any]",
                    "typing.Union[typing.Dict[typing.Any, typing.Any], typing.Iterable[typing.Tuple[typing.Any, typing.Any]]]",
                    "dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "str"
                ]
            },
            "iri_to_uri": {
                "iri": [
                    "str"
                ],
                "return": []
            },
            "uri_to_iri": {
                "uri": [],
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.user_agent": {
        "UserAgent": {
            "__init__": {
                "string": [],
                "return": [
                    "None"
                ]
            },
            "__bool__": {
                "return": []
            },
            "__repr__": {
                "return": []
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "global": {
                "browser": [
                    "typing.Optional[str]",
                    "typing.Union[str, None]"
                ],
                "language": [],
                "platform": [
                    "typing.Union[str, None]",
                    "typing.Optional[str]",
                    "Optional[str]"
                ],
                "version": [
                    "typing.Union[str, None]",
                    "typing.Optional[str]"
                ]
            },
            "to_header": {
                "return": [
                    "str",
                    "typing.Any"
                ]
            }
        }
    },
    "werkzeug.utils": {
        "cached_property": {
            "__delete__": {
                "return": [
                    "None"
                ],
                "obj": []
            },
            "__get__": {
                "obj": [
                    "typing.Any",
                    "typing.Optional[typing.Any]"
                ],
                "return": [
                    "typing.Any",
                    "value",
                    "self"
                ],
                "type": []
            },
            "__set__": {
                "return": [],
                "obj": [],
                "value": [
                    "Any"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "fget": [
                    "method",
                    "function",
                    "callable"
                ],
                "name": [
                    "str",
                    "None",
                    "Optional[str]",
                    "name",
                    "Union[str, None]"
                ],
                "doc": [
                    "str"
                ]
            }
        },
        "ImportStringError": {
            "__init__": {
                "return": [],
                "import_name": [
                    "str"
                ],
                "exception": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "global": {
                "import_name": [
                    "str"
                ],
                "exception": [
                    "BaseException",
                    "ImportError"
                ]
            }
        },
        "global": {
            "append_slash_redirect": {
                "code": [
                    "int"
                ],
                "return": [
                    "Response"
                ],
                "environ": [
                    "dict",
                    "dict[str, str]"
                ]
            },
            "find_modules": {
                "return": [
                    "typing.Iterator[str]"
                ],
                "recursive": [],
                "include_packages": [],
                "import_path": [
                    "str"
                ]
            },
            "get_content_type": {
                "return": [],
                "mimetype": [
                    "str"
                ],
                "charset": [
                    "str"
                ]
            },
            "import_string": {
                "silent": [
                    "bool"
                ],
                "return": [
                    "Any",
                    "None",
                    "module",
                    "getattr",
                    "sys.modules"
                ],
                "import_name": []
            },
            "redirect": {
                "Response": [
                    "Optional[Response]",
                    "Response",
                    "None"
                ],
                "code": [],
                "return": [],
                "location": [
                    "str"
                ]
            },
            "send_file": {
                "conditional": [],
                "_root_path": [],
                "as_attachment": [
                    "bool"
                ],
                "mimetype": [],
                "path_or_file": [
                    "t.Union[os.PathLike[str], str]",
                    "Union[os.PathLike[str], str]"
                ],
                "response_class": [],
                "download_name": [
                    "str",
                    "Optional[str]"
                ],
                "environ": [],
                "last_modified": [
                    "typing.Optional[datetime.datetime]",
                    "typing.Optional[typing.Any]",
                    "typing.Optional[float]"
                ],
                "etag": [],
                "use_x_sendfile": [],
                "return": [
                    "typing.Optional[flask.wrappers.Response]",
                    "typing.Optional[flask.Response]",
                    "HttpResponse",
                    "typing.Any",
                    "typing.Optional[HttpResponse]",
                    "typing.Optional[Response]",
                    "typing.Union[flask.Response, werkzeug.wrappers.Response]"
                ],
                "max_age": []
            },
            "secure_filename": {
                "filename": [],
                "return": []
            },
            "send_from_directory": {
                "directory": [
                    "PathLike"
                ],
                "environ": [],
                "kwargs": [
                    "dict[str, typing.Any]",
                    "typing.Dict[str, typing.Any]"
                ],
                "path": [],
                "return": [
                    "typing.Any"
                ]
            }
        },
        "environ_property": {
            "lookup": {
                "obj": [
                    "typing.Any",
                    "environ"
                ],
                "return": []
            }
        },
        "header_property": {
            "lookup": {
                "return": [
                    "typing.Any",
                    "typing.List[str]",
                    "list",
                    "headers",
                    "typing.Dict[str, str]",
                    "obj",
                    "typing.List[typing.Any]",
                    "dict",
                    "typing.List",
                    "list[str]"
                ],
                "obj": []
            }
        }
    },
    "werkzeug.wrappers.request": {
        "Request": {
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self",
                    "typing.Any"
                ]
            },
            "__exit__": {
                "return": []
            },
            "__init__": {
                "environ": [
                    "dict[str, str]"
                ],
                "return": [],
                "populate_request": [],
                "shallow": []
            },
            "_get_file_stream": {
                "content_length": [],
                "total_content_length": [
                    "typing.Optional[int]"
                ],
                "content_type": [],
                "filename": [
                    "typing.Optional[str]"
                ],
                "return": [
                    "typing.IO",
                    "typing.IO[bytes]",
                    "typing.Any",
                    "typing.Optional[str]"
                ]
            },
            "_load_form_data": {
                "return": [
                    "None"
                ]
            },
            "_get_stream_for_parsing": {
                "return": []
            },
            "application": {
                "return": [
                    "WSGIApplication"
                ],
                "f": [
                    "typing.Callable[..., Any]",
                    "cls",
                    "typing.Callable",
                    "typing.Callable[..., typing.Any]",
                    "Callable[..., Any]",
                    "HTTPException",
                    "Any",
                    "typing.ClassMethod[..., Any]",
                    "ClassMethod"
                ]
            },
            "close": {
                "return": []
            },
            "global": {
                "_cached_json": [],
                "max_content_length": [
                    "typing.Optional[int]",
                    "typing.Union[int, None]"
                ],
                "form_data_parser_class": [
                    "type[FormDataParser]",
                    "FormDataParser"
                ],
                "max_form_memory_size": [
                    "int",
                    "None"
                ],
                "shallow": [],
                "environ": [
                    "WSGIEnvironment"
                ]
            },
            "on_json_loading_failed": {
                "e": [
                    "Exception"
                ],
                "return": []
            },
            "from_values": {
                "args": [
                    "Any",
                    "tuple",
                    "Tuple[Any, ...]"
                ],
                "return": [],
                "kwargs": []
            },
            "make_form_data_parser": {
                "return": []
            }
        }
    },
    "werkzeug.wrappers.response": {
        "Response": {
            "__call__": {
                "start_response": [
                    "typing.Callable"
                ],
                "return": [
                    "typing.Iterable[bytes]"
                ],
                "environ": []
            },
            "__init__": {
                "content_type": [],
                "direct_passthrough": [
                    "bool"
                ],
                "return": [
                    "None"
                ],
                "mimetype": [
                    "typing.Optional[str]"
                ],
                "status": [
                    "int"
                ],
                "headers": [],
                "response": [
                    "requests.models.Response",
                    "Any",
                    "bytearray",
                    "Optional[Union[str, bytes, bytearray, Any]]",
                    "Union[None, str, bytes, bytearray, Any]"
                ]
            },
            "__enter__": {
                "return": [
                    "Self",
                    "typing.Self",
                    "MyClass"
                ]
            },
            "_ensure_sequence": {
                "return": [],
                "mutable": []
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_process_range_request": {
                "complete_length": [
                    "int",
                    "typing.Optional[int]"
                ],
                "return": [
                    "bool"
                ],
                "accept_ranges": [
                    "typing.Union[bool, str]",
                    "typing.Union[bool]"
                ],
                "environ": []
            },
            "_is_range_request_processable": {
                "return": [
                    "bool"
                ],
                "environ": []
            },
            "_wrap_range_response": {
                "return": [],
                "length": [
                    "int",
                    "length"
                ],
                "start": [
                    "int",
                    "start"
                ]
            },
            "add_etag": {
                "return": [
                    "None"
                ],
                "overwrite": [],
                "weak": [
                    "bool"
                ]
            },
            "close": {
                "return": []
            },
            "call_on_close": {
                "return": [],
                "func": [
                    "typing.Callable"
                ]
            },
            "calculate_content_length": {
                "return": []
            },
            "force_type": {
                "environ": [],
                "response": [
                    "typing.Union[Response, typing.Callable]",
                    "typing.Union[Response, typing.Any]",
                    "typing.Any"
                ],
                "return": [
                    "typing.Any",
                    "response"
                ]
            },
            "from_app": {
                "app": [
                    "typing.Callable[Any, typing.Any]"
                ],
                "buffered": [
                    "bool"
                ],
                "environ": [
                    "dict"
                ],
                "return": [
                    "cls"
                ]
            },
            "get_app_iter": {
                "environ": [],
                "return": []
            },
            "get_wsgi_headers": {
                "environ": [
                    "dict[str, typing.Any]"
                ],
                "return": []
            },
            "get_wsgi_response": {
                "environ": [
                    "dict[str, typing.Any]"
                ],
                "return": [
                    "Tuple[Any, Any, Any]",
                    "Tuple[typing.Iterable, str, typing.List]",
                    "tuple",
                    "Tuple[typing.Iterable[bytes], str, typing.List[typing.Tuple[str, str]]]"
                ]
            },
            "make_conditional": {
                "complete_length": [],
                "accept_ranges": [
                    "bool"
                ],
                "return": [
                    "Self",
                    "self",
                    "typing.Any",
                    "ClassName",
                    "Response"
                ],
                "request_or_environ": [
                    "typing.Union[requests.models.Request, dict]",
                    "typing.Union[dict, requests.models.Request]"
                ]
            },
            "make_sequence": {
                "return": []
            },
            "global": {
                "response": [
                    "response",
                    "Response",
                    "ResponseStream"
                ]
            },
            "set_data": {
                "value": [],
                "return": [
                    "None"
                ]
            },
            "freeze": {
                "return": [
                    "None"
                ]
            },
            "iter_encoded": {
                "return": []
            }
        },
        "ResponseStream": {
            "__init__": {
                "response": []
            },
            "flush": {
                "return": []
            },
            "isatty": {
                "return": []
            },
            "write": {
                "value": [],
                "return": [
                    "int"
                ]
            },
            "tell": {
                "return": [
                    "int"
                ]
            },
            "writelines": {
                "seq": [
                    "Iterable"
                ],
                "return": [
                    "None"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_iter_encoded": {
                "iterable": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            }
        }
    },
    "werkzeug.wsgi": {
        "ClosingIterator": {
            "__init__": {
                "return": [],
                "callbacks": [],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "__iter__": {
                "return": []
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__next__": {
                "return": [
                    "Iterator"
                ]
            }
        },
        "FileWrapper": {
            "__init__": {
                "buffer_size": [],
                "file": [
                    "str",
                    "pathlib.Path",
                    "io.IOBase"
                ],
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": []
            },
            "__next__": {
                "return": [
                    "typing.Any",
                    "data"
                ]
            },
            "close": {
                "return": []
            },
            "seek": {
                "args": [],
                "return": [
                    "None"
                ]
            },
            "tell": {
                "return": [
                    "Optional[int]",
                    "typing.Optional[int]"
                ]
            },
            "seekable": {
                "return": [
                    "bool"
                ]
            }
        },
        "LimitedStream": {
            "__init__": {
                "return": [
                    "None"
                ],
                "is_max": [],
                "limit": [],
                "stream": [
                    "typing.IO"
                ]
            },
            "on_disconnect": {
                "error": [
                    "typing.Optional[Exception]",
                    "typing.Optional[typing.Any]",
                    "typing.Union[Exception, None]"
                ],
                "return": [
                    "None"
                ]
            },
            "on_exhausted": {
                "return": [
                    "None"
                ]
            },
            "readable": {
                "return": []
            },
            "readall": {
                "return": []
            },
            "readinto": {
                "return": [],
                "b": []
            },
            "tell": {
                "return": [
                    "int"
                ]
            },
            "exhaust": {
                "return": []
            }
        },
        "_RangeWrapper": {
            "__init__": {
                "byte_range": [
                    "Optional[int]"
                ],
                "start_byte": [],
                "iterable": []
            },
            "_first_iteration": {
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator",
                    "ClassName",
                    "self",
                    "Self",
                    "MyClass",
                    "Iterator"
                ]
            },
            "_next_chunk": {
                "return": [
                    "bytes",
                    "typing.Any",
                    "typing.Iterator"
                ]
            },
            "_next": {
                "return": []
            },
            "__next__": {
                "return": [
                    "typing.Any"
                ]
            },
            "close": {
                "return": []
            }
        },
        "global": {
            "_get_server": {
                "environ": [],
                "return": [
                    "typing.Optional[typing.Tuple[str, int]]"
                ]
            },
            "get_content_length": {
                "environ": [
                    "MutableMapping[str, str]"
                ],
                "return": []
            },
            "get_current_url": {
                "environ": [
                    "dict",
                    "dict[str, str]"
                ],
                "return": [],
                "root_only": [
                    "bool"
                ],
                "host_only": [],
                "trusted_hosts": [],
                "strip_querystring": [
                    "bool"
                ]
            },
            "get_input_stream": {
                "environ": [],
                "max_content_length": [
                    "typing.Optional[int]"
                ],
                "safe_fallback": [
                    "bool"
                ],
                "return": [
                    "typing.IO[bytes]"
                ]
            },
            "get_host": {
                "environ": [
                    "dict"
                ],
                "return": [
                    "str"
                ],
                "trusted_hosts": [
                    "Optional[list[str]]",
                    "Optional[Any]"
                ]
            },
            "get_path_info": {
                "return": [
                    "str"
                ],
                "environ": [
                    "dict[str, typing.Any]",
                    "dict[str, str]",
                    "dict",
                    "Environ"
                ]
            },
            "responder": {
                "f": [],
                "return": [
                    "typing.Callable",
                    "Callable",
                    "typing.Any"
                ]
            },
            "wrap_file": {
                "buffer_size": [
                    "int"
                ],
                "environ": [],
                "file": [
                    "IOBase",
                    "Any",
                    "file",
                    "TextIOBase",
                    "BufferedIOBase",
                    "io",
                    "object"
                ],
                "return": []
            }
        }
    }
}