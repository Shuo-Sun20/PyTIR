{
    "urllib3.connectionpool": {
        "HTTPConnectionPool": {
            "global": {
                "ConnectionCls": [
                    "typing.Type"
                ]
            },
            "urlopen": {
                "return": [
                    "Response"
                ],
                "assert_same_host": [
                    "bool"
                ],
                "body": [
                    "typing.Optional[typing.IO]"
                ],
                "body_pos": [
                    "typing.Optional[int]"
                ],
                "chunked": [
                    "bool"
                ],
                "decode_content": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "method": [
                    "str"
                ],
                "pool_timeout": [
                    "typing.Optional[int]"
                ],
                "preload_content": [
                    "bool"
                ],
                "redirect": [
                    "bool"
                ],
                "release_conn": [
                    "typing.Optional[bool]"
                ],
                "response_kw": [
                    "dict"
                ],
                "retries": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ],
                "url": [
                    "str"
                ]
            },
            "_make_request": {
                "return": [
                    "requests.Response"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "chunked": [
                    "bool"
                ],
                "conn": [
                    "Connection"
                ],
                "decode_content": [
                    "bool"
                ],
                "enforce_content_length": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "method": [
                    "str"
                ],
                "preload_content": [
                    "bool"
                ],
                "response_conn": [
                    "typing.Optional[typing.IO]"
                ],
                "retries": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "int"
                ],
                "url": [
                    "str"
                ]
            },
            "__init__": {
                "_proxy": [
                    "typing.Optional[str]"
                ],
                "_proxy_config": [
                    "dict[str, str]"
                ],
                "_proxy_headers": [
                    "dict[str, str]"
                ],
                "block": [
                    "bool"
                ],
                "conn_kw": [
                    "dict[str, typing.Any]"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "host": [
                    "str"
                ],
                "maxsize": [
                    "int"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "retries": [
                    "Retry"
                ],
                "timeout": [
                    "typing.Optional[float]"
                ]
            },
            "_get_conn": {
                "return": [
                    "Connection"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ]
            },
            "_put_conn": {
                "return": [
                    "None"
                ],
                "conn": [
                    "Connection"
                ]
            },
            "is_same_host": {
                "return": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "_raise_timeout": {
                "return": [
                    "None"
                ],
                "err": [
                    "Exception"
                ],
                "timeout_value": [
                    "int"
                ],
                "url": [
                    "str"
                ]
            },
            "_new_conn": {
                "return": [
                    "Connection"
                ]
            },
            "_get_timeout": {
                "return": [
                    "Timeout"
                ],
                "timeout": [
                    "typing.Union[float,Timeout]"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "_prepare_proxy": {
                "return": [
                    "None"
                ],
                "conn": [
                    "Connection"
                ]
            },
            "_validate_conn": {
                "return": [
                    "None"
                ],
                "conn": [
                    "Connection"
                ]
            }
        },
        "HTTPSConnectionPool": {
            "global": {
                "ConnectionCls": [
                    "typing.Type"
                ]
            },
            "_new_conn": {
                "return": [
                    "Connection"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "_proxy": [
                    "typing.Optional[dict[str, str]]"
                ],
                "_proxy_headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "assert_fingerprint": [
                    "typing.Optional[bool]"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "block": [
                    "bool"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[list[str]]"
                ],
                "cert_file": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "conn_kw": [
                    "dict"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "host": [
                    "str"
                ],
                "key_file": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "typing.Optional[str]"
                ],
                "maxsize": [
                    "int"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "retries": [
                    "typing.Optional[int]"
                ],
                "ssl_maximum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_version": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "int"
                ]
            },
            "_validate_conn": {
                "return": [
                    "None"
                ],
                "conn": [
                    "Connection"
                ]
            },
            "_prepare_proxy": {
                "return": [
                    "None"
                ],
                "conn": [
                    "Connection"
                ]
            }
        },
        "ConnectionPool": {
            "global": {
                "scheme": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "host": [
                    "typing.Optional[str]"
                ],
                "port": [
                    "typing.Optional[int]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]"
                ],
                "exc_type": [
                    "typing.Optional[typing.Type]"
                ],
                "exc_val": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "__enter__": {
                "return": [
                    "Config"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "connection_from_url": {
                "return": [
                    "ConnectionPool"
                ],
                "kw": [
                    "dict"
                ],
                "url": [
                    "str"
                ]
            },
            "_close_pool_connections": {
                "return": [
                    "None"
                ],
                "pool": [
                    "asyncio.Queue"
                ]
            },
            "_url_from_pool": {
                "return": [
                    "str"
                ],
                "path": [
                    "typing.Optional[str]"
                ],
                "pool": [
                    "Pool"
                ]
            }
        }
    },
    "urllib3.connection": {
        "HTTPConnection": {
            "global": {
                "_has_connected_to_proxy": [
                    "bool"
                ],
                "default_socket_options": [
                    "list[tuple[typing.Union[int,int,int]]]"
                ],
                "_response_options": [
                    "None"
                ],
                "proxy_is_verified": [
                    "None"
                ],
                "_tunnel_scheme": [
                    "str"
                ],
                "socket_options": [
                    "list[tuple[typing.Union[int,int,int]]]"
                ],
                "source_address": [
                    "str"
                ],
                "_tunnel_host": [
                    "str"
                ],
                "_tunnel_port": [
                    "typing.Optional[int]"
                ],
                "default_port": [
                    "int"
                ],
                "is_verified": [
                    "str"
                ],
                "blocksize": [
                    "int"
                ]
            },
            "request": {
                "return": [
                    "None"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "chunked": [
                    "bool"
                ],
                "decode_content": [
                    "bool"
                ],
                "enforce_content_length": [
                    "bool"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "method": [
                    "str"
                ],
                "preload_content": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "getresponse": {
                "return": [
                    "HTTPResponse"
                ]
            },
            "_tunnel": {
                "return": [
                    "None"
                ]
            },
            "_new_conn": {
                "return": [
                    "socket.socket"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "blocksize": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "proxy": [
                    "typing.Optional[str]"
                ],
                "proxy_config": [
                    "dict[str, str]"
                ],
                "socket_options": [
                    "SocketOptions"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "timeout": [
                    "float"
                ]
            },
            "putheader": {
                "return": [
                    "None"
                ],
                "header": [
                    "str"
                ],
                "values": [
                    "str"
                ]
            },
            "putrequest": {
                "return": [
                    "requests.Response"
                ],
                "method": [
                    "str"
                ],
                "skip_accept_encoding": [
                    "bool"
                ],
                "skip_host": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "request_chunked": {
                "return": [
                    "Response"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            },
            "set_tunnel": {
                "return": [
                    "None"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "connect": {
                "return": [
                    "None"
                ]
            },
            "_wrap_ipv6": {
                "return": [
                    "bytes"
                ],
                "ip": [
                    "bytes"
                ]
            }
        },
        "HTTPSConnection": {
            "global": {
                "ssl_maximum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[int]"
                ],
                "assert_fingerprint": [
                    "None"
                ],
                "_connect_callback": [
                    "typing.Optional[typing.Callable]"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ssl_version": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[str]"
                ]
            },
            "connect": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "assert_fingerprint": [
                    "typing.Optional[bool]"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "blocksize": [
                    "int"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[str]"
                ],
                "cert_file": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "str"
                ],
                "key_file": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "typing.Optional[str]"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "proxy": [
                    "typing.Optional[dict[str, str]]"
                ],
                "proxy_config": [
                    "typing.Optional[dict[str, str]]"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "socket_options": [
                    "SocketOptions"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "ssl_maximum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_version": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "int"
                ]
            },
            "set_cert": {
                "return": [
                    "None"
                ],
                "assert_fingerprint": [
                    "typing.Optional[bool]"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[str]"
                ],
                "cert_file": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "key_file": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "typing.Optional[str]"
                ]
            },
            "_connect_tls_proxy": {
                "return": [
                    "socket.socket"
                ],
                "hostname": [
                    "str"
                ],
                "sock": [
                    "socket.socket"
                ]
            }
        },
        "global": {
            "_ssl_wrap_socket_and_match_hostname": {
                "return": [
                    "socket.socket"
                ],
                "assert_fingerprint": [
                    "bool"
                ],
                "assert_hostname": [
                    "bool"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[list[str]]"
                ],
                "cert_file": [
                    "str"
                ],
                "cert_reqs": [
                    "str"
                ],
                "key_file": [
                    "str"
                ],
                "key_password": [
                    "str"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "sock": [
                    "socket.socket"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "ssl_maximum_version": [
                    "int"
                ],
                "ssl_minimum_version": [
                    "int"
                ],
                "ssl_version": [
                    "str"
                ],
                "tls_in_tls": [
                    "bool"
                ]
            },
            "_wrap_proxy_error": {
                "return": [
                    "ProxyError"
                ],
                "err": [
                    "Exception"
                ],
                "proxy_scheme": [
                    "str"
                ]
            },
            "_match_hostname": {
                "return": [
                    "None"
                ],
                "asserted_hostname": [
                    "str"
                ],
                "cert": [
                    "Certificate"
                ],
                "hostname_checks_common_name": [
                    "bool"
                ]
            },
            "_url_from_connection": {
                "return": [
                    "str"
                ],
                "conn": [
                    "Connection"
                ],
                "path": [
                    "typing.Optional[str]"
                ]
            },
            "_get_default_user_agent": {
                "return": [
                    "str"
                ]
            }
        },
        "_WrappedAndVerifiedSocket": {
            "global": {
                "is_verified": [
                    "bool"
                ],
                "socket": [
                    "typing.Type"
                ]
            }
        }
    },
    "urllib3.util.retry": {
        "Retry": {
            "global": {
                "DEFAULT": [
                    "Retry"
                ]
            },
            "increment": {
                "return": [
                    "None"
                ],
                "_pool": [
                    "Pool"
                ],
                "_stacktrace": [
                    "TracebackType"
                ],
                "error": [
                    "typing.Optional[Exception]"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "response": [
                    "typing.Optional[requests.models.Response]"
                ],
                "url": [
                    "typing.Optional[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "allowed_methods": [
                    "set[str]"
                ],
                "backoff_factor": [
                    "int"
                ],
                "backoff_jitter": [
                    "float"
                ],
                "backoff_max": [
                    "int"
                ],
                "connect": [
                    "typing.Optional[str]"
                ],
                "history": [
                    "typing.Optional[typing.Iterable[str]]"
                ],
                "other": [
                    "typing.Optional[str]"
                ],
                "raise_on_redirect": [
                    "bool"
                ],
                "raise_on_status": [
                    "bool"
                ],
                "read": [
                    "typing.Optional[str]"
                ],
                "redirect": [
                    "typing.Optional[int]"
                ],
                "remove_headers_on_redirect": [
                    "list[str]"
                ],
                "respect_retry_after_header": [
                    "bool"
                ],
                "status": [
                    "typing.Optional[int]"
                ],
                "status_forcelist": [
                    "typing.Optional[set[str]]"
                ],
                "total": [
                    "int"
                ]
            },
            "new": {
                "return": [
                    "Response"
                ],
                "kw": [
                    "dict"
                ]
            },
            "parse_retry_after": {
                "return": [
                    "float"
                ],
                "retry_after": [
                    "str"
                ]
            },
            "get_backoff_time": {
                "return": [
                    "float"
                ]
            },
            "from_int": {
                "return": [
                    "Retry"
                ],
                "default": [
                    "int"
                ],
                "redirect": [
                    "bool"
                ],
                "retries": [
                    "typing.Optional[int]"
                ]
            },
            "is_retry": {
                "return": [
                    "bool"
                ],
                "has_retry_after": [
                    "bool"
                ],
                "method": [
                    "str"
                ],
                "status_code": [
                    "int"
                ]
            },
            "is_exhausted": {
                "return": [
                    "bool"
                ]
            },
            "sleep": {
                "return": [
                    "None"
                ],
                "response": [
                    "typing.Optional[requests.models.Response]"
                ]
            },
            "get_retry_after": {
                "return": [
                    "typing.Optional[int]"
                ],
                "response": [
                    "requests.Response"
                ]
            },
            "sleep_for_retry": {
                "return": [
                    "bool"
                ],
                "response": [
                    "Response"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_is_connection_error": {
                "return": [
                    "bool"
                ],
                "err": [
                    "Exception"
                ]
            },
            "_is_method_retryable": {
                "return": [
                    "bool"
                ],
                "method": [
                    "str"
                ]
            },
            "_sleep_backoff": {
                "return": [
                    "None"
                ]
            },
            "_is_read_error": {
                "return": [
                    "bool"
                ],
                "err": [
                    "Exception"
                ]
            }
        },
        "RequestHistory": {
            "global": {
                "redirect_location": [
                    "str"
                ],
                "method": [
                    "RequestHistory"
                ],
                "status": [
                    "int"
                ],
                "error": [
                    "Exception"
                ],
                "url": [
                    "str"
                ]
            }
        }
    },
    "urllib3.poolmanager": {
        "PoolManager": {
            "global": {
                "proxy_config": [
                    "None"
                ],
                "proxy": [
                    "None"
                ]
            },
            "urlopen": {
                "return": [
                    "requests.Response"
                ],
                "kw": [
                    "dict"
                ],
                "method": [
                    "str"
                ],
                "redirect": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "connection_pool_kw": [
                    "dict[str, typing.Any]"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "num_pools": [
                    "int"
                ]
            },
            "connection_from_context": {
                "return": [
                    "Connection"
                ],
                "request_context": [
                    "dict"
                ]
            },
            "_new_pool": {
                "return": [
                    "Pool"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "request_context": [
                    "dict[str, typing.Any]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "connection_from_host": {
                "return": [
                    "Connection"
                ],
                "host": [
                    "str"
                ],
                "pool_kwargs": [
                    "dict"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "connection_from_pool_key": {
                "return": [
                    "Pool"
                ],
                "pool_key": [
                    "str"
                ],
                "request_context": [
                    "dict"
                ]
            },
            "_merge_pool_kwargs": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "override": [
                    "dict[str, typing.Any]"
                ]
            },
            "_proxy_requires_url_absolute_form": {
                "return": [
                    "bool"
                ],
                "parsed_url": [
                    "urllib.parse.ParsedURL"
                ]
            },
            "connection_from_url": {
                "return": [
                    "Connection"
                ],
                "pool_kwargs": [
                    "dict"
                ],
                "url": [
                    "str"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]"
                ],
                "exc_type": [
                    "typing.Optional[typing.Type]"
                ],
                "exc_val": [
                    "typing.Optional[Exception]"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            },
            "__enter__": {
                "return": [
                    "Config"
                ]
            }
        },
        "ProxyManager": {
            "__init__": {
                "return": [
                    "None"
                ],
                "connection_pool_kw": [
                    "dict[str, typing.Any]"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "num_pools": [
                    "int"
                ],
                "proxy_assert_fingerprint": [
                    "typing.Optional[str]"
                ],
                "proxy_assert_hostname": [
                    "typing.Optional[str]"
                ],
                "proxy_headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "proxy_ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "proxy_url": [
                    "typing.Union[str,HTTPConnectionPool]"
                ],
                "use_forwarding_for_https": [
                    "bool"
                ]
            },
            "urlopen": {
                "return": [
                    "typing.Optional[typing.IO]"
                ],
                "kw": [
                    "dict"
                ],
                "method": [
                    "str"
                ],
                "redirect": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "connection_from_host": {
                "return": [
                    "Connection"
                ],
                "host": [
                    "str"
                ],
                "pool_kwargs": [
                    "dict"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "_set_proxy_headers": {
                "return": [
                    "dict[str, str]"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "global": {
            "_default_key_normalizer": {
                "return": [
                    "Key"
                ],
                "key_class": [
                    "typing.Type"
                ],
                "request_context": [
                    "dict"
                ]
            },
            "proxy_from_url": {
                "return": [
                    "ProxyManager"
                ],
                "kw": [
                    "dict"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "PoolKey": {
            "global": {
                "key_ssl_maximum_version": [
                    "int"
                ],
                "key_ssl_minimum_version": [
                    "int"
                ],
                "key_assert_fingerprint": [
                    "str"
                ],
                "key_assert_hostname": [
                    "str"
                ],
                "key_server_hostname": [
                    "str"
                ],
                "key__proxy_headers": [
                    "dict[str, typing.Any]"
                ],
                "key__socks_options": [
                    "str"
                ],
                "key_socket_options": [
                    "dict[str, typing.Any]"
                ],
                "key_source_address": [
                    "str"
                ],
                "key__proxy_config": [
                    "str"
                ],
                "key_ca_cert_data": [
                    "str"
                ],
                "key_key_password": [
                    "str"
                ],
                "key_ca_cert_dir": [
                    "str"
                ],
                "key_ssl_context": [
                    "SSLContext"
                ],
                "key_ssl_version": [
                    "str"
                ],
                "key_blocksize": [
                    "int"
                ],
                "key_cert_file": [
                    "str"
                ],
                "key_cert_reqs": [
                    "str"
                ],
                "key_ca_certs": [
                    "str"
                ],
                "key_key_file": [
                    "str"
                ],
                "key_headers": [
                    "dict[str, typing.Any]"
                ],
                "key_maxsize": [
                    "int"
                ],
                "key_retries": [
                    "int"
                ],
                "key_timeout": [
                    "int"
                ],
                "key__proxy": [
                    "PoolKey"
                ],
                "key_scheme": [
                    "str"
                ],
                "key_block": [
                    "PoolKey"
                ],
                "key_host": [
                    "str"
                ],
                "key_port": [
                    "int"
                ]
            }
        }
    },
    "urllib3._collections": {
        "HTTPHeaderDict": {
            "global": {
                "_container": [
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "extend": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Union[HTTPHeaderDict,tuple]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "combine": [
                    "bool"
                ],
                "key": [
                    "str"
                ],
                "val": [
                    "str"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "HTTPHeader"
                ]
            },
            "__init__": {
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "_prepare_for_method_change": {
                "return": [
                    "Request"
                ]
            },
            "__ror__": {
                "return": [
                    "list[HTTPHeader]"
                ],
                "other": [
                    "HTTPHeader"
                ]
            },
            "__or__": {
                "return": [
                    "HTTPHeaders"
                ],
                "other": [
                    "HTTPHeader"
                ]
            },
            "__ior__": {
                "return": [
                    "HTTPHeaders"
                ],
                "other": [
                    "HTTPHeader"
                ]
            },
            "_has_value_for_header": {
                "return": [
                    "bool"
                ],
                "header_name": [
                    "str"
                ],
                "potential_value": [
                    "str"
                ]
            },
            "iteritems": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "val": [
                    "str"
                ]
            },
            "_copy_from": {
                "return": [
                    "None"
                ],
                "other": [
                    "dict"
                ]
            },
            "itermerged": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "discard": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "copy": {
                "return": [
                    "Product"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "setdefault": {
                "return": [
                    "str"
                ],
                "default": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "__ne__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[str,int]"
                ]
            },
            "items": {
                "return": [
                    "HeaderDictItemView"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            }
        },
        "RecentlyUsedContainer": {
            "global": {
                "dispose_func": [
                    "typing.Optional[typing.Callable[_VT, None]]"
                ],
                "_container": [
                    "dict[typing.Any, typing.Any]"
                ],
                "_maxsize": [
                    "int"
                ],
                "lock": [
                    "RLock"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "dispose_func": [
                    "typing.Optional[typing.Callable]"
                ],
                "maxsize": [
                    "int"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "int"
                ]
            },
            "__getitem__": {
                "return": [
                    "Item"
                ],
                "key": [
                    "int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "keys": {
                "return": [
                    "set[str]"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            }
        },
        "HTTPHeaderDictItemView": {
            "global": {
                "_headers": [
                    "dict[str, str]"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "item": [
                    "typing.Union[str,tuple[typing.Union[str,str]]]"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "headers": [
                    "dict[str, str]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "global": {
            "ensure_can_construct_http_header_dict": {
                "return": [
                    "typing.Optional[HTTPHeaderDict]"
                ],
                "potential": [
                    "typing.Union[HTTPHeaderDict, typing.Iterable[str]]"
                ]
            }
        },
        "HasGettableStringKeys": {
            "__getitem__": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "keys": {
                "return": [
                    "list[str]"
                ]
            }
        }
    },
    "urllib3.response": {
        "BaseHTTPResponse": {
            "global": {
                "DECODER_ERROR_CLASSES": [
                    "tuple[typing.Type]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "decode_content": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "reason": [
                    "str"
                ],
                "request_url": [
                    "str"
                ],
                "retries": [
                    "typing.Optional[int]"
                ],
                "status": [
                    "int"
                ],
                "version": [
                    "str"
                ],
                "version_string": [
                    "str"
                ]
            },
            "_decode": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ],
                "decode_content": [
                    "bool"
                ],
                "flush_decoder": [
                    "bool"
                ]
            },
            "_init_decoder": {
                "return": [
                    "MessageDecoder"
                ]
            },
            "getheader": {
                "return": [
                    "typing.Optional[str]"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "getheaders": {
                "return": [
                    "dict[str, str]"
                ]
            },
            "readinto": {
                "return": [
                    "int"
                ],
                "b": [
                    "bytes"
                ]
            },
            "get_redirect_location": {
                "return": [
                    "typing.Optional[str]"
                ]
            },
            "_flush_decoder": {
                "return": [
                    "bytes"
                ]
            },
            "read": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "int"
                ],
                "cache_content": [
                    "bool"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "read_chunked": {
                "return": [
                    "typing.Iterator"
                ],
                "amt": [
                    "int"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "stream": {
                "return": [
                    "typing.Iterator"
                ],
                "amt": [
                    "int"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "json": {
                "return": [
                    "dict"
                ]
            },
            "read1": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "int"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "release_conn": {
                "return": [
                    "None"
                ]
            },
            "drain_conn": {
                "return": [
                    "None"
                ]
            },
            "shutdown": {
                "return": [
                    "None"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "info": {
                "return": [
                    "dict[str, str]"
                ]
            },
            "geturl": {
                "return": [
                    "str"
                ]
            }
        },
        "HTTPResponse": {
            "read_chunked": {
                "return": [
                    "typing.Iterator"
                ],
                "amt": [
                    "typing.Optional[int]"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "read": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "typing.Optional[int]"
                ],
                "cache_content": [
                    "bool"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "auto_close": [
                    "bool"
                ],
                "body": [
                    "typing.Optional[bytes]"
                ],
                "connection": [
                    "Connection"
                ],
                "decode_content": [
                    "bool"
                ],
                "enforce_content_length": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "msg": [
                    "typing.Optional[str]"
                ],
                "original_response": [
                    "typing.Optional[typing.Any]"
                ],
                "pool": [
                    "typing.Optional[typing.Any]"
                ],
                "preload_content": [
                    "bool"
                ],
                "reason": [
                    "typing.Optional[str]"
                ],
                "request_method": [
                    "typing.Optional[str]"
                ],
                "request_url": [
                    "typing.Optional[str]"
                ],
                "retries": [
                    "int"
                ],
                "sock_shutdown": [
                    "typing.Optional[int]"
                ],
                "status": [
                    "int"
                ],
                "version": [
                    "int"
                ],
                "version_string": [
                    "str"
                ]
            },
            "_error_catcher": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "read1": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "typing.Optional[int]"
                ],
                "decode_content": [
                    "bool"
                ]
            },
            "_init_length": {
                "return": [
                    "typing.Optional[int]"
                ],
                "request_method": [
                    "str"
                ]
            },
            "_fp_read": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "typing.Optional[int]"
                ],
                "read1": [
                    "bool"
                ]
            },
            "_raw_read": {
                "return": [
                    "typing.Optional[bytes]"
                ],
                "amt": [
                    "typing.Optional[int]"
                ],
                "read1": [
                    "bool"
                ]
            },
            "_handle_chunk": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_update_chunk_length": {
                "return": [
                    "None"
                ]
            },
            "stream": {
                "return": [
                    "typing.Iterator"
                ],
                "amt": [
                    "int"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "shutdown": {
                "return": [
                    "None"
                ]
            },
            "fileno": {
                "return": [
                    "int"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "release_conn": {
                "return": [
                    "None"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            },
            "drain_conn": {
                "return": [
                    "None"
                ]
            },
            "supports_chunked_reads": {
                "return": [
                    "bool"
                ]
            },
            "isclosed": {
                "return": [
                    "bool"
                ]
            },
            "tell": {
                "return": [
                    "int"
                ]
            },
            "readable": {
                "return": [
                    "bool"
                ]
            }
        },
        "BytesQueueBuffer": {
            "get": {
                "return": [
                    "bytes"
                ],
                "n": [
                    "int"
                ]
            },
            "get_all": {
                "return": [
                    "bytes"
                ]
            },
            "put": {
                "return": [
                    "None"
                ],
                "data": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            }
        },
        "GzipDecoder": {
            "decompress": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            }
        },
        "DeflateDecoder": {
            "decompress": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            }
        },
        "ZstdDecoder": {
            "decompress": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            },
            "flush": {
                "return": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_get_decoder": {
                "return": [
                    "Decoder"
                ],
                "mode": [
                    "str"
                ]
            }
        },
        "BrotliDecoder": {
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "flush": {
                "return": [
                    "bytes"
                ]
            }
        },
        "MultiDecoder": {
            "decompress": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "modes": [
                    "str"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            }
        },
        "ContentDecoder": {
            "decompress": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "urllib3.util.timeout": {
        "Timeout": {
            "global": {
                "DEFAULT_TIMEOUT": [
                    "int"
                ]
            },
            "_validate_timeout": {
                "return": [
                    "typing.Optional[float]"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "typing.Optional[float]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "connect": [
                    "int"
                ],
                "read": [
                    "int"
                ],
                "total": [
                    "typing.Optional[int]"
                ]
            },
            "start_connect": {
                "return": [
                    "float"
                ]
            },
            "get_connect_duration": {
                "return": [
                    "float"
                ]
            },
            "resolve_default_timeout": {
                "return": [
                    "float"
                ],
                "timeout": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "clone": {
                "return": [
                    "Timeout"
                ]
            },
            "from_float": {
                "return": [
                    "Timeout"
                ],
                "timeout": [
                    "float"
                ]
            }
        },
        "global": {
            "global": {
                "_DEFAULT_TIMEOUT": [
                    "typing.Optional[str]"
                ]
            }
        }
    },
    "urllib3.util.ssl_": {
        "global": {
            "create_urllib3_context": {
                "return": [
                    "SSLContext"
                ],
                "cert_reqs": [
                    "typing.Optional[int]"
                ],
                "ciphers": [
                    "list[str]"
                ],
                "options": [
                    "typing.Optional[int]"
                ],
                "ssl_maximum_version": [
                    "typing.Optional[tls.TLSVersion]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[tls.TLSVersion]"
                ],
                "ssl_version": [
                    "typing.Optional[str]"
                ],
                "verify_flags": [
                    "typing.Optional[int]"
                ]
            },
            "global": {
                "_SSL_VERSION_TO_TLS_VERSION": [
                    "dict[typing.Any, typing.Any]"
                ]
            },
            "assert_fingerprint": {
                "return": [
                    "None"
                ],
                "cert": [
                    "typing.Optional[x509.Certificate]"
                ],
                "fingerprint": [
                    "str"
                ]
            },
            "_ssl_wrap_socket_impl": {
                "return": [
                    "socket.socket"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "sock": [
                    "socket.socket"
                ],
                "ssl_context": [
                    "SSLContext"
                ],
                "tls_in_tls": [
                    "bool"
                ]
            },
            "_is_has_never_check_common_name_reliable": {
                "return": [
                    "bool"
                ],
                "implementation_name": [
                    "str"
                ],
                "openssl_version": [
                    "str"
                ],
                "openssl_version_number": [
                    "int"
                ],
                "pypy_version_info": [
                    "dict[str, str]"
                ],
                "version_info": [
                    "dict[str, str]"
                ]
            },
            "_is_bpo_43522_fixed": {
                "return": [
                    "bool"
                ],
                "implementation_name": [
                    "str"
                ],
                "pypy_version_info": [
                    "tuple[typing.Union[int,int,int]]"
                ],
                "version_info": [
                    "tuple[typing.Union[int,...]]"
                ]
            },
            "resolve_ssl_version": {
                "return": [
                    "typing.Union[int,str]"
                ],
                "candidate": [
                    "typing.Optional[str]"
                ]
            },
            "resolve_cert_reqs": {
                "return": [
                    "str"
                ],
                "candidate": [
                    "typing.Optional[str]"
                ]
            },
            "is_ipaddress": {
                "return": [
                    "bool"
                ],
                "hostname": [
                    "str"
                ]
            },
            "_is_key_file_encrypted": {
                "return": [
                    "bool"
                ],
                "key_file": [
                    "str"
                ]
            }
        },
        "_TYPE_PEER_CERT_RET_DICT": {
            "global": {
                "subjectAltName": [
                    "str"
                ],
                "serialNumber": [
                    "str"
                ],
                "subject": [
                    "str"
                ]
            }
        }
    },
    "urllib3.contrib.pyopenssl": {
        "global": {
            "global": {
                "_openssl_to_ssl_maximum_version": [
                    "int"
                ],
                "_openssl_to_ssl_minimum_version": [
                    "int"
                ],
                "_OP_NO_SSLv2_OR_SSLv3": [
                    "int"
                ],
                "_openssl_versions": [
                    "dict[str, int]"
                ],
                "_OP_NO_TLSv1_1": [
                    "int"
                ],
                "_OP_NO_TLSv1_2": [
                    "int"
                ],
                "_OP_NO_TLSv1_3": [
                    "int"
                ],
                "_OP_NO_TLSv1": [
                    "int"
                ]
            },
            "get_subj_alt_name": {
                "return": [
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "peer_cert": [
                    "Certificate"
                ]
            },
            "_dnsname_to_stdlib": {
                "return": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "_validate_dependencies_met": {
                "return": [
                    "None"
                ]
            },
            "inject_into_urllib3": {
                "return": [
                    "None"
                ]
            },
            "extract_from_urllib3": {
                "return": [
                    "None"
                ]
            },
            "_verify_callback": {
                "return": [
                    "bool"
                ],
                "cnx": [
                    "str"
                ],
                "err_depth": [
                    "int"
                ],
                "err_no": [
                    "int"
                ],
                "return_code": [
                    "int"
                ],
                "x509": [
                    "X509"
                ]
            }
        },
        "PyOpenSSLContext": {
            "wrap_socket": {
                "return": [
                    "WrappedSocket"
                ],
                "do_handshake_on_connect": [
                    "bool"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "server_side": [
                    "bool"
                ],
                "sock": [
                    "socket.socket"
                ],
                "suppress_ragged_eofs": [
                    "bool"
                ]
            },
            "load_cert_chain": {
                "return": [
                    "None"
                ],
                "certfile": [
                    "str"
                ],
                "keyfile": [
                    "typing.Optional[str]"
                ],
                "password": [
                    "typing.Optional[str]"
                ]
            },
            "load_verify_locations": {
                "return": [
                    "None"
                ],
                "cadata": [
                    "typing.Optional[bytes]"
                ],
                "cafile": [
                    "bytes"
                ],
                "capath": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "protocol": [
                    "str"
                ]
            },
            "_set_ctx_options": {
                "return": [
                    "None"
                ]
            },
            "set_alpn_protocols": {
                "return": [
                    "None"
                ],
                "protocols": [
                    "list[str]"
                ]
            },
            "set_ciphers": {
                "return": [
                    "None"
                ],
                "ciphers": [
                    "bytes"
                ]
            },
            "set_default_verify_paths": {
                "return": [
                    "None"
                ]
            }
        },
        "WrappedSocket": {
            "recv": {
                "return": [
                    "bytes"
                ],
                "args": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "recv_into": {
                "return": [
                    "int"
                ],
                "args": [
                    "tuple[typing.Union[int,...]]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "_send_until_done": {
                "return": [
                    "int"
                ],
                "data": [
                    "bytes"
                ]
            },
            "getpeercert": {
                "return": [
                    "dict"
                ],
                "binary_form": [
                    "bool"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "connection": [
                    "Connection"
                ],
                "socket": [
                    "socket.socket"
                ],
                "suppress_ragged_eofs": [
                    "bool"
                ]
            },
            "sendall": {
                "return": [
                    "None"
                ],
                "data": [
                    "bytes"
                ]
            },
            "shutdown": {
                "return": [
                    "None"
                ],
                "how": [
                    "int"
                ]
            },
            "selected_alpn_protocol": {
                "return": [
                    "typing.Optional[str]"
                ]
            },
            "_decref_socketios": {
                "return": [
                    "None"
                ]
            },
            "_real_close": {
                "return": [
                    "None"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "settimeout": {
                "return": [
                    "None"
                ],
                "timeout": [
                    "int"
                ]
            },
            "version": {
                "return": [
                    "str"
                ]
            },
            "fileno": {
                "return": [
                    "int"
                ]
            }
        }
    },
    "urllib3.contrib.emscripten.connection": {
        "EmscriptenHTTPConnection": {
            "global": {
                "default_socket_options": [
                    "SocketOptions"
                ],
                "proxy_is_verified": [
                    "None"
                ],
                "socket_options": [
                    "SocketOptions"
                ],
                "source_address": [
                    "str"
                ],
                "default_port": [
                    "int"
                ],
                "proxy_config": [
                    "dict[str, str]"
                ],
                "is_verified": [
                    "str"
                ],
                "_response": [
                    "typing.Optional[requests.models.Response]"
                ],
                "blocksize": [
                    "int"
                ],
                "timeout": [
                    "float"
                ],
                "proxy": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            },
            "request": {
                "return": [
                    "Response"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "chunked": [
                    "bool"
                ],
                "decode_content": [
                    "bool"
                ],
                "enforce_content_length": [
                    "bool"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "method": [
                    "str"
                ],
                "preload_content": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "blocksize": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "proxy": [
                    "typing.Optional[str]"
                ],
                "proxy_config": [
                    "typing.Optional[dict[str, str]]"
                ],
                "socket_options": [
                    "typing.Optional[dict[str, str]]"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "timeout": [
                    "typing.Union[float,int]"
                ]
            },
            "getresponse": {
                "return": [
                    "HttpResponse"
                ]
            },
            "set_tunnel": {
                "return": [
                    "None"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "scheme": [
                    "str"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "connect": {
                "return": [
                    "None"
                ]
            }
        },
        "EmscriptenHTTPSConnection": {
            "global": {
                "ssl_maximum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[int]"
                ],
                "assert_fingerprint": [
                    "None"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "str"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "ssl_version": [
                    "None"
                ],
                "cert_file": [
                    "str"
                ],
                "cert_reqs": [
                    "None"
                ],
                "ca_certs": [
                    "typing.Optional[str]"
                ],
                "key_file": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "assert_fingerprint": [
                    "typing.Optional[bool]"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "blocksize": [
                    "int"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[str]"
                ],
                "cert_file": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "str"
                ],
                "key_file": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "typing.Optional[str]"
                ],
                "port": [
                    "int"
                ],
                "proxy": [
                    "typing.Optional[dict[str, str]]"
                ],
                "proxy_config": [
                    "typing.Optional[dict[str, str]]"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "socket_options": [
                    "SocketOptions"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "ssl_maximum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_version": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "int"
                ]
            },
            "set_cert": {
                "return": [
                    "None"
                ],
                "assert_fingerprint": [
                    "typing.Optional[bool]"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[list[str]]"
                ],
                "cert_file": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "key_file": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "typing.Optional[str]"
                ]
            }
        },
        "global": {
            "global": {
                "_supports_https_protocol": [
                    "EmscriptenHTTPSConnection"
                ],
                "_supports_http_protocol": [
                    "EmscriptenHTTPConnection"
                ]
            }
        }
    },
    "urllib3.contrib.emscripten.fetch": {
        "_StreamingFetcher": {
            "send": {
                "return": [
                    "EmscriptenResponse"
                ],
                "request": [
                    "Request"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "send_request": {
                "return": [
                    "EmscriptenResponse"
                ],
                "request": [
                    "Request"
                ]
            },
            "send_jspi_request": {
                "return": [
                    "EmscriptenResponse"
                ],
                "request": [
                    "Request"
                ],
                "streaming": [
                    "bool"
                ]
            },
            "_show_streaming_warning": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "_fetcher": [
                    "None"
                ]
            },
            "_run_sync_with_timeout": {
                "return": [
                    "typing.Optional[pyodide.ffi.Promise]"
                ],
                "js_abort_controller": [
                    "_AbortController"
                ],
                "promise": [
                    "Promise"
                ],
                "request": [
                    "str"
                ],
                "response": [
                    "Response"
                ],
                "timeout": [
                    "float"
                ]
            },
            "send_streaming_request": {
                "return": [
                    "typing.Optional[bytes]"
                ],
                "request": [
                    "str"
                ]
            },
            "_show_timeout_warning": {
                "return": [
                    "None"
                ]
            },
            "is_in_node": {
                "return": [
                    "bool"
                ]
            },
            "has_jspi": {
                "return": [
                    "bool"
                ]
            },
            "wait_for_streaming_ready": {
                "return": [
                    "bool"
                ]
            },
            "_is_node_js": {
                "return": [
                    "bool"
                ]
            },
            "is_in_browser_main_thread": {
                "return": [
                    "bool"
                ]
            },
            "streaming_ready": {
                "return": [
                    "typing.Optional[bool]"
                ]
            },
            "is_cross_origin_isolated": {
                "return": [
                    "bool"
                ]
            },
            "_obj_from_dict": {
                "return": [
                    "Object"
                ],
                "dict_val": [
                    "dict"
                ]
            },
            "is_worker_available": {
                "return": [
                    "bool"
                ]
            }
        },
        "_ReadStream": {
            "readinto": {
                "return": [
                    "int"
                ],
                "byte_obj": [
                    "memoryview"
                ]
            },
            "__init__": {
                "byte_buffer": [
                    "bytes"
                ],
                "connection_id": [
                    "int"
                ],
                "int_buffer": [
                    "bytes"
                ],
                "request": [
                    "typing.Callable[..., typing.Any]"
                ],
                "timeout": [
                    "int"
                ],
                "worker": [
                    "int"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "is_closed": {
                "return": [
                    "bool"
                ]
            },
            "seekable": {
                "return": [
                    "bool"
                ]
            },
            "writable": {
                "return": [
                    "bool"
                ]
            },
            "__del__": {
                "return": [
                    "None"
                ]
            },
            "readable": {
                "return": [
                    "bool"
                ]
            }
        },
        "_JSPIReadStream": {
            "readinto": {
                "return": [
                    "int"
                ],
                "byte_obj": [
                    "bytes"
                ]
            },
            "__init__": {
                "js_abort_controller": [
                    "AbortController"
                ],
                "js_read_stream": [
                    "typing.IO"
                ],
                "request": [
                    "Request"
                ],
                "response": [
                    "Response"
                ],
                "timeout": [
                    "float"
                ]
            },
            "_get_next_buffer": {
                "return": [
                    "bool"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "is_closed": {
                "return": [
                    "bool"
                ]
            },
            "seekable": {
                "return": [
                    "bool"
                ]
            },
            "writable": {
                "return": [
                    "bool"
                ]
            },
            "__del__": {
                "return": [
                    "None"
                ]
            },
            "readable": {
                "return": [
                    "bool"
                ]
            }
        },
        "_RequestError": {
            "__init__": {
                "message": [
                    "typing.Optional[str]"
                ],
                "request": [
                    "typing.Optional[typing.Any]"
                ],
                "response": [
                    "typing.Optional[requests.models.Response]"
                ]
            }
        }
    },
    "urllib3.util.url": {
        "global": {
            "parse_url": {
                "return": [
                    "Url"
                ],
                "url": [
                    "str"
                ]
            },
            "_idna_encode": {
                "return": [
                    "bytes"
                ],
                "name": [
                    "str"
                ]
            },
            "_remove_path_dot_segments": {
                "return": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            },
            "_encode_target": {
                "return": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "Url": {
            "__new__": {
                "auth": [
                    "typing.Optional[str]"
                ],
                "fragment": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "typing.Optional[str]"
                ],
                "path": [
                    "typing.Optional[str]"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "query": [
                    "typing.Optional[str]"
                ],
                "scheme": [
                    "typing.Optional[str]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "urllib3.util.ssl_match_hostname": {
        "global": {
            "match_hostname": {
                "return": [
                    "None"
                ],
                "cert": [
                    "Certificate"
                ],
                "hostname": [
                    "str"
                ],
                "hostname_checks_common_name": [
                    "bool"
                ]
            },
            "_dnsname_match": {
                "return": [
                    "bool"
                ],
                "dn": [
                    "str"
                ],
                "hostname": [
                    "str"
                ],
                "max_wildcards": [
                    "int"
                ]
            },
            "_ipaddress_match": {
                "return": [
                    "bool"
                ],
                "host_ip": [
                    "ipaddress.IPv4Address"
                ],
                "ipname": [
                    "str"
                ]
            }
        }
    },
    "urllib3.http2.connection": {
        "HTTP2Connection": {
            "send": {
                "return": [
                    "None"
                ],
                "data": [
                    "typing.Union[str,bytes]"
                ]
            },
            "getresponse": {
                "return": [
                    "HTTP2Response"
                ]
            },
            "putrequest": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ]
            },
            "request": {
                "return": [
                    "None"
                ],
                "body": [
                    "bytes"
                ],
                "decode_content": [
                    "bool"
                ],
                "enforce_content_length": [
                    "bool"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "kwargs": [
                    "dict"
                ],
                "method": [
                    "str"
                ],
                "preload_content": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "putheader": {
                "return": [
                    "None"
                ],
                "header": [
                    "str"
                ],
                "values": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "host": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ],
                "port": [
                    "typing.Optional[int]"
                ]
            },
            "endheaders": {
                "return": [
                    "None"
                ],
                "message_body": [
                    "typing.Optional[bytes]"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "connect": {
                "return": [
                    "None"
                ]
            },
            "set_tunnel": {
                "return": [
                    "None"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "_new_h2_conn": {
                "return": [
                    "_LockedObject"
                ]
            }
        },
        "HTTP2Response": {
            "__init__": {
                "return": [
                    "None"
                ],
                "data": [
                    "bytes"
                ],
                "decode_content": [
                    "bool"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "request_url": [
                    "str"
                ],
                "status": [
                    "int"
                ]
            },
            "get_redirect_location": {
                "return": [
                    "typing.Optional[str]"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_is_illegal_header_value": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "_is_legal_header_name": {
                "return": [
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "_LockedObject": {
            "__init__": {
                "obj": [
                    "typing.Callable"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ],
                "exc_tb": [
                    "typing.Optional[types.TracebackType]"
                ],
                "exc_type": [
                    "typing.Optional[typing.Type]"
                ],
                "exc_val": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "__enter__": {
                "return": [
                    "Object"
                ]
            }
        }
    },
    "urllib3.contrib.socks": {
        "SOCKSConnection": {
            "_new_conn": {
                "return": [
                    "socket.socket"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "_socks_options": [
                    "dict[str, str]"
                ],
                "args": [
                    "tuple[typing.Union[str,...]]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "SOCKSProxyManager": {
            "__init__": {
                "connection_pool_kw": [
                    "dict[str, typing.Any]"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "num_pools": [
                    "int"
                ],
                "password": [
                    "typing.Optional[str]"
                ],
                "proxy_url": [
                    "str"
                ],
                "username": [
                    "typing.Optional[str]"
                ]
            }
        },
        "_TYPE_SOCKS_OPTIONS": {
            "global": {
                "socks_version": [
                    "int"
                ],
                "proxy_host": [
                    "str"
                ],
                "proxy_port": [
                    "int"
                ],
                "password": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "rdns": [
                    "typing.Type"
                ]
            }
        }
    },
    "urllib3.util.request": {
        "global": {
            "body_to_chunks": {
                "return": [
                    "ChunksAndContentLength"
                ],
                "blocksize": [
                    "int"
                ],
                "body": [
                    "typing.Optional[typing.IO]"
                ],
                "method": [
                    "str"
                ]
            },
            "make_headers": {
                "return": [
                    "dict[str, str]"
                ],
                "accept_encoding": [
                    "typing.Optional[str]"
                ],
                "basic_auth": [
                    "typing.Optional[str]"
                ],
                "disable_cache": [
                    "typing.Optional[bool]"
                ],
                "keep_alive": [
                    "typing.Optional[bool]"
                ],
                "proxy_basic_auth": [
                    "typing.Optional[str]"
                ],
                "user_agent": [
                    "typing.Optional[str]"
                ]
            },
            "global": {
                "_FAILEDTELL": [
                    "typing.Type"
                ]
            },
            "rewind_body": {
                "return": [
                    "None"
                ],
                "body": [
                    "typing.Optional[typing.IO]"
                ],
                "body_pos": [
                    "int"
                ]
            },
            "set_file_position": {
                "return": [
                    "int"
                ],
                "body": [
                    "typing.IO"
                ],
                "pos": [
                    "typing.Optional[int]"
                ]
            }
        },
        "ChunksAndContentLength": {
            "global": {
                "content_length": [
                    "int"
                ],
                "chunks": [
                    "list[typing.Any]"
                ]
            }
        }
    },
    "urllib3.util.connection": {
        "global": {
            "create_connection": {
                "return": [
                    "socket.socket"
                ],
                "address": [
                    "tuple[typing.Union[str,int]]"
                ],
                "socket_options": [
                    "typing.Optional[int]"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "timeout": [
                    "int"
                ]
            },
            "_has_ipv6": {
                "return": [
                    "bool"
                ],
                "host": [
                    "str"
                ]
            },
            "_set_socket_options": {
                "return": [
                    "None"
                ],
                "options": [
                    "typing.Optional[list[int]]"
                ],
                "sock": [
                    "socket.socket"
                ]
            },
            "allowed_gai_family": {
                "return": [
                    "int"
                ]
            },
            "is_connection_dropped": {
                "return": [
                    "bool"
                ],
                "conn": [
                    "Connection"
                ]
            }
        }
    },
    "urllib3.util.ssltransport": {
        "SSLTransport": {
            "makefile": {
                "return": [
                    "typing.IO"
                ],
                "buffering": [
                    "typing.Optional[int]"
                ],
                "encoding": [
                    "typing.Optional[str]"
                ],
                "errors": [
                    "typing.Optional[str]"
                ],
                "mode": [
                    "str"
                ],
                "newline": [
                    "typing.Optional[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "socket": [
                    "socket.socket"
                ],
                "ssl_context": [
                    "ssl.SSLContext"
                ],
                "suppress_ragged_eofs": [
                    "bool"
                ]
            },
            "sendall": {
                "return": [
                    "None"
                ],
                "data": [
                    "bytes"
                ],
                "flags": [
                    "int"
                ]
            },
            "_wrap_ssl_read": {
                "return": [
                    "int"
                ],
                "buffer": [
                    "typing.Optional[typing.IO]"
                ],
                "len": [
                    "int"
                ]
            },
            "_validate_ssl_context_for_tls_in_tls": {
                "return": [
                    "None"
                ],
                "ssl_context": [
                    "SSLContext"
                ]
            },
            "recv_into": {
                "return": [
                    "bytes"
                ],
                "buffer": [
                    "bytes"
                ],
                "flags": [
                    "int"
                ],
                "nbytes": [
                    "typing.Optional[int]"
                ]
            },
            "send": {
                "return": [
                    "bytes"
                ],
                "data": [
                    "bytes"
                ],
                "flags": [
                    "int"
                ]
            },
            "recv": {
                "return": [
                    "bytes"
                ],
                "buflen": [
                    "int"
                ],
                "flags": [
                    "int"
                ]
            },
            "read": {
                "return": [
                    "bytes"
                ],
                "buffer": [
                    "typing.Optional[typing.IO]"
                ],
                "len": [
                    "int"
                ]
            },
            "selected_alpn_protocol": {
                "return": [
                    "str"
                ]
            },
            "shared_ciphers": {
                "return": [
                    "list[str]"
                ]
            },
            "_decref_socketios": {
                "return": [
                    "None"
                ]
            },
            "settimeout": {
                "return": [
                    "None"
                ],
                "value": [
                    "int"
                ]
            },
            "compression": {
                "return": [
                    "str"
                ]
            },
            "unwrap": {
                "return": [
                    "None"
                ]
            },
            "gettimeout": {
                "return": [
                    "float"
                ]
            },
            "version": {
                "return": [
                    "str"
                ]
            },
            "cipher": {
                "return": [
                    "Cipher"
                ]
            },
            "fileno": {
                "return": [
                    "int"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ],
                "_": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__enter__": {
                "return": [
                    "Config"
                ]
            }
        }
    },
    "urllib3.contrib.emscripten.response": {
        "EmscriptenHttpResponseWrapper": {
            "read": {
                "return": [
                    "bytes"
                ],
                "amt": [
                    "typing.Optional[int]"
                ],
                "cache_content": [
                    "bool"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "_init_length": {
                "return": [
                    "typing.Optional[int]"
                ],
                "request_method": [
                    "str"
                ]
            },
            "_error_catcher": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__init__": {
                "connection": [
                    "Connection"
                ],
                "internal_response": [
                    "Response"
                ],
                "url": [
                    "str"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "stream": {
                "return": [
                    "typing.Iterator"
                ],
                "amt": [
                    "int"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "read_chunked": {
                "return": [
                    "typing.Iterator"
                ],
                "amt": [
                    "int"
                ],
                "decode_content": [
                    "typing.Optional[bool]"
                ]
            },
            "release_conn": {
                "return": [
                    "None"
                ]
            },
            "json": {
                "return": [
                    "dict"
                ]
            },
            "drain_conn": {
                "return": [
                    "None"
                ]
            }
        },
        "EmscriptenResponse": {
            "global": {
                "status_code": [
                    "int"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "request": [
                    "str"
                ],
                "body": [
                    "str"
                ]
            }
        }
    },
    "urllib3._request_methods": {
        "RequestMethods": {
            "request": {
                "return": [
                    "bytes"
                ],
                "body": [
                    "typing.Optional[bytes]"
                ],
                "fields": [
                    "typing.Optional[list[str]]"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "json": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "urlopen_kw": [
                    "dict"
                ]
            },
            "request_encode_body": {
                "return": [
                    "typing.Union[typing.IO,requests.Response]"
                ],
                "encode_multipart": [
                    "bool"
                ],
                "fields": [
                    "typing.Optional[list[str]]"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "method": [
                    "str"
                ],
                "multipart_boundary": [
                    "typing.Optional[str]"
                ],
                "url": [
                    "str"
                ],
                "urlopen_kw": [
                    "dict"
                ]
            },
            "request_encode_url": {
                "return": [
                    "bytes"
                ],
                "fields": [
                    "typing.Optional[list[str]]"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "method": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "urlopen_kw": [
                    "dict"
                ]
            },
            "urlopen": {
                "return": [
                    "typing.Optional[requests.Response]"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "encode_multipart": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "kw": [
                    "dict"
                ],
                "method": [
                    "str"
                ],
                "multipart_boundary": [
                    "typing.Optional[str]"
                ],
                "url": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "headers": [
                    "dict[str, str]"
                ]
            }
        }
    },
    "urllib3.http2": {
        "global": {
            "inject_into_urllib3": {
                "return": [
                    "None"
                ]
            },
            "extract_from_urllib3": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "orig_HTTPSConnection": [
                    "None"
                ]
            }
        }
    },
    "urllib3._base_connection": {
        "BaseHTTPConnection": {
            "global": {
                "default_socket_options": [
                    "SocketOptions"
                ],
                "proxy_is_verified": [
                    "bool"
                ],
                "socket_options": [
                    "list[typing.Any]"
                ],
                "source_address": [
                    "str"
                ],
                "default_port": [
                    "int"
                ],
                "proxy_config": [
                    "dict[str, str]"
                ],
                "is_verified": [
                    "bool"
                ],
                "blocksize": [
                    "int"
                ],
                "timeout": [
                    "int"
                ],
                "proxy": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "typing.Optional[int]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "blocksize": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "proxy": [
                    "typing.Optional[str]"
                ],
                "proxy_config": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "socket_options": [
                    "SocketOptions"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "timeout": [
                    "int"
                ]
            },
            "request": {
                "return": [
                    "Response"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "chunked": [
                    "bool"
                ],
                "decode_content": [
                    "bool"
                ],
                "enforce_content_length": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "method": [
                    "str"
                ],
                "preload_content": [
                    "bool"
                ],
                "url": [
                    "str"
                ]
            },
            "set_tunnel": {
                "return": [
                    "None"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "getresponse": {
                "return": [
                    "Response"
                ]
            },
            "connect": {
                "return": [
                    "None"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            }
        },
        "BaseHTTPSConnection": {
            "global": {
                "default_socket_options": [
                    "list[typing.Any]"
                ],
                "ssl_maximum_version": [
                    "int"
                ],
                "ssl_minimum_version": [
                    "int"
                ],
                "assert_fingerprint": [
                    "bool"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "ca_cert_data": [
                    "str"
                ],
                "default_port": [
                    "int"
                ],
                "key_password": [
                    "str"
                ],
                "ca_cert_dir": [
                    "str"
                ],
                "ssl_context": [
                    "SSLContext"
                ],
                "ssl_version": [
                    "typing.Optional[str]"
                ],
                "cert_file": [
                    "str"
                ],
                "cert_reqs": [
                    "str"
                ],
                "ca_certs": [
                    "list[str]"
                ],
                "key_file": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "assert_fingerprint": [
                    "typing.Optional[bool]"
                ],
                "assert_hostname": [
                    "typing.Optional[str]"
                ],
                "blocksize": [
                    "int"
                ],
                "ca_cert_data": [
                    "typing.Optional[str]"
                ],
                "ca_cert_dir": [
                    "typing.Optional[str]"
                ],
                "ca_certs": [
                    "typing.Optional[list[str]]"
                ],
                "cert_file": [
                    "typing.Optional[str]"
                ],
                "cert_reqs": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "str"
                ],
                "key_file": [
                    "typing.Optional[str]"
                ],
                "key_password": [
                    "typing.Optional[str]"
                ],
                "port": [
                    "typing.Optional[int]"
                ],
                "proxy": [
                    "typing.Optional[str]"
                ],
                "proxy_config": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "server_hostname": [
                    "typing.Optional[str]"
                ],
                "socket_options": [
                    "SocketOptions"
                ],
                "source_address": [
                    "typing.Optional[str]"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "ssl_maximum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_minimum_version": [
                    "typing.Optional[int]"
                ],
                "ssl_version": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "int"
                ]
            }
        },
        "_ResponseOptions": {
            "global": {
                "enforce_content_length": [
                    "bool"
                ],
                "preload_content": [
                    "str"
                ],
                "decode_content": [
                    "typing.Callable[typing.Any, typing.Any]"
                ],
                "request_method": [
                    "str"
                ],
                "request_url": [
                    "str"
                ]
            }
        },
        "ProxyConfig": {
            "global": {
                "use_forwarding_for_https": [
                    "bool"
                ],
                "assert_fingerprint": [
                    "str"
                ],
                "assert_hostname": [
                    "str"
                ],
                "ssl_context": [
                    "SSLContext"
                ]
            }
        }
    },
    "urllib3.fields": {
        "global": {
            "format_header_param_rfc2231": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "format_header_param_html5": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "format_header_param": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "format_multipart_header_param": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "guess_content_type": {
                "return": [
                    "str"
                ],
                "default": [
                    "str"
                ],
                "filename": [
                    "typing.Optional[str]"
                ]
            }
        },
        "RequestField": {
            "from_tuples": {
                "return": [
                    "RequestParam"
                ],
                "fieldname": [
                    "str"
                ],
                "header_formatter": [
                    "HeaderFormatter"
                ],
                "value": [
                    "typing.Union[str,tuple[typing.Union[str,str]]]"
                ]
            },
            "__init__": {
                "data": [
                    "bytes"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "header_formatter": [
                    "typing.Optional[typing.Callable[str, str]]"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "name": [
                    "str"
                ]
            },
            "render_headers": {
                "return": [
                    "str"
                ]
            },
            "make_multipart": {
                "return": [
                    "None"
                ],
                "content_disposition": [
                    "typing.Optional[str]"
                ],
                "content_location": [
                    "typing.Optional[str]"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ]
            },
            "_render_parts": {
                "return": [
                    "str"
                ],
                "header_parts": [
                    "typing.Union[dict,list]"
                ]
            },
            "_render_part": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "urllib3.filepost": {
        "global": {
            "encode_multipart_formdata": {
                "return": [
                    "tuple[typing.Union[bytes,str]]"
                ],
                "boundary": [
                    "typing.Optional[str]"
                ],
                "fields": [
                    "typing.Iterable[Field]"
                ]
            },
            "iter_field_objects": {
                "return": [
                    "typing.Iterator"
                ],
                "fields": [
                    "typing.Union[dict[str, typing.Any],list[str]]"
                ]
            },
            "choose_boundary": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "urllib3.util.response": {
        "global": {
            "assert_header_parsing": {
                "return": [
                    "None"
                ],
                "headers": [
                    "httplib.HTTPMessage"
                ]
            },
            "is_fp_closed": {
                "return": [
                    "bool"
                ],
                "obj": [
                    "typing.Union[io.BufferedReader, io.BufferedWriter]"
                ]
            },
            "is_response_to_head": {
                "return": [
                    "bool"
                ],
                "response": [
                    "Response"
                ]
            }
        }
    },
    "urllib3.http2.probe": {
        "_HTTP2ProbeCache": {
            "acquire_and_get": {
                "return": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            },
            "set_and_release": {
                "return": [
                    "None"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "supports_http2": [
                    "typing.Optional[bool]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "_values": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "_reset": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "urllib3.util.wait": {
        "global": {
            "poll_wait_for_socket": {
                "return": [
                    "bool"
                ],
                "read": [
                    "bool"
                ],
                "sock": [
                    "socket.socket"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ],
                "write": [
                    "bool"
                ]
            },
            "select_wait_for_socket": {
                "return": [
                    "bool"
                ],
                "read": [
                    "bool"
                ],
                "sock": [
                    "socket.socket"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ],
                "write": [
                    "bool"
                ]
            },
            "wait_for_socket": {
                "return": [
                    "bool"
                ],
                "read": [
                    "bool"
                ],
                "sock": [
                    "socket.socket"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ],
                "write": [
                    "bool"
                ]
            },
            "_have_working_poll": {
                "return": [
                    "bool"
                ]
            },
            "wait_for_write": {
                "return": [
                    "bool"
                ],
                "sock": [
                    "socket.socket"
                ],
                "timeout": [
                    "float"
                ]
            },
            "wait_for_read": {
                "return": [
                    "int"
                ],
                "sock": [
                    "socket.socket"
                ],
                "timeout": [
                    "float"
                ]
            }
        }
    },
    "urllib3": {
        "global": {
            "request": {
                "return": [
                    "requests.Response"
                ],
                "body": [
                    "typing.Optional[typing.Any]"
                ],
                "decode_content": [
                    "bool"
                ],
                "fields": [
                    "typing.Optional[list[str]]"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "json": [
                    "typing.Optional[bool]"
                ],
                "method": [
                    "str"
                ],
                "preload_content": [
                    "bool"
                ],
                "redirect": [
                    "bool"
                ],
                "retries": [
                    "typing.Optional[int]"
                ],
                "timeout": [
                    "int"
                ],
                "url": [
                    "str"
                ]
            },
            "add_stderr_logger": {
                "return": [
                    "logging.StreamHandler"
                ],
                "level": [
                    "int"
                ]
            },
            "disable_warnings": {
                "return": [
                    "None"
                ],
                "category": [
                    "typing.Type"
                ]
            }
        }
    },
    "urllib3.util.proxy": {
        "global": {
            "connection_requires_http_tunnel": {
                "return": [
                    "bool"
                ],
                "destination_scheme": [
                    "typing.Optional[str]"
                ],
                "proxy_config": [
                    "typing.Optional[typing.Any]"
                ],
                "proxy_url": [
                    "typing.Optional[urllib.parse.URL]"
                ]
            }
        }
    },
    "urllib3.exceptions": {
        "ProxySchemeUnknown": {
            "__init__": {
                "return": [
                    "None"
                ],
                "scheme": [
                    "typing.Optional[str]"
                ]
            }
        },
        "IncompleteRead": {
            "global": {
                "expected": [
                    "int"
                ],
                "partial": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "expected": [
                    "str"
                ],
                "partial": [
                    "str"
                ]
            }
        },
        "MaxRetryError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "pool": [
                    "Pool"
                ],
                "reason": [
                    "typing.Optional[str]"
                ],
                "url": [
                    "str"
                ]
            },
            "__reduce__": {
                "return": [
                    "tuple"
                ]
            }
        },
        "NameResolutionError": {
            "__init__": {
                "conn": [
                    "Connection"
                ],
                "host": [
                    "str"
                ],
                "reason": [
                    "str"
                ]
            },
            "__reduce__": {
                "return": [
                    "tuple"
                ]
            }
        },
        "InvalidChunkLength": {
            "__init__": {
                "return": [
                    "None"
                ],
                "length": [
                    "int"
                ],
                "response": [
                    "typing.IO"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "HostChangedError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "pool": [
                    "Pool"
                ],
                "retries": [
                    "int"
                ],
                "url": [
                    "str"
                ]
            }
        },
        "ProxyError": {
            "global": {
                "original_error": [
                    "HTTPError"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "error": [
                    "Exception"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "HeaderParsingError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "defects": [
                    "typing.Optional[str]"
                ],
                "unparsed_data": [
                    "str"
                ]
            }
        },
        "LocationParseError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "location": [
                    "str"
                ]
            }
        },
        "URLSchemeUnknown": {
            "__init__": {
                "scheme": [
                    "str"
                ]
            }
        },
        "NewConnectionError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "conn": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            },
            "__reduce__": {
                "return": [
                    "tuple"
                ]
            }
        },
        "PoolError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "message": [
                    "str"
                ],
                "pool": [
                    "str"
                ]
            },
            "__reduce__": {
                "return": [
                    "tuple"
                ]
            }
        },
        "RequestError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "message": [
                    "str"
                ],
                "pool": [
                    "Pool"
                ],
                "url": [
                    "str"
                ]
            },
            "__reduce__": {
                "return": [
                    "tuple"
                ]
            }
        }
    },
    "urllib3.contrib.emscripten.request": {
        "EmscriptenRequest": {
            "global": {
                "decode_content": [
                    "bool"
                ],
                "headers": [
                    "Field"
                ],
                "timeout": [
                    "int"
                ],
                "method": [
                    "str"
                ],
                "params": [
                    "None"
                ],
                "body": [
                    "typing.Optional[str]"
                ],
                "url": [
                    "str"
                ]
            },
            "set_header": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "set_body": {
                "return": [
                    "None"
                ],
                "body": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "urllib3.util.util": {
        "global": {
            "to_bytes": {
                "return": [
                    "bytes"
                ],
                "encoding": [
                    "typing.Optional[str]"
                ],
                "errors": [
                    "typing.Optional[str]"
                ],
                "x": [
                    "str"
                ]
            },
            "to_str": {
                "return": [
                    "str"
                ],
                "encoding": [
                    "typing.Optional[str]"
                ],
                "errors": [
                    "typing.Optional[str]"
                ],
                "x": [
                    "bytes"
                ]
            },
            "reraise": {
                "return": [
                    "None"
                ],
                "tb": [
                    "typing.Optional[traceback.TracebackType]"
                ],
                "tp": [
                    "typing.Type"
                ],
                "value": [
                    "Exception"
                ]
            }
        }
    },
    "urllib3._version": {
        "global": {
            "global": {
                "__version_tuple__": [
                    "tuple[typing.Union[int,int,int]]"
                ],
                "version_tuple": [
                    "tuple[typing.Union[int,int,int]]"
                ],
                "__version__": [
                    "str"
                ],
                "version": [
                    "str"
                ]
            }
        }
    },
    "urllib3.contrib.emscripten": {
        "global": {
            "inject_into_urllib3": {
                "return": [
                    "None"
                ]
            }
        }
    }
}