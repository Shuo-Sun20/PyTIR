{
    "werkzeug.sansio.response": {
        "Response": {
            "global": {
                "default_mimetype": [
                    "str"
                ],
                "headers": [
                    "Headers"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "headers": [
                    "typing.Optional[typing.Any]"
                ],
                "mimetype": [
                    "typing.Optional[str]"
                ],
                "status": [
                    "int"
                ]
            },
            "_clean_status": {
                "return": [
                    "tuple[typing.Union[str,HTTPStatus]]"
                ],
                "value": [
                    "typing.Union[int,HTTPStatus]"
                ]
            },
            "set_cookie": {
                "return": [
                    "None"
                ],
                "domain": [
                    "typing.Optional[str]"
                ],
                "expires": [
                    "typing.Optional[str]"
                ],
                "httponly": [
                    "bool"
                ],
                "key": [
                    "str"
                ],
                "max_age": [
                    "typing.Optional[int]"
                ],
                "partitioned": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "samesite": [
                    "typing.Optional[str]"
                ],
                "secure": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "delete_cookie": {
                "return": [
                    "None"
                ],
                "domain": [
                    "typing.Optional[str]"
                ],
                "httponly": [
                    "bool"
                ],
                "key": [
                    "str"
                ],
                "partitioned": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "samesite": [
                    "typing.Optional[str]"
                ],
                "secure": [
                    "bool"
                ]
            },
            "set_etag": {
                "return": [
                    "None"
                ],
                "etag": [
                    "str"
                ],
                "weak": [
                    "bool"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "get_etag": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "_set_property": {
                "return": [
                    "property"
                ],
                "doc": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.test": {
        "EnvironBuilder": {
            "global": {
                "_input_stream": [
                    "typing.Optional[typing.IO]"
                ],
                "_query_string": [
                    "str"
                ],
                "_files": [
                    "str"
                ],
                "_args": [
                    "dict[str, str]"
                ],
                "_form": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "auth": [
                    "typing.Optional[tuple[typing.Union[str,...]]]"
                ],
                "base_url": [
                    "typing.Optional[str]"
                ],
                "content_length": [
                    "typing.Optional[int]"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "data": [
                    "typing.Optional[typing.Any]"
                ],
                "environ_base": [
                    "typing.Optional[dict[str, str]]"
                ],
                "environ_overrides": [
                    "typing.Optional[dict[str, str]]"
                ],
                "errors_stream": [
                    "typing.Optional[typing.IO]"
                ],
                "headers": [
                    "Headers"
                ],
                "input_stream": [
                    "typing.Optional[typing.IO]"
                ],
                "json": [
                    "typing.Optional[bool]"
                ],
                "method": [
                    "str"
                ],
                "mimetype": [
                    "typing.Optional[str]"
                ],
                "multiprocess": [
                    "bool"
                ],
                "multithread": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "query_string": [
                    "typing.Optional[str]"
                ],
                "run_once": [
                    "bool"
                ]
            },
            "get_environ": {
                "return": [
                    "dict[str, str]"
                ]
            },
            "from_environ": {
                "return": [
                    "Request"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "_get_form": {
                "return": [
                    "typing.Optional[typing.Any]"
                ],
                "name": [
                    "str"
                ],
                "storage": [
                    "typing.Callable"
                ]
            },
            "_add_file_from_data": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_make_base_url": {
                "return": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "scheme": [
                    "str"
                ],
                "script_root": [
                    "str"
                ]
            },
            "get_request": {
                "return": [
                    "Request"
                ],
                "cls": [
                    "typing.Type"
                ]
            },
            "_set_form": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__del__": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "stream_encode_multipart": {
                "return": [
                    "BytesIO"
                ],
                "boundary": [
                    "str"
                ],
                "data": [
                    "dict[str, typing.Any]"
                ],
                "threshold": [
                    "int"
                ],
                "use_tempfile": [
                    "bool"
                ]
            },
            "run_wsgi_app": {
                "return": [
                    "tuple[typing.Union[typing.Iterator,int,Headers]]"
                ],
                "app": [
                    "typing.Callable"
                ],
                "buffered": [
                    "bool"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "_iter_data": {
                "return": [
                    "typing.Iterator"
                ],
                "data": [
                    "dict"
                ]
            },
            "encode_multipart": {
                "return": [
                    "tuple[typing.Union[str,bytes]]"
                ],
                "boundary": [
                    "str"
                ],
                "values": [
                    "list[str]"
                ]
            },
            "create_environ": {
                "return": [
                    "dict[str, str]"
                ],
                "args": [
                    "list"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "Cookie": {
            "global": {
                "decoded_value": [
                    "str"
                ],
                "decoded_key": [
                    "str"
                ],
                "origin_only": [
                    "bool"
                ],
                "http_only": [
                    "bool"
                ],
                "same_site": [
                    "str"
                ],
                "expires": [
                    "datetime.date"
                ],
                "max_age": [
                    "int"
                ],
                "domain": [
                    "str"
                ],
                "secure": [
                    "bool"
                ],
                "value": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "_from_response_header": {
                "return": [
                    "ResponseHeader"
                ],
                "header": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "server_name": [
                    "str"
                ]
            },
            "_matches_request": {
                "return": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "server_name": [
                    "str"
                ]
            },
            "_to_request_header": {
                "return": [
                    "str"
                ]
            }
        },
        "Client": {
            "open": {
                "return": [
                    "Response"
                ],
                "args": [
                    "typing.Union[typing.Any,typing.Any]"
                ],
                "buffered": [
                    "bool"
                ],
                "follow_redirects": [
                    "bool"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "resolve_redirect": {
                "return": [
                    "typing.IO"
                ],
                "buffered": [
                    "bool"
                ],
                "response": [
                    "Response"
                ]
            },
            "run_wsgi_app": {
                "return": [
                    "tuple[typing.Union[typing.Iterator,int,Headers]]"
                ],
                "buffered": [
                    "bool"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "allow_subdomain_redirects": [
                    "bool"
                ],
                "application": [
                    "Application"
                ],
                "response_wrapper": [
                    "typing.Optional[typing.Type]"
                ],
                "use_cookies": [
                    "bool"
                ]
            },
            "set_cookie": {
                "return": [
                    "None"
                ],
                "domain": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ],
                "origin_only": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_add_cookies_to_wsgi": {
                "return": [
                    "None"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "_update_cookies_from_response": {
                "return": [
                    "None"
                ],
                "headers": [
                    "list[str]"
                ],
                "path": [
                    "str"
                ],
                "server_name": [
                    "str"
                ]
            },
            "delete_cookie": {
                "return": [
                    "None"
                ],
                "domain": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            },
            "get_cookie": {
                "return": [
                    "typing.Optional[str]"
                ],
                "domain": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            },
            "options": {
                "return": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "args": [
                    "typing.Iterable[str]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "delete": {
                "return": [
                    "tuple[typing.Union[typing.Any,requests.Response]]"
                ],
                "args": [
                    "typing.Union[str,list[typing.Any]]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "patch": {
                "return": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "args": [
                    "typing.Iterable[typing.Any]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "trace": {
                "return": [
                    "typing.IO"
                ],
                "args": [
                    "typing.Iterable[str]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "head": {
                "return": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "args": [
                    "typing.Union[str,tuple]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "post": {
                "return": [
                    "tuple[typing.Union[typing.Any,requests.Response]]"
                ],
                "args": [
                    "typing.Union[str,list[typing.Any]]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "get": {
                "return": [
                    "tuple[typing.Union[typing.Any,requests.Response]]"
                ],
                "args": [
                    "typing.Union[str,list[typing.Any]]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "put": {
                "return": [
                    "tuple[typing.Union[typing.Any,requests.Response]]"
                ],
                "args": [
                    "typing.Union[str,list[typing.Any]]"
                ],
                "kw": [
                    "dict"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "TestResponse": {
            "global": {
                "history": [
                    "tuple"
                ],
                "request": [
                    "Request"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "history": [
                    "typing.Iterable[ResponseHistory]"
                ],
                "kwargs": [
                    "dict"
                ],
                "request": [
                    "typing.Callable"
                ],
                "response": [
                    "Response"
                ],
                "status": [
                    "int"
                ]
            }
        }
    },
    "werkzeug.wrappers.response": {
        "Response": {
            "global": {
                "response": [
                    "Response"
                ]
            },
            "get_wsgi_headers": {
                "return": [
                    "Headers"
                ],
                "environ": [
                    "dict"
                ]
            },
            "_process_range_request": {
                "return": [
                    "bool"
                ],
                "accept_ranges": [
                    "str"
                ],
                "complete_length": [
                    "int"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "make_conditional": {
                "return": [
                    "Response"
                ],
                "accept_ranges": [
                    "bool"
                ],
                "complete_length": [
                    "typing.Optional[int]"
                ],
                "request_or_environ": [
                    "typing.Union[str,requests.Request]"
                ]
            },
            "_ensure_sequence": {
                "return": [
                    "None"
                ],
                "mutable": [
                    "bool"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "direct_passthrough": [
                    "bool"
                ],
                "headers": [
                    "typing.Optional[dict[str, str]]"
                ],
                "mimetype": [
                    "typing.Optional[str]"
                ],
                "response": [
                    "typing.Optional[typing.Any]"
                ],
                "status": [
                    "int"
                ]
            },
            "force_type": {
                "return": [
                    "Response"
                ],
                "environ": [
                    "dict"
                ],
                "response": [
                    "Response"
                ]
            },
            "get_app_iter": {
                "return": [
                    "typing.Iterator"
                ],
                "environ": [
                    "dict"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_is_range_request_processable": {
                "return": [
                    "bool"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "make_sequence": {
                "return": [
                    "None"
                ]
            },
            "set_data": {
                "return": [
                    "None"
                ],
                "value": [
                    "bytes"
                ]
            },
            "get_wsgi_response": {
                "return": [
                    "tuple[typing.Union[typing.Iterator,int,list[str]]]"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "calculate_content_length": {
                "return": [
                    "typing.Optional[int]"
                ]
            },
            "__call__": {
                "return": [
                    "typing.Iterator"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "add_etag": {
                "return": [
                    "None"
                ],
                "overwrite": [
                    "bool"
                ],
                "weak": [
                    "bool"
                ]
            },
            "freeze": {
                "return": [
                    "None"
                ]
            },
            "from_app": {
                "return": [
                    "typing.Type"
                ],
                "app": [
                    "Flask"
                ],
                "buffered": [
                    "bool"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "_wrap_range_response": {
                "return": [
                    "None"
                ],
                "length": [
                    "int"
                ],
                "start": [
                    "int"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "call_on_close": {
                "return": [
                    "typing.Callable"
                ],
                "func": [
                    "typing.Callable"
                ]
            },
            "iter_encoded": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__enter__": {
                "return": [
                    "Config"
                ]
            }
        },
        "ResponseStream": {
            "write": {
                "return": [
                    "int"
                ],
                "value": [
                    "bytes"
                ]
            },
            "isatty": {
                "return": [
                    "bool"
                ]
            },
            "tell": {
                "return": [
                    "int"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "response": [
                    "Response"
                ]
            },
            "writelines": {
                "return": [
                    "None"
                ],
                "seq": [
                    "list[str]"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_iter_encoded": {
                "return": [
                    "typing.Iterator"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            }
        }
    },
    "werkzeug.serving": {
        "WSGIRequestHandler": {
            "global": {
                "server": [
                    "HTTPServer"
                ]
            },
            "run_wsgi": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "make_environ": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "log_request": {
                "return": [
                    "None"
                ],
                "code": [
                    "str"
                ],
                "size": [
                    "str"
                ]
            },
            "handle": {
                "return": [
                    "None"
                ]
            },
            "address_string": {
                "return": [
                    "str"
                ]
            },
            "log": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Union[str,list[str]]"
                ],
                "message": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            },
            "__getattr__": {
                "return": [
                    "typing.Callable"
                ],
                "name": [
                    "str"
                ]
            },
            "log_message": {
                "return": [
                    "None"
                ],
                "args": [
                    "str"
                ],
                "format": [
                    "str"
                ]
            },
            "log_error": {
                "return": [
                    "None"
                ],
                "args": [
                    "str"
                ],
                "format": [
                    "str"
                ]
            },
            "connection_dropped": {
                "return": [
                    "None"
                ],
                "environ": [
                    "dict"
                ],
                "error": [
                    "Exception"
                ]
            },
            "port_integer": {
                "return": [
                    "int"
                ]
            }
        },
        "BaseWSGIServer": {
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Application"
                ],
                "fd": [
                    "typing.Optional[int]"
                ],
                "handler": [
                    "typing.Optional[typing.Callable]"
                ],
                "host": [
                    "str"
                ],
                "passthrough_errors": [
                    "bool"
                ],
                "port": [
                    "int"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ]
            },
            "log_startup": {
                "return": [
                    "None"
                ]
            },
            "serve_forever": {
                "return": [
                    "None"
                ],
                "poll_interval": [
                    "float"
                ]
            },
            "handle_error": {
                "return": [
                    "Response"
                ],
                "client_address": [
                    "str"
                ],
                "request": [
                    "HttpRequest"
                ]
            },
            "log": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Optional[list[str]]"
                ],
                "message": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            }
        },
        "global": {
            "run_simple": {
                "return": [
                    "None"
                ],
                "application": [
                    "Application"
                ],
                "exclude_patterns": [
                    "typing.Optional[list[str]]"
                ],
                "extra_files": [
                    "typing.Optional[list[str]]"
                ],
                "hostname": [
                    "str"
                ],
                "passthrough_errors": [
                    "bool"
                ],
                "port": [
                    "int"
                ],
                "processes": [
                    "int"
                ],
                "reloader_interval": [
                    "int"
                ],
                "reloader_type": [
                    "str"
                ],
                "request_handler": [
                    "typing.Optional[typing.Callable]"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "static_files": [
                    "list[str]"
                ],
                "threaded": [
                    "bool"
                ],
                "use_debugger": [
                    "bool"
                ],
                "use_evalex": [
                    "bool"
                ],
                "use_reloader": [
                    "bool"
                ]
            },
            "generate_adhoc_ssl_pair": {
                "return": [
                    "tuple[typing.Union[Certificate,PrivateKey]]"
                ],
                "cn": [
                    "typing.Optional[str]"
                ]
            },
            "generate_adhoc_ssl_context": {
                "return": [
                    "ssl.SSLContext"
                ]
            },
            "global": {
                "connection_dropped_errors": [
                    "tuple[typing.Union[typing.Type,typing.Type,typing.Type]]"
                ]
            },
            "make_ssl_devcert": {
                "return": [
                    "tuple[typing.Union[str,str]]"
                ],
                "base_path": [
                    "str"
                ],
                "cn": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "typing.Optional[str]"
                ]
            },
            "make_server": {
                "return": [
                    "WSGIServer"
                ],
                "app": [
                    "typing.Callable"
                ],
                "fd": [
                    "typing.Optional[int]"
                ],
                "host": [
                    "str"
                ],
                "passthrough_errors": [
                    "bool"
                ],
                "port": [
                    "int"
                ],
                "processes": [
                    "int"
                ],
                "request_handler": [
                    "typing.Optional[typing.Callable]"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ],
                "threaded": [
                    "bool"
                ]
            },
            "get_interface_ip": {
                "return": [
                    "str"
                ],
                "family": [
                    "int"
                ]
            },
            "get_sockaddr": {
                "return": [
                    "tuple[typing.Union[str,int]]"
                ],
                "family": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            },
            "_ansi_style": {
                "return": [
                    "str"
                ],
                "styles": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "load_ssl_context": {
                "return": [
                    "ssl.SSLContext"
                ],
                "cert_file": [
                    "str"
                ],
                "pkey_file": [
                    "typing.Optional[str]"
                ],
                "protocol": [
                    "typing.Optional[str]"
                ]
            },
            "select_address_family": {
                "return": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            },
            "is_ssl_error": {
                "return": [
                    "bool"
                ],
                "error": [
                    "typing.Optional[Exception]"
                ]
            },
            "is_running_from_reloader": {
                "return": [
                    "bool"
                ]
            }
        },
        "DechunkedInput": {
            "readinto": {
                "return": [
                    "int"
                ],
                "buf": [
                    "bytes"
                ]
            },
            "read_chunk_len": {
                "return": [
                    "int"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "rfile": [
                    "typing.IO"
                ]
            },
            "readable": {
                "return": [
                    "bool"
                ]
            }
        },
        "ForkingWSGIServer": {
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Application"
                ],
                "fd": [
                    "typing.Optional[int]"
                ],
                "handler": [
                    "typing.Optional[typing.Callable]"
                ],
                "host": [
                    "str"
                ],
                "passthrough_errors": [
                    "bool"
                ],
                "port": [
                    "int"
                ],
                "processes": [
                    "int"
                ],
                "ssl_context": [
                    "typing.Optional[ssl.SSLContext]"
                ]
            }
        },
        "_SslDummy": {
            "__getattr__": {
                "return": [
                    "typing.Callable"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.sansio.request": {
        "Request": {
            "global": {
                "parameter_storage_class": [
                    "typing.Type"
                ],
                "dict_storage_class": [
                    "typing.Type"
                ],
                "list_storage_class": [
                    "typing.Type"
                ],
                "user_agent_class": [
                    "str"
                ],
                "trusted_hosts": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "query_string": [
                    "str"
                ],
                "remote_addr": [
                    "str"
                ],
                "root_path": [
                    "str"
                ],
                "scheme": [
                    "str"
                ],
                "server": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_parse_content_type": {
                "return": [
                    "typing.Optional[str]"
                ]
            }
        }
    },
    "werkzeug.debug": {
        "DebuggedApplication": {
            "global": {
                "_pin_cookie": [
                    "str"
                ],
                "_pin": [
                    "str"
                ]
            },
            "debug_application": {
                "return": [
                    "typing.Iterator"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Application"
                ],
                "console_init_func": [
                    "typing.Optional[typing.Callable]"
                ],
                "console_path": [
                    "str"
                ],
                "evalex": [
                    "bool"
                ],
                "pin_logging": [
                    "bool"
                ],
                "pin_security": [
                    "bool"
                ],
                "request_key": [
                    "str"
                ],
                "show_hidden_frames": [
                    "bool"
                ]
            },
            "__call__": {
                "return": [
                    "typing.Iterable[typing.Any]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "pin_auth": {
                "return": [
                    "Response"
                ],
                "request": [
                    "Request"
                ]
            },
            "display_console": {
                "return": [
                    "Response"
                ],
                "request": [
                    "Request"
                ]
            },
            "check_pin_trust": {
                "return": [
                    "typing.Optional[bool]"
                ],
                "environ": [
                    "dict"
                ]
            },
            "get_resource": {
                "return": [
                    "Response"
                ],
                "filename": [
                    "str"
                ],
                "request": [
                    "Request"
                ]
            },
            "execute_command": {
                "return": [
                    "Response"
                ],
                "command": [
                    "str"
                ],
                "frame": [
                    "Frame"
                ],
                "request": [
                    "Request"
                ]
            },
            "log_pin_request": {
                "return": [
                    "Response"
                ],
                "request": [
                    "Request"
                ]
            },
            "_fail_pin_auth": {
                "return": [
                    "None"
                ]
            },
            "check_host_trust": {
                "return": [
                    "bool"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            }
        },
        "global": {
            "get_machine_id": {
                "return": [
                    "typing.Optional[bytes]"
                ]
            },
            "get_pin_and_cookie_name": {
                "return": [
                    "tuple[typing.Union[str,str]]"
                ],
                "app": [
                    "Application"
                ]
            },
            "hash_pin": {
                "return": [
                    "str"
                ],
                "pin": [
                    "str"
                ]
            },
            "global": {
                "_machine_id": [
                    "None"
                ]
            }
        },
        "_ConsoleFrame": {
            "__init__": {
                "namespace": [
                    "dict"
                ]
            },
            "eval": {
                "return": [
                    "None"
                ],
                "code": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.wrappers.request": {
        "Request": {
            "global": {
                "form_data_parser_class": [
                    "str"
                ],
                "max_form_memory_size": [
                    "int"
                ],
                "max_content_length": [
                    "None"
                ],
                "_cached_json": [
                    "dict[str, typing.Any]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "shallow": [
                    "bool"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "populate_request": [
                    "bool"
                ],
                "shallow": [
                    "bool"
                ]
            },
            "application": {
                "return": [
                    "WSGIApplication"
                ],
                "f": [
                    "typing.Callable"
                ]
            },
            "_load_form_data": {
                "return": [
                    "None"
                ]
            },
            "make_form_data_parser": {
                "return": [
                    "DataParser"
                ]
            },
            "_get_file_stream": {
                "return": [
                    "typing.IO"
                ],
                "content_length": [
                    "typing.Optional[int]"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "total_content_length": [
                    "int"
                ]
            },
            "on_json_loading_failed": {
                "return": [
                    "None"
                ],
                "e": [
                    "typing.Optional[Exception]"
                ]
            },
            "from_values": {
                "return": [
                    "Request"
                ],
                "args": [
                    "list[str]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "_get_stream_for_parsing": {
                "return": [
                    "BytesIO"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__exit__": {
                "return": [
                    "None"
                ]
            },
            "__enter__": {
                "return": [
                    "Config"
                ]
            }
        }
    },
    "werkzeug.local": {
        "LocalProxy": {
            "global": {
                "_get_current_object": [
                    "typing.Callable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "local": [
                    "Local"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "unbound_message": [
                    "str"
                ]
            }
        },
        "_ProxyLookup": {
            "__get__": {
                "return": [
                    "typing.Union[typing.Any, typing.Any]"
                ],
                "instance": [
                    "typing.Optional[object]"
                ],
                "owner": [
                    "typing.Optional[object]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "class_value": [
                    "typing.Optional[str]"
                ],
                "f": [
                    "typing.Optional[typing.Callable]"
                ],
                "fallback": [
                    "typing.Optional[str]"
                ],
                "is_attr": [
                    "bool"
                ]
            },
            "__call__": {
                "return": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "instance": [
                    "Model"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__set_name__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "_ProxyIOp": {
            "__init__": {
                "return": [
                    "None"
                ],
                "f": [
                    "typing.Callable[..., typing.Any]"
                ],
                "fallback": [
                    "typing.Callable"
                ]
            }
        },
        "Local": {
            "__delattr__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "context_var": [
                    "ContextVar"
                ]
            },
            "__getattr__": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "__setattr__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__call__": {
                "return": [
                    "LocalProxy"
                ],
                "name": [
                    "str"
                ],
                "unbound_message": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__release_local__": {
                "return": [
                    "None"
                ]
            }
        },
        "LocalManager": {
            "__init__": {
                "return": [
                    "None"
                ],
                "locals": [
                    "typing.Optional[dict]"
                ]
            },
            "make_middleware": {
                "return": [
                    "typing.Callable"
                ],
                "app": [
                    "typing.Callable"
                ]
            },
            "middleware": {
                "return": [
                    "typing.Callable"
                ],
                "func": [
                    "typing.Callable"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "cleanup": {
                "return": [
                    "None"
                ]
            }
        },
        "LocalStack": {
            "__init__": {
                "return": [
                    "None"
                ],
                "context_var": [
                    "ContextVar"
                ]
            },
            "pop": {
                "return": [
                    "typing.Optional[str]"
                ]
            },
            "push": {
                "return": [
                    "list"
                ],
                "obj": [
                    "Object"
                ]
            },
            "__call__": {
                "return": [
                    "LocalProxy"
                ],
                "name": [
                    "str"
                ],
                "unbound_message": [
                    "str"
                ]
            },
            "__release_local__": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_l_to_r_op": {
                "return": [
                    "F"
                ],
                "op": [
                    "typing.Callable[A, B]"
                ]
            },
            "release_local": {
                "return": [
                    "None"
                ],
                "local": [
                    "Local"
                ]
            },
            "_identity": {
                "return": [
                    "str"
                ],
                "o": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.utils": {
        "global": {
            "send_file": {
                "return": [
                    "Response"
                ],
                "_root_path": [
                    "typing.Optional[str]"
                ],
                "as_attachment": [
                    "bool"
                ],
                "conditional": [
                    "bool"
                ],
                "download_name": [
                    "typing.Optional[str]"
                ],
                "environ": [
                    "dict"
                ],
                "etag": [
                    "bool"
                ],
                "last_modified": [
                    "typing.Optional[str]"
                ],
                "max_age": [
                    "typing.Optional[int]"
                ],
                "mimetype": [
                    "str"
                ],
                "path_or_file": [
                    "typing.Union[str,pathlib.PathLike]"
                ],
                "response_class": [
                    "typing.Type"
                ],
                "use_x_sendfile": [
                    "bool"
                ]
            },
            "import_string": {
                "return": [
                    "typing.Optional[str]"
                ],
                "import_name": [
                    "str"
                ],
                "silent": [
                    "bool"
                ]
            },
            "find_modules": {
                "return": [
                    "typing.Iterator"
                ],
                "import_path": [
                    "str"
                ],
                "include_packages": [
                    "bool"
                ],
                "recursive": [
                    "bool"
                ]
            },
            "secure_filename": {
                "return": [
                    "str"
                ],
                "filename": [
                    "str"
                ]
            },
            "redirect": {
                "return": [
                    "Response"
                ],
                "Response": [
                    "typing.Optional[typing.Type]"
                ],
                "code": [
                    "int"
                ],
                "location": [
                    "str"
                ]
            },
            "send_from_directory": {
                "return": [
                    "Response"
                ],
                "directory": [
                    "str"
                ],
                "environ": [
                    "dict"
                ],
                "kwargs": [
                    "dict"
                ],
                "path": [
                    "str"
                ]
            },
            "append_slash_redirect": {
                "return": [
                    "typing.Union[django.http.HttpResponseRedirect, django.http.HttpResponseRedirect]"
                ],
                "code": [
                    "int"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "get_content_type": {
                "return": [
                    "str"
                ],
                "charset": [
                    "str"
                ],
                "mimetype": [
                    "str"
                ]
            }
        },
        "ImportStringError": {
            "global": {
                "import_name": [
                    "str"
                ],
                "exception": [
                    "ImportError"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "exception": [
                    "Exception"
                ],
                "import_name": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "cached_property": {
            "__get__": {
                "return": [
                    "typing.Optional[str]"
                ],
                "obj": [
                    "typing.Optional[object]"
                ],
                "type": [
                    "typing.Type"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "doc": [
                    "typing.Optional[str]"
                ],
                "fget": [
                    "typing.Callable"
                ],
                "name": [
                    "typing.Optional[str]"
                ]
            },
            "__set__": {
                "return": [
                    "None"
                ],
                "obj": [
                    "typing.Union[typing.Type, builtins.dict]"
                ],
                "value": [
                    "str"
                ]
            },
            "__delete__": {
                "return": [
                    "None"
                ],
                "obj": [
                    "Model"
                ]
            }
        },
        "environ_property": {
            "lookup": {
                "return": [
                    "dict[str, str]"
                ],
                "obj": [
                    "Env"
                ]
            }
        },
        "header_property": {
            "lookup": {
                "return": [
                    "dict[str, str]"
                ],
                "obj": [
                    "Response"
                ]
            }
        }
    },
    "werkzeug.routing.matcher": {
        "StateMachineMatcher": {
            "match": {
                "return": [
                    "tuple[typing.Union[Rule,list]]"
                ],
                "domain": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "websocket": [
                    "str"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "rule": [
                    "Rule"
                ]
            },
            "update": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "State"
                ],
                "merge_slashes": [
                    "bool"
                ]
            }
        },
        "State": {
            "global": {
                "dynamic": [
                    "Field"
                ],
                "static": [
                    "Field"
                ],
                "rules": [
                    "Field"
                ]
            }
        }
    },
    "werkzeug.middleware.http_proxy": {
        "ProxyMiddleware": {
            "proxy_to": {
                "return": [
                    "typing.Callable"
                ],
                "opts": [
                    "dict[str, typing.Any]"
                ],
                "path": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ],
                "chunk_size": [
                    "int"
                ],
                "targets": [
                    "dict[str, str]"
                ],
                "timeout": [
                    "int"
                ]
            },
            "__call__": {
                "return": [
                    "typing.Iterable[bytes]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            }
        }
    },
    "werkzeug.routing.rules": {
        "Rule": {
            "_compile_builder": {
                "return": [
                    "CompiledOutput"
                ],
                "append_unknown": [
                    "bool"
                ]
            },
            "_parse_rule": {
                "return": [
                    "typing.Iterator"
                ],
                "rule": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "alias": [
                    "bool"
                ],
                "build_only": [
                    "bool"
                ],
                "defaults": [
                    "typing.Optional[list[str]]"
                ],
                "endpoint": [
                    "typing.Optional[str]"
                ],
                "host": [
                    "typing.Optional[str]"
                ],
                "merge_slashes": [
                    "typing.Optional[bool]"
                ],
                "methods": [
                    "typing.Optional[list[str]]"
                ],
                "redirect_to": [
                    "typing.Optional[str]"
                ],
                "strict_slashes": [
                    "typing.Optional[bool]"
                ],
                "string": [
                    "str"
                ],
                "subdomain": [
                    "typing.Optional[str]"
                ],
                "websocket": [
                    "bool"
                ]
            },
            "compile": {
                "return": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "suitable_for": {
                "return": [
                    "bool"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "values": [
                    "dict"
                ]
            },
            "bind": {
                "return": [
                    "None"
                ],
                "map": [
                    "UrlRuleMap"
                ],
                "rebind": [
                    "bool"
                ]
            },
            "get_empty_kwargs": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "get_converter": {
                "return": [
                    "VariableConverter"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "converter_name": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ],
                "variable_name": [
                    "str"
                ]
            },
            "build": {
                "return": [
                    "typing.Optional[str]"
                ],
                "append_unknown": [
                    "bool"
                ],
                "values": [
                    "dict"
                ]
            },
            "_encode_query_vars": {
                "return": [
                    "str"
                ],
                "query_vars": [
                    "dict"
                ]
            },
            "provides_defaults_for": {
                "return": [
                    "bool"
                ],
                "rule": [
                    "Rule"
                ]
            },
            "_get_func_code": {
                "return": [
                    "str"
                ],
                "code": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "build_compare_key": {
                "return": [
                    "tuple[typing.Union[int,int,int]]"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Trace"
                ]
            },
            "empty": {
                "return": [
                    "Rule"
                ]
            },
            "refresh": {
                "return": [
                    "None"
                ]
            },
            "get_rules": {
                "return": [
                    "typing.Iterator"
                ],
                "map": [
                    "dict"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "RuleTemplateFactory": {
            "get_rules": {
                "return": [
                    "typing.Iterator"
                ],
                "map": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "context": [
                    "Context"
                ],
                "rules": [
                    "list[Rule]"
                ]
            }
        },
        "global": {
            "parse_converter_args": {
                "return": [
                    "tuple"
                ],
                "argstr": [
                    "str"
                ]
            },
            "_prefix_names": {
                "return": [
                    "ast.Expr"
                ],
                "expected_type": [
                    "typing.Type"
                ],
                "src": [
                    "str"
                ]
            },
            "_pythonize": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_find": {
                "return": [
                    "int"
                ],
                "pos": [
                    "int"
                ],
                "target": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "EndpointPrefix": {
            "get_rules": {
                "return": [
                    "typing.Iterator"
                ],
                "map": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "prefix": [
                    "str"
                ],
                "rules": [
                    "list[Rule]"
                ]
            }
        },
        "Submount": {
            "get_rules": {
                "return": [
                    "typing.Iterator"
                ],
                "map": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "path": [
                    "str"
                ],
                "rules": [
                    "list[Rule]"
                ]
            }
        },
        "Subdomain": {
            "get_rules": {
                "return": [
                    "typing.Iterator"
                ],
                "map": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "rules": [
                    "list[Rule]"
                ],
                "subdomain": [
                    "str"
                ]
            }
        },
        "RuleTemplate": {
            "__call__": {
                "return": [
                    "RuleTemplateFactory"
                ],
                "args": [
                    "list[str]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "list[Rule]"
                ],
                "rules": [
                    "list[Rule]"
                ]
            }
        },
        "Weighting": {
            "global": {
                "number_argument_weights": [
                    "int"
                ],
                "number_static_weights": [
                    "int"
                ],
                "argument_weights": [
                    "dict[str, int]"
                ],
                "static_weights": [
                    "dict[str, int]"
                ]
            }
        },
        "RuleFactory": {
            "get_rules": {
                "return": [
                    "list[Rule]"
                ],
                "map": [
                    "dict"
                ]
            }
        },
        "RulePart": {
            "global": {
                "suffixed": [
                    "str"
                ],
                "content": [
                    "str"
                ],
                "static": [
                    "RulePart"
                ],
                "weight": [
                    "int"
                ],
                "final": [
                    "RulePart"
                ]
            }
        }
    },
    "werkzeug.sansio.multipart": {
        "MultipartDecoder": {
            "next_event": {
                "return": [
                    "Event"
                ]
            },
            "_parse_data": {
                "return": [
                    "tuple[typing.Union[bytes,int,bool]]"
                ],
                "data": [
                    "bytes"
                ],
                "start": [
                    "bool"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "boundary": [
                    "str"
                ],
                "max_form_memory_size": [
                    "typing.Optional[int]"
                ],
                "max_parts": [
                    "int"
                ]
            },
            "_parse_headers": {
                "return": [
                    "Headers"
                ],
                "data": [
                    "bytes"
                ]
            },
            "receive_data": {
                "return": [
                    "None"
                ],
                "data": [
                    "bytes"
                ]
            },
            "last_newline": {
                "return": [
                    "int"
                ],
                "data": [
                    "bytes"
                ]
            }
        },
        "MultipartEncoder": {
            "send_event": {
                "return": [
                    "bytes"
                ],
                "event": [
                    "Event"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "boundary": [
                    "str"
                ]
            }
        },
        "Data": {
            "global": {
                "more_data": [
                    "list[str]"
                ],
                "data": [
                    "Event"
                ]
            }
        },
        "Epilogue": {
            "global": {
                "data": [
                    "str"
                ]
            }
        },
        "Field": {
            "global": {
                "headers": [
                    "list[str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "File": {
            "global": {
                "filename": [
                    "str"
                ],
                "headers": [
                    "dict[str, str]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Preamble": {
            "global": {
                "data": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.debug.tbtools": {
        "global": {
            "_process_traceback": {
                "return": [
                    "None"
                ],
                "exc": [
                    "Exception"
                ],
                "hide": [
                    "bool"
                ],
                "skip": [
                    "int"
                ],
                "te": [
                    "traceback.TracebackException"
                ]
            },
            "render_console_html": {
                "return": [
                    "str"
                ],
                "evalex_trusted": [
                    "bool"
                ],
                "secret": [
                    "str"
                ]
            }
        },
        "DebugTraceback": {
            "render_traceback_html": {
                "return": [
                    "str"
                ],
                "include_title": [
                    "bool"
                ]
            },
            "render_debugger_html": {
                "return": [
                    "str"
                ],
                "evalex": [
                    "bool"
                ],
                "evalex_trusted": [
                    "bool"
                ],
                "secret": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "exc": [
                    "Exception"
                ],
                "hide": [
                    "bool"
                ],
                "skip": [
                    "int"
                ],
                "te": [
                    "typing.Optional[traceback.TracebackType]"
                ]
            },
            "render_traceback_text": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "DebugFrameSummary": {
            "render_html": {
                "return": [
                    "str"
                ],
                "mark_library": [
                    "bool"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "globals": [
                    "dict"
                ],
                "kwargs": [
                    "dict"
                ],
                "locals": [
                    "dict"
                ]
            },
            "eval": {
                "return": [
                    "None"
                ],
                "code": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.http": {
        "global": {
            "parse_options_header": {
                "return": [
                    "tuple[typing.Union[str,dict]]"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "dump_cookie": {
                "return": [
                    "str"
                ],
                "domain": [
                    "typing.Optional[str]"
                ],
                "expires": [
                    "typing.Optional[datetime.datetime]"
                ],
                "httponly": [
                    "bool"
                ],
                "key": [
                    "str"
                ],
                "max_age": [
                    "typing.Optional[datetime.timedelta]"
                ],
                "max_size": [
                    "int"
                ],
                "partitioned": [
                    "bool"
                ],
                "path": [
                    "str"
                ],
                "samesite": [
                    "typing.Optional[str]"
                ],
                "secure": [
                    "bool"
                ],
                "sync_expires": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "parse_range_header": {
                "return": [
                    "typing.Optional[ds.Range]"
                ],
                "make_inclusive": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "parse_content_range_header": {
                "return": [
                    "typing.Optional[ds.ContentRange]"
                ],
                "on_update": [
                    "typing.Optional[str]"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "parse_dict_header": {
                "return": [
                    "dict"
                ],
                "value": [
                    "str"
                ]
            },
            "parse_etags": {
                "return": [
                    "ETags"
                ],
                "value": [
                    "str"
                ]
            },
            "is_resource_modified": {
                "return": [
                    "bool"
                ],
                "data": [
                    "typing.Optional[str]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "etag": [
                    "typing.Optional[str]"
                ],
                "ignore_if_range": [
                    "bool"
                ],
                "last_modified": [
                    "typing.Optional[str]"
                ]
            },
            "http_date": {
                "return": [
                    "str"
                ],
                "timestamp": [
                    "typing.Union[datetime.date, datetime.struct_time]"
                ]
            },
            "dump_header": {
                "return": [
                    "str"
                ],
                "iterable": [
                    "typing.Union[dict,list]"
                ]
            },
            "dump_options_header": {
                "return": [
                    "str"
                ],
                "header": [
                    "typing.Optional[str]"
                ],
                "options": [
                    "dict[str, str]"
                ]
            },
            "quote_header_value": {
                "return": [
                    "str"
                ],
                "allow_token": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "is_byte_range_valid": {
                "return": [
                    "bool"
                ],
                "length": [
                    "typing.Optional[int]"
                ],
                "start": [
                    "typing.Optional[int]"
                ],
                "stop": [
                    "int"
                ]
            },
            "parse_age": {
                "return": [
                    "typing.Optional[datetime.timedelta]"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "parse_cookie": {
                "return": [
                    "Cookie"
                ],
                "cls": [
                    "typing.Type"
                ],
                "header": [
                    "typing.Union[dict,str]"
                ]
            },
            "parse_date": {
                "return": [
                    "typing.Optional[datetime.datetime]"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "dump_age": {
                "return": [
                    "typing.Optional[str]"
                ],
                "age": [
                    "typing.Optional[datetime.timedelta]"
                ]
            },
            "remove_entity_headers": {
                "return": [
                    "None"
                ],
                "allowed": [
                    "tuple[typing.Union[str,str]]"
                ],
                "headers": [
                    "list[tuple[typing.Union[str,str]]]"
                ]
            },
            "parse_list_header": {
                "return": [
                    "list[str]"
                ],
                "value": [
                    "str"
                ]
            },
            "parse_if_range_header": {
                "return": [
                    "IfRange"
                ],
                "value": [
                    "str"
                ]
            },
            "unquote_header_value": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "quote_etag": {
                "return": [
                    "str"
                ],
                "etag": [
                    "str"
                ],
                "weak": [
                    "bool"
                ]
            },
            "parse_set_header": {
                "return": [
                    "HeaderSet"
                ],
                "on_update": [
                    "typing.Callable[str, None]"
                ],
                "value": [
                    "str"
                ]
            },
            "remove_hop_by_hop_headers": {
                "return": [
                    "None"
                ],
                "headers": [
                    "list[tuple[typing.Union[str,str]]]"
                ]
            },
            "dump_csp_header": {
                "return": [
                    "str"
                ],
                "header": [
                    "dict[str, str]"
                ]
            },
            "is_hop_by_hop_header": {
                "return": [
                    "bool"
                ],
                "header": [
                    "str"
                ]
            },
            "is_entity_header": {
                "return": [
                    "bool"
                ],
                "header": [
                    "str"
                ]
            },
            "generate_etag": {
                "return": [
                    "str"
                ],
                "data": [
                    "bytes"
                ]
            }
        }
    },
    "werkzeug.datastructures.csp": {
        "ContentSecurityPolicy": {
            "global": {
                "frame_ancestors": [
                    "str"
                ],
                "script_src_attr": [
                    "str"
                ],
                "script_src_elem": [
                    "str"
                ],
                "style_src_attr": [
                    "str"
                ],
                "style_src_elem": [
                    "str"
                ],
                "manifest_src": [
                    "str"
                ],
                "plugin_types": [
                    "str"
                ],
                "prefetch_src": [
                    "str"
                ],
                "connect_src": [
                    "str"
                ],
                "default_src": [
                    "str"
                ],
                "form_action": [
                    "str"
                ],
                "navigate_to": [
                    "str"
                ],
                "object_src": [
                    "str"
                ],
                "report_uri": [
                    "str"
                ],
                "script_src": [
                    "str"
                ],
                "worker_src": [
                    "str"
                ],
                "child_src": [
                    "str"
                ],
                "frame_src": [
                    "str"
                ],
                "media_src": [
                    "str"
                ],
                "report_to": [
                    "str"
                ],
                "style_src": [
                    "str"
                ],
                "base_uri": [
                    "str"
                ],
                "font_src": [
                    "str"
                ],
                "img_src": [
                    "str"
                ],
                "sandbox": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "on_update": [
                    "typing.Callable"
                ],
                "values": [
                    "typing.Optional[list[str]]"
                ]
            },
            "_set_value": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "_del_value": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "_get_value": {
                "return": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "csp_property": {
                "return": [
                    "typing.Callable"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.exceptions": {
        "HTTPException": {
            "global": {
                "description": [
                    "str"
                ],
                "code": [
                    "typing.Optional[int]"
                ]
            },
            "get_response": {
                "return": [
                    "Response"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            },
            "get_description": {
                "return": [
                    "str"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            },
            "get_body": {
                "return": [
                    "str"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [
                    "typing.Optional[str]"
                ],
                "response": [
                    "typing.Optional[str]"
                ]
            },
            "__call__": {
                "return": [
                    "typing.Iterable[bytes]"
                ],
                "environ": [
                    "dict"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "get_headers": {
                "return": [
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            }
        },
        "global": {
            "_find_exceptions": {
                "return": [
                    "None"
                ]
            },
            "global": {
                "default_exceptions": [
                    "dict[typing.Any, typing.Any]"
                ],
                "_aborter": [
                    "Aborter"
                ]
            },
            "abort": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Optional[list[str]]"
                ],
                "kwargs": [
                    "dict"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "_RetryAfter": {
            "get_headers": {
                "return": [
                    "list[Header]"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [
                    "typing.Optional[str]"
                ],
                "response": [
                    "typing.Optional[typing.Any]"
                ],
                "retry_after": [
                    "typing.Optional[int]"
                ]
            }
        },
        "Unauthorized": {
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [
                    "str"
                ],
                "response": [
                    "typing.Optional[requests.Response]"
                ],
                "www_authenticate": [
                    "typing.Optional[typing.Type]"
                ]
            },
            "get_headers": {
                "return": [
                    "list[str]"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            }
        },
        "Aborter": {
            "__call__": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Union[typing.Any,tuple]"
                ],
                "code": [
                    "Response"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "extra": [
                    "dict[str, Exception]"
                ],
                "mapping": [
                    "dict[str, Exception]"
                ]
            }
        },
        "RequestedRangeNotSatisfiable": {
            "get_headers": {
                "return": [
                    "list[Header]"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [
                    "typing.Optional[str]"
                ],
                "length": [
                    "typing.Optional[int]"
                ],
                "response": [
                    "typing.Optional[str]"
                ],
                "units": [
                    "str"
                ]
            }
        },
        "MethodNotAllowed": {
            "get_headers": {
                "return": [
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "Scope"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [
                    "str"
                ],
                "response": [
                    "typing.Optional[str]"
                ],
                "valid_methods": [
                    "list[str]"
                ]
            }
        },
        "InternalServerError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "description": [
                    "typing.Optional[str]"
                ],
                "original_exception": [
                    "typing.Optional[Exception]"
                ],
                "response": [
                    "typing.Optional[requests.models.Response]"
                ]
            }
        },
        "BadRequestKeyError": {
            "__init__": {
                "arg": [
                    "typing.Optional[str]"
                ],
                "args": [
                    "typing.Optional[str]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        }
    },
    "werkzeug.debug.console": {
        "_InteractiveConsole": {
            "global": {
                "locals": [
                    "dict[str, typing.Any]"
                ]
            },
            "runsource": {
                "return": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ],
                "source": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "locals": [
                    "dict[str, typing.Any]"
                ]
            },
            "showsyntaxerror": {
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ]
            },
            "showtraceback": {
                "return": [
                    "None"
                ]
            },
            "runcode": {
                "return": [
                    "None"
                ],
                "code": [
                    "str"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "data": [
                    "str"
                ]
            }
        },
        "ThreadedStream": {
            "displayhook": {
                "return": [
                    "None"
                ],
                "obj": [
                    "typing.Optional[str]"
                ]
            },
            "push": {
                "return": [
                    "None"
                ]
            },
            "__getattribute__": {
                "return": [
                    "typing.Callable"
                ],
                "name": [
                    "str"
                ]
            },
            "fetch": {
                "return": [
                    "str"
                ]
            },
            "__setattr__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__dir__": {
                "return": [
                    "list[str]"
                ]
            }
        },
        "Console": {
            "__init__": {
                "return": [
                    "None"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "locals": [
                    "dict[str, typing.Any]"
                ]
            },
            "eval": {
                "return": [
                    "str"
                ],
                "code": [
                    "str"
                ]
            }
        },
        "global": {
            "global": {
                "_stream": [
                    "ContextVar"
                ],
                "_ipy": [
                    "ContextVar"
                ]
            }
        },
        "_ConsoleLoader": {
            "register": {
                "return": [
                    "None"
                ],
                "code": [
                    "CodeType"
                ],
                "source": [
                    "CodeType"
                ]
            },
            "get_source_by_code": {
                "return": [
                    "typing.Optional[source.Source]"
                ],
                "code": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "dict"
                ]
            }
        },
        "HTMLStringO": {
            "readline": {
                "return": [
                    "str"
                ]
            },
            "reset": {
                "return": [
                    "str"
                ]
            },
            "writelines": {
                "return": [
                    "None"
                ],
                "x": [
                    "list[str]"
                ]
            },
            "_write": {
                "return": [
                    "None"
                ],
                "x": [
                    "int"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "x": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "seek": {
                "return": [
                    "None"
                ],
                "mode": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            },
            "isatty": {
                "return": [
                    "bool"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "werkzeug.formparser": {
        "MultiPartParser": {
            "parse": {
                "return": [
                    "tuple[typing.Union[Field,FileStorage]]"
                ],
                "boundary": [
                    "str"
                ],
                "content_length": [
                    "int"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "__init__": {
                "return": [
                    "typing.Type"
                ],
                "buffer_size": [
                    "int"
                ],
                "cls": [
                    "typing.Type"
                ],
                "max_form_memory_size": [
                    "typing.Optional[int]"
                ],
                "max_form_parts": [
                    "typing.Optional[int]"
                ],
                "stream_factory": [
                    "typing.Optional[typing.Callable]"
                ]
            },
            "start_file_streaming": {
                "return": [
                    "Stream"
                ],
                "event": [
                    "Event"
                ],
                "total_content_length": [
                    "int"
                ]
            },
            "get_part_charset": {
                "return": [
                    "str"
                ],
                "headers": [
                    "dict[str, str]"
                ]
            },
            "fail": {
                "return": [
                    "None"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "FormDataParser": {
            "parse": {
                "return": [
                    "tuple[typing.Union[typing.IO,typing.Type,typing.Type]]"
                ],
                "content_length": [
                    "int"
                ],
                "mimetype": [
                    "str"
                ],
                "options": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "cls": [
                    "typing.Type"
                ],
                "max_content_length": [
                    "typing.Optional[int]"
                ],
                "max_form_memory_size": [
                    "typing.Optional[int]"
                ],
                "max_form_parts": [
                    "typing.Optional[int]"
                ],
                "silent": [
                    "bool"
                ],
                "stream_factory": [
                    "typing.Optional[typing.Callable]"
                ]
            },
            "_parse_multipart": {
                "return": [
                    "tuple[typing.Union[typing.IO,typing.Any,typing.Any]]"
                ],
                "content_length": [
                    "int"
                ],
                "mimetype": [
                    "str"
                ],
                "options": [
                    "dict"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "_parse_urlencoded": {
                "return": [
                    "tuple[typing.Union[typing.IO,typing.Any,typing.Any]]"
                ],
                "content_length": [
                    "typing.Optional[int]"
                ],
                "mimetype": [
                    "str"
                ],
                "options": [
                    "dict"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "parse_from_environ": {
                "return": [
                    "ParsedResult"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            }
        },
        "global": {
            "default_stream_factory": {
                "return": [
                    "typing.IO"
                ],
                "content_length": [
                    "typing.Optional[int]"
                ],
                "content_type": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "total_content_length": [
                    "typing.Optional[int]"
                ]
            },
            "parse_form_data": {
                "return": [
                    "FormData"
                ],
                "cls": [
                    "typing.Optional[typing.Type]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "max_content_length": [
                    "typing.Optional[int]"
                ],
                "max_form_memory_size": [
                    "typing.Optional[int]"
                ],
                "max_form_parts": [
                    "typing.Optional[int]"
                ],
                "silent": [
                    "bool"
                ],
                "stream_factory": [
                    "typing.Optional[typing.IO]"
                ]
            },
            "_chunk_iter": {
                "return": [
                    "typing.Iterator"
                ],
                "read": [
                    "typing.Callable"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "TStreamFactory": {
            "__call__": {
                "return": [
                    "tuple[typing.Union[int,bytes]]"
                ],
                "content_length": [
                    "typing.Optional[int]"
                ],
                "content_type": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "total_content_length": [
                    "int"
                ]
            }
        }
    },
    "werkzeug.datastructures.cache_control": {
        "_CacheControl": {
            "global": {
                "stale_if_error": [
                    "typing.Optional[int]"
                ],
                "no_transform": [
                    "bool"
                ],
                "no_store": [
                    "typing.Callable[str, bool]"
                ],
                "max_age": [
                    "typing.Optional[int]"
                ]
            },
            "_set_cache_value": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "type": [
                    "typing.Type"
                ],
                "value": [
                    "typing.Union[bool,str]"
                ]
            },
            "_get_cache_value": {
                "return": [
                    "typing.Optional[str]"
                ],
                "empty": [
                    "bool"
                ],
                "key": [
                    "str"
                ],
                "type": [
                    "typing.Optional[str]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "on_update": [
                    "typing.Callable"
                ],
                "values": [
                    "typing.Optional[list[str]]"
                ]
            },
            "_del_cache_value": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "to_header": {
                "return": [
                    "dict[str, str]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "cache_control_property": {
                "return": [
                    "Property"
                ],
                "doc": [
                    "typing.Optional[str]"
                ],
                "empty": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ],
                "type": [
                    "typing.Optional[str]"
                ]
            }
        },
        "ResponseCacheControl": {
            "global": {
                "stale_while_revalidate": [
                    "int"
                ],
                "proxy_revalidate": [
                    "bool"
                ],
                "must_revalidate": [
                    "bool"
                ],
                "must_understand": [
                    "bool"
                ],
                "immutable": [
                    "bool"
                ],
                "no_cache": [
                    "bool"
                ],
                "s_maxage": [
                    "int"
                ],
                "private": [
                    "bool"
                ],
                "public": [
                    "bool"
                ]
            }
        },
        "RequestCacheControl": {
            "global": {
                "only_if_cached": [
                    "bool"
                ],
                "max_stale": [
                    "bool"
                ],
                "min_fresh": [
                    "int"
                ],
                "no_cache": [
                    "bool"
                ]
            }
        }
    },
    "werkzeug.routing.map": {
        "Map": {
            "bind_to_environ": {
                "return": [
                    "typing.Callable"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "server_name": [
                    "typing.Optional[str]"
                ],
                "subdomain": [
                    "typing.Optional[str]"
                ]
            },
            "bind": {
                "return": [
                    "MapAdapter"
                ],
                "default_method": [
                    "str"
                ],
                "path_info": [
                    "typing.Optional[str]"
                ],
                "query_args": [
                    "typing.Optional[dict[str, str]]"
                ],
                "script_name": [
                    "typing.Optional[str]"
                ],
                "server_name": [
                    "str"
                ],
                "subdomain": [
                    "typing.Optional[str]"
                ],
                "url_scheme": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "converters": [
                    "dict[str, str]"
                ],
                "default_subdomain": [
                    "str"
                ],
                "host_matching": [
                    "bool"
                ],
                "merge_slashes": [
                    "bool"
                ],
                "redirect_defaults": [
                    "bool"
                ],
                "rules": [
                    "typing.Optional[list[RuleFactory]]"
                ],
                "sort_key": [
                    "bool"
                ],
                "sort_parameters": [
                    "bool"
                ],
                "strict_slashes": [
                    "bool"
                ]
            },
            "update": {
                "return": [
                    "None"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "rulefactory": [
                    "RuleFactory"
                ]
            },
            "is_endpoint_expecting": {
                "return": [
                    "bool"
                ],
                "arguments": [
                    "list[str]"
                ],
                "endpoint": [
                    "str"
                ]
            },
            "iter_rules": {
                "return": [
                    "typing.Iterator"
                ],
                "endpoint": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "MapAdapter": {
            "build": {
                "return": [
                    "str"
                ],
                "append_unknown": [
                    "bool"
                ],
                "endpoint": [
                    "str"
                ],
                "force_external": [
                    "bool"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "url_scheme": [
                    "typing.Optional[str]"
                ],
                "values": [
                    "typing.Optional[dict[str, typing.Any]]"
                ]
            },
            "_partial_build": {
                "return": [
                    "tuple[typing.Union[str,str,bool]]"
                ],
                "append_unknown": [
                    "bool"
                ],
                "endpoint": [
                    "str"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "values": [
                    "dict"
                ]
            },
            "__init__": {
                "default_method": [
                    "str"
                ],
                "map": [
                    "dict"
                ],
                "path_info": [
                    "str"
                ],
                "query_args": [
                    "typing.Optional[dict[str, str]]"
                ],
                "script_name": [
                    "str"
                ],
                "server_name": [
                    "str"
                ],
                "subdomain": [
                    "str"
                ],
                "url_scheme": [
                    "str"
                ]
            },
            "get_default_redirect": {
                "return": [
                    "typing.Optional[str]"
                ],
                "method": [
                    "str"
                ],
                "query_args": [
                    "dict"
                ],
                "rule": [
                    "RedirectRule"
                ],
                "values": [
                    "dict"
                ]
            },
            "make_redirect_url": {
                "return": [
                    "str"
                ],
                "domain_part": [
                    "typing.Optional[str]"
                ],
                "path_info": [
                    "str"
                ],
                "query_args": [
                    "typing.Optional[dict[str, str]]"
                ]
            },
            "get_host": {
                "return": [
                    "str"
                ],
                "domain_part": [
                    "typing.Optional[str]"
                ]
            },
            "dispatch": {
                "return": [
                    "Response"
                ],
                "catch_http_exceptions": [
                    "bool"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "path_info": [
                    "typing.Optional[str]"
                ],
                "view_func": [
                    "typing.Callable"
                ]
            },
            "make_alias_redirect_url": {
                "return": [
                    "str"
                ],
                "endpoint": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "query_args": [
                    "dict"
                ],
                "values": [
                    "dict"
                ]
            },
            "allowed_methods": {
                "return": [
                    "list[str]"
                ],
                "path_info": [
                    "str"
                ]
            },
            "test": {
                "return": [
                    "bool"
                ],
                "method": [
                    "typing.Optional[str]"
                ],
                "path_info": [
                    "typing.Optional[pathlib.PathInfo]"
                ]
            },
            "encode_query_args": {
                "return": [
                    "str"
                ],
                "query_args": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.middleware.proxy_fix": {
        "ProxyFix": {
            "__call__": {
                "return": [
                    "typing.Callable"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ],
                "x_for": [
                    "int"
                ],
                "x_host": [
                    "int"
                ],
                "x_port": [
                    "int"
                ],
                "x_prefix": [
                    "int"
                ],
                "x_proto": [
                    "int"
                ]
            },
            "_get_real_value": {
                "return": [
                    "typing.Optional[str]"
                ],
                "trusted": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.middleware.shared_data": {
        "SharedDataMiddleware": {
            "__call__": {
                "return": [
                    "typing.Iterable[typing.Any]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ],
                "cache": [
                    "bool"
                ],
                "cache_timeout": [
                    "int"
                ],
                "disallow": [
                    "typing.Optional[str]"
                ],
                "exports": [
                    "dict[str, typing.Any]"
                ],
                "fallback_mimetype": [
                    "str"
                ]
            },
            "get_package_loader": {
                "return": [
                    "typing.Callable"
                ],
                "package": [
                    "str"
                ],
                "package_path": [
                    "str"
                ]
            },
            "get_directory_loader": {
                "return": [
                    "typing.Callable[str, typing.Any]"
                ],
                "directory": [
                    "str"
                ]
            },
            "generate_etag": {
                "return": [
                    "str"
                ],
                "file_size": [
                    "int"
                ],
                "mtime": [
                    "datetime.datetime"
                ],
                "real_filename": [
                    "str"
                ]
            },
            "_opener": {
                "return": [
                    "typing.Callable"
                ],
                "filename": [
                    "str"
                ]
            },
            "get_file_loader": {
                "return": [
                    "typing.Callable"
                ],
                "filename": [
                    "str"
                ]
            },
            "is_allowed": {
                "return": [
                    "bool"
                ],
                "filename": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.middleware.profiler": {
        "ProfilerMiddleware": {
            "__call__": {
                "return": [
                    "typing.Iterable[bytes]"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ],
                "filename_format": [
                    "str"
                ],
                "profile_dir": [
                    "typing.Optional[str]"
                ],
                "restrictions": [
                    "tuple[typing.Union[str,str]]"
                ],
                "sort_by": [
                    "tuple[typing.Union[str,str]]"
                ],
                "stream": [
                    "typing.IO"
                ]
            }
        }
    },
    "werkzeug.sansio.http": {
        "global": {
            "is_resource_modified": {
                "return": [
                    "bool"
                ],
                "data": [
                    "typing.Optional[str]"
                ],
                "etag": [
                    "typing.Optional[str]"
                ],
                "http_if_match": [
                    "typing.Optional[str]"
                ],
                "http_if_modified_since": [
                    "typing.Optional[str]"
                ],
                "http_if_none_match": [
                    "typing.Optional[str]"
                ],
                "http_if_range": [
                    "typing.Optional[str]"
                ],
                "http_range": [
                    "typing.Optional[str]"
                ],
                "ignore_if_range": [
                    "bool"
                ],
                "last_modified": [
                    "typing.Optional[str]"
                ]
            },
            "parse_cookie": {
                "return": [
                    "MultiDict"
                ],
                "cls": [
                    "typing.Type"
                ],
                "cookie": [
                    "str"
                ]
            },
            "_cookie_unslash_replace": {
                "return": [
                    "bytes"
                ],
                "m": [
                    "typing.Match"
                ]
            }
        }
    },
    "werkzeug.testapp": {
        "global": {
            "test_app": {
                "return": [
                    "Response"
                ],
                "req": [
                    "Request"
                ]
            },
            "iter_sys_path": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_get_werkzeug_version": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.middleware.lint": {
        "LintMiddleware": {
            "check_start_response": {
                "return": [
                    "tuple[typing.Union[int,Headers]]"
                ],
                "exc_info": [
                    "typing.Optional[typing.Any]"
                ],
                "headers": [
                    "list[str]"
                ],
                "status": [
                    "str"
                ]
            },
            "__call__": {
                "return": [
                    "typing.Iterator"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "check_environ": {
                "return": [
                    "None"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "check_headers": {
                "return": [
                    "None"
                ],
                "headers": [
                    "dict[str, str]"
                ]
            },
            "check_iterator": {
                "return": [
                    "None"
                ],
                "app_iter": [
                    "typing.Union[str,list[str]]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ]
            }
        },
        "GuardedIterator": {
            "close": {
                "return": [
                    "None"
                ]
            },
            "__next__": {
                "return": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "chunks": [
                    "list[bytes]"
                ],
                "headers_set": [
                    "HeadersSet"
                ],
                "iterator": [
                    "typing.Iterator"
                ]
            },
            "__del__": {
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "InputStream": {
            "readline": {
                "return": [
                    "str"
                ],
                "args": [
                    "str"
                ]
            },
            "read": {
                "return": [
                    "bytes"
                ],
                "args": [
                    "typing.Optional[int]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "stream": [
                    "typing.IO"
                ]
            }
        },
        "global": {
            "check_type": {
                "return": [
                    "None"
                ],
                "context": [
                    "str"
                ],
                "need": [
                    "typing.Type"
                ],
                "obj": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ErrorStream": {
            "close": {
                "return": [
                    "None"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "s": [
                    "str"
                ]
            },
            "writelines": {
                "return": [
                    "None"
                ],
                "seq": [
                    "list[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "flush": {
                "return": [
                    "None"
                ]
            }
        },
        "GuardedWrite": {
            "__call__": {
                "return": [
                    "None"
                ],
                "s": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "chunks": [
                    "list[int]"
                ],
                "write": [
                    "typing.Callable"
                ]
            }
        }
    },
    "werkzeug.datastructures.mixins": {
        "UpdateDictMixin": {
            "global": {
                "on_update": [
                    "None"
                ]
            },
            "update": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "arg": [
                    "typing.Optional[dict]"
                ]
            },
            "setdefault": {
                "return": [
                    "typing.Optional[dict]"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "str"
                ],
                "self": [
                    "str"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            },
            "__ior__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[str,int]"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Union[int,int]]"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            }
        },
        "ImmutableDictMixin": {
            "global": {
                "_hash_cache": [
                    "int"
                ]
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__reduce_ex__": {
                "return": [
                    "tuple"
                ],
                "protocol": [
                    "Protocol"
                ]
            },
            "update": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "arg": [
                    "str"
                ]
            },
            "setdefault": {
                "return": [
                    "None"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "dict[str, typing.Any]"
                ]
            },
            "pop": {
                "return": [
                    "None"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "__ior__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[str,int]"
                ]
            },
            "_iter_hashitems": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Union[str,str]]"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            }
        },
        "ImmutableListMixin": {
            "global": {
                "_hash_cache": [
                    "int"
                ]
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__reduce_ex__": {
                "return": [
                    "tuple"
                ],
                "protocol": [
                    "Protocol"
                ]
            },
            "sort": {
                "return": [
                    "None"
                ],
                "key": [
                    "typing.Optional[str]"
                ],
                "reverse": [
                    "bool"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "dict[str, typing.Any]"
                ]
            },
            "insert": {
                "return": [
                    "None"
                ],
                "pos": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "extend": {
                "return": [
                    "None"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "__iadd__": {
                "return": [
                    "int"
                ],
                "other": [
                    "int"
                ]
            },
            "__imul__": {
                "return": [
                    "int"
                ],
                "other": [
                    "typing.Union[decimal.Decimal, builtins.int]"
                ]
            },
            "pop": {
                "return": [
                    "None"
                ],
                "index": [
                    "int"
                ]
            },
            "append": {
                "return": [
                    "None"
                ],
                "item": [
                    "Item"
                ]
            },
            "remove": {
                "return": [
                    "None"
                ],
                "item": [
                    "Item"
                ]
            },
            "reverse": {
                "return": [
                    "None"
                ],
                "self": [
                    "typing.Iterable[Error]"
                ]
            }
        },
        "global": {
            "_always_update": {
                "return": [
                    "typing.Callable"
                ],
                "f": [
                    "typing.Callable"
                ]
            },
            "_immutable_error": {
                "return": [
                    "None"
                ],
                "self": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "ImmutableMultiDictMixin": {
            "__reduce_ex__": {
                "return": [
                    "tuple"
                ],
                "protocol": [
                    "Protocol"
                ]
            },
            "setlistdefault": {
                "return": [
                    "None"
                ],
                "default_list": [
                    "typing.Optional[list[typing.Any]]"
                ],
                "key": [
                    "str"
                ]
            },
            "_iter_hashitems": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "new_list": [
                    "list"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            },
            "poplist": {
                "return": [
                    "list[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "popitemlist": {
                "return": [
                    "list[str]"
                ]
            }
        },
        "ImmutableHeadersMixin": {
            "add_header": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "set": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "extend": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "arg": [
                    "str"
                ]
            },
            "pop": {
                "return": [
                    "typing.Optional[dict]"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "update": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "arg": [
                    "str"
                ]
            },
            "setlistdefault": {
                "return": [
                    "None"
                ],
                "default": [
                    "list[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "setdefault": {
                "return": [
                    "None"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "dict[str, typing.Any]"
                ]
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "values": [
                    "list[typing.Any]"
                ]
            },
            "insert": {
                "return": [
                    "None"
                ],
                "pos": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            },
            "__ior__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[str,int]"
                ]
            },
            "remove": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Union[str,str]]"
                ]
            }
        }
    },
    "werkzeug._reloader": {
        "WatchdogReloaderLoop": {
            "__init__": {
                "return": [
                    "None"
                ],
                "args": [
                    "tuple[typing.Union[str,...]]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "run_step": {
                "return": [
                    "None"
                ]
            },
            "run": {
                "return": [
                    "None"
                ]
            },
            "__enter__": {
                "return": [
                    "None"
                ]
            },
            "trigger_reload": {
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "global": {
            "_get_args_for_reloading": {
                "return": [
                    "list[str]"
                ]
            },
            "_find_stat_paths": {
                "return": [
                    "set[str]"
                ],
                "exclude_patterns": [
                    "list[str]"
                ],
                "extra_files": [
                    "typing.Iterable[str]"
                ]
            },
            "run_with_reloader": {
                "return": [
                    "None"
                ],
                "exclude_patterns": [
                    "typing.Optional[list[str]]"
                ],
                "extra_files": [
                    "typing.Optional[list[str]]"
                ],
                "interval": [
                    "int"
                ],
                "main_func": [
                    "typing.Callable"
                ],
                "reloader_type": [
                    "str"
                ]
            },
            "global": {
                "reloader_loops": [
                    "dict[str, typing.Type]"
                ]
            },
            "_find_common_roots": {
                "return": [
                    "set[str]"
                ],
                "paths": [
                    "list[str]"
                ]
            },
            "_find_watchdog_paths": {
                "return": [
                    "list[str]"
                ],
                "exclude_patterns": [
                    "list[str]"
                ],
                "extra_files": [
                    "typing.Iterable[str]"
                ]
            },
            "_iter_module_paths": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "ensure_echo_on": {
                "return": [
                    "None"
                ]
            },
            "_remove_by_pattern": {
                "return": [
                    "list[str]"
                ],
                "exclude_patterns": [
                    "list[str]"
                ],
                "paths": [
                    "set[str]"
                ]
            }
        },
        "StatReloaderLoop": {
            "run_step": {
                "return": [
                    "None"
                ]
            },
            "__enter__": {
                "return": [
                    "None"
                ]
            }
        },
        "ReloaderLoop": {
            "restart_with_reloader": {
                "return": [
                    "int"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "exclude_patterns": [
                    "typing.Optional[list[str]]"
                ],
                "extra_files": [
                    "typing.Optional[list[str]]"
                ],
                "interval": [
                    "int"
                ]
            },
            "log_reload": {
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ]
            },
            "run": {
                "return": [
                    "None"
                ]
            },
            "trigger_reload": {
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ]
            },
            "__enter__": {
                "return": [
                    "Step"
                ]
            },
            "run_step": {
                "return": [
                    "None"
                ]
            }
        }
    },
    "werkzeug.security": {
        "global": {
            "_hash_internal": {
                "return": [
                    "tuple[typing.Union[str,str]]"
                ],
                "method": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "salt": [
                    "str"
                ]
            },
            "safe_join": {
                "return": [
                    "typing.Optional[str]"
                ],
                "directory": [
                    "str"
                ],
                "pathnames": [
                    "str"
                ]
            },
            "check_password_hash": {
                "return": [
                    "bool"
                ],
                "password": [
                    "str"
                ],
                "pwhash": [
                    "str"
                ]
            },
            "global": {
                "_os_alt_seps": [
                    "list[str]"
                ]
            },
            "generate_password_hash": {
                "return": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "salt_length": [
                    "int"
                ]
            },
            "gen_salt": {
                "return": [
                    "str"
                ],
                "length": [
                    "int"
                ]
            }
        }
    },
    "werkzeug.datastructures.range": {
        "ContentRange": {
            "global": {
                "length": [
                    "_CallbackProperty"
                ],
                "start": [
                    "_CallbackProperty"
                ],
                "units": [
                    "_CallbackProperty"
                ],
                "stop": [
                    "_CallbackProperty"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "set": {
                "return": [
                    "None"
                ],
                "length": [
                    "typing.Optional[int]"
                ],
                "start": [
                    "int"
                ],
                "stop": [
                    "int"
                ],
                "units": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "length": [
                    "typing.Optional[int]"
                ],
                "on_update": [
                    "typing.Optional[Callback]"
                ],
                "start": [
                    "datetime.datetime"
                ],
                "stop": [
                    "int"
                ],
                "units": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "unset": {
                "return": [
                    "None"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "Range": {
            "range_for_length": {
                "return": [
                    "typing.Optional[tuple[typing.Union[int,int]]]"
                ],
                "length": [
                    "int"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "ranges": [
                    "list[tuple[typing.Union[int,int]]]"
                ],
                "units": [
                    "str"
                ]
            },
            "to_content_range_header": {
                "return": [
                    "typing.Optional[str]"
                ],
                "length": [
                    "int"
                ]
            },
            "make_content_range": {
                "return": [
                    "typing.Optional[ContentRange]"
                ],
                "length": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "IfRange": {
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "date": [
                    "typing.Optional[str]"
                ],
                "etag": [
                    "typing.Optional[str]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "_CallbackProperty": {
            "__set__": {
                "return": [
                    "None"
                ],
                "instance": [
                    "Model"
                ],
                "value": [
                    "str"
                ]
            },
            "__set_name__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "owner": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.wsgi": {
        "LimitedStream": {
            "readinto": {
                "return": [
                    "int"
                ],
                "b": [
                    "bytearray"
                ]
            },
            "readall": {
                "return": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "is_max": [
                    "bool"
                ],
                "limit": [
                    "int"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "on_disconnect": {
                "return": [
                    "None"
                ],
                "error": [
                    "typing.Optional[Exception]"
                ]
            },
            "exhaust": {
                "return": [
                    "bytes"
                ]
            },
            "on_exhausted": {
                "return": [
                    "None"
                ]
            },
            "tell": {
                "return": [
                    "int"
                ]
            },
            "readable": {
                "return": [
                    "bool"
                ]
            }
        },
        "global": {
            "get_input_stream": {
                "return": [
                    "typing.IO"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "max_content_length": [
                    "typing.Optional[int]"
                ],
                "safe_fallback": [
                    "bool"
                ]
            },
            "get_current_url": {
                "return": [
                    "bytes"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "host_only": [
                    "bool"
                ],
                "root_only": [
                    "bool"
                ],
                "strip_querystring": [
                    "bool"
                ],
                "trusted_hosts": [
                    "typing.Optional[list[str]]"
                ]
            },
            "_get_server": {
                "return": [
                    "typing.Optional[tuple[typing.Union[str,int]]]"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "get_content_length": {
                "return": [
                    "int"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "get_host": {
                "return": [
                    "str"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "trusted_hosts": [
                    "typing.Optional[list[str]]"
                ]
            },
            "get_path_info": {
                "return": [
                    "bytes"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "wrap_file": {
                "return": [
                    "typing.IO"
                ],
                "buffer_size": [
                    "int"
                ],
                "environ": [
                    "dict[str, str]"
                ],
                "file": [
                    "typing.IO"
                ]
            },
            "responder": {
                "return": [
                    "typing.Callable"
                ],
                "f": [
                    "typing.Callable"
                ]
            }
        },
        "_RangeWrapper": {
            "_first_iteration": {
                "return": [
                    "tuple[typing.Union[bytes,int]]"
                ]
            },
            "_next": {
                "return": [
                    "bytes"
                ]
            },
            "__init__": {
                "byte_range": [
                    "int"
                ],
                "iterable": [
                    "typing.Iterable"
                ],
                "start_byte": [
                    "int"
                ]
            },
            "_next_chunk": {
                "return": [
                    "bytes"
                ]
            },
            "__next__": {
                "return": [
                    "bytes"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "ClosingIterator": {
            "__init__": {
                "return": [
                    "None"
                ],
                "callbacks": [
                    "typing.Optional[list[typing.Callable]]"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__next__": {
                "return": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "FileWrapper": {
            "seekable": {
                "return": [
                    "bool"
                ]
            },
            "__next__": {
                "return": [
                    "bytes"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "buffer_size": [
                    "int"
                ],
                "file": [
                    "typing.IO"
                ]
            },
            "tell": {
                "return": [
                    "typing.Optional[int]"
                ]
            },
            "seek": {
                "return": [
                    "None"
                ],
                "args": [
                    "int"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        }
    },
    "werkzeug.routing.converters": {
        "NumberConverter": {
            "global": {
                "num_convert": [
                    "typing.Type"
                ]
            },
            "to_python": {
                "return": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "fixed_digits": [
                    "int"
                ],
                "map": [
                    "dict"
                ],
                "max": [
                    "typing.Optional[int]"
                ],
                "min": [
                    "typing.Optional[int]"
                ],
                "signed": [
                    "bool"
                ]
            },
            "to_url": {
                "return": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "UnicodeConverter": {
            "__init__": {
                "return": [
                    "None"
                ],
                "length": [
                    "typing.Optional[int]"
                ],
                "map": [
                    "dict"
                ],
                "maxlength": [
                    "typing.Optional[int]"
                ],
                "minlength": [
                    "int"
                ]
            }
        },
        "global": {
            "global": {
                "DEFAULT_CONVERTERS": [
                    "dict[str, typing.Type]"
                ]
            }
        },
        "AnyConverter": {
            "to_url": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "dict"
                ],
                "items": [
                    "str"
                ],
                "map": [
                    "dict"
                ]
            }
        },
        "BaseConverter": {
            "__init_subclass__": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "to_url": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "dict"
                ],
                "args": [
                    "typing.Iterable"
                ],
                "kwargs": [
                    "dict"
                ],
                "map": [
                    "dict"
                ]
            },
            "to_python": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "FloatConverter": {
            "__init__": {
                "return": [
                    "dict"
                ],
                "map": [
                    "dict"
                ],
                "max": [
                    "typing.Optional[float]"
                ],
                "min": [
                    "typing.Optional[float]"
                ],
                "signed": [
                    "bool"
                ]
            }
        },
        "UUIDConverter": {
            "to_python": {
                "return": [
                    "uuid.UUID"
                ],
                "value": [
                    "str"
                ]
            },
            "to_url": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.routing.exceptions": {
        "BuildError": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "closest_rule": {
                "return": [
                    "typing.Optional[Rule]"
                ],
                "adapter": [
                    "Adapter"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "adapter": [
                    "typing.Optional[typing.Type]"
                ],
                "endpoint": [
                    "str"
                ],
                "method": [
                    "str"
                ],
                "values": [
                    "dict"
                ]
            }
        },
        "NoMatch": {
            "__init__": {
                "return": [
                    "None"
                ],
                "have_match_for": [
                    "list[str]"
                ],
                "websocket_mismatch": [
                    "bool"
                ]
            }
        },
        "RequestAliasRedirect": {
            "__init__": {
                "return": [
                    "None"
                ],
                "endpoint": [
                    "str"
                ],
                "matched_values": [
                    "dict[str, str]"
                ]
            }
        },
        "RequestRedirect": {
            "get_response": {
                "return": [
                    "Response"
                ],
                "environ": [
                    "dict"
                ],
                "scope": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "new_url": [
                    "str"
                ]
            }
        },
        "RequestPath": {
            "__init__": {
                "return": [
                    "None"
                ],
                "path_info": [
                    "PathInfo"
                ]
            }
        }
    },
    "werkzeug.debug.repr": {
        "DebugReprGenerator": {
            "dispatch_repr": {
                "return": [
                    "str"
                ],
                "obj": [
                    "typing.Union[str,typing.Type]"
                ],
                "recursive": [
                    "bool"
                ]
            },
            "dump_object": {
                "return": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            },
            "dict_repr": {
                "return": [
                    "str"
                ],
                "d": [
                    "dict"
                ],
                "limit": [
                    "int"
                ],
                "recursive": [
                    "bool"
                ]
            },
            "string_repr": {
                "return": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "obj": [
                    "str"
                ]
            },
            "render_object_dump": {
                "return": [
                    "str"
                ],
                "items": [
                    "list[tuple[typing.Union[str,str]]]"
                ],
                "repr": [
                    "typing.Optional[str]"
                ],
                "title": [
                    "str"
                ]
            },
            "repr": {
                "return": [
                    "str"
                ],
                "obj": [
                    "Object"
                ]
            },
            "fallback_repr": {
                "return": [
                    "str"
                ]
            },
            "regex_repr": {
                "return": [
                    "str"
                ],
                "obj": [
                    "Regex"
                ]
            },
            "dump_locals": {
                "return": [
                    "str"
                ],
                "d": [
                    "dict[str, typing.Any]"
                ]
            },
            "object_repr": {
                "return": [
                    "str"
                ],
                "obj": [
                    "Object"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "global": {
            "_sequence_repr_maker": {
                "return": [
                    "typing.Callable"
                ],
                "base": [
                    "str"
                ],
                "left": [
                    "str"
                ],
                "limit": [
                    "int"
                ],
                "right": [
                    "str"
                ]
            },
            "_add_subclass_info": {
                "return": [
                    "str"
                ],
                "base": [
                    "typing.Type"
                ],
                "inner": [
                    "str"
                ],
                "obj": [
                    "typing.Union"
                ]
            },
            "dump": {
                "return": [
                    "None"
                ],
                "obj": [
                    "typing.Union[dict,str]"
                ]
            },
            "debug_repr": {
                "return": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            }
        },
        "_Helper": {
            "__call__": {
                "return": [
                    "None"
                ],
                "topic": [
                    "typing.Optional[str]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.accept": {
        "MIMEAccept": {
            "_value_matches": {
                "return": [
                    "bool"
                ],
                "item": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_specificity": {
                "return": [
                    "tuple[typing.Union[bool,...]]"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Accept": {
            "__init__": {
                "return": [
                    "None"
                ],
                "values": [
                    "list[tuple[typing.Union[str,str]]]"
                ]
            },
            "index": {
                "return": [
                    "int"
                ],
                "key": [
                    "typing.Union[str,int]"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "_best_single_match": {
                "return": [
                    "typing.Optional[tuple[typing.Union[ClientItem,Quality]]]"
                ],
                "match": [
                    "Match"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "quality": {
                "return": [
                    "int"
                ],
                "key": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "find": {
                "return": [
                    "int"
                ],
                "key": [
                    "str"
                ]
            },
            "_value_matches": {
                "return": [
                    "bool"
                ],
                "item": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "values": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_specificity": {
                "return": [
                    "tuple[str]"
                ],
                "value": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "CharsetAccept": {
            "_value_matches": {
                "return": [
                    "bool"
                ],
                "item": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "LanguageAccept": {
            "_value_matches": {
                "return": [
                    "bool"
                ],
                "item": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "global": {
            "_normalize_lang": {
                "return": [
                    "list[str]"
                ],
                "value": [
                    "str"
                ]
            },
            "_normalize_mime": {
                "return": [
                    "list[str]"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.headers": {
        "Headers": {
            "update": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "arg": [
                    "typing.Optional[dict]"
                ]
            },
            "set": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "extend": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "arg": [
                    "typing.Optional[dict]"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Node"
                ]
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "values": [
                    "list[str]"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_del_key": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "setdefault": {
                "return": [
                    "typing.Optional[str]"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "_get_key": {
                "return": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "__ior__": {
                "return": [
                    "dict"
                ],
                "other": [
                    "dict[str, typing.Any]"
                ]
            },
            "__or__": {
                "return": [
                    "dict"
                ],
                "other": [
                    "dict"
                ]
            },
            "items": {
                "return": [
                    "typing.Iterator"
                ],
                "lower": [
                    "bool"
                ]
            },
            "setlistdefault": {
                "return": [
                    "list[str]"
                ],
                "default": [
                    "list"
                ],
                "key": [
                    "str"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "typing.Union[str,int]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "defaults": [
                    "list[typing.Any]"
                ]
            },
            "add_header": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "keys": {
                "return": [
                    "typing.Iterator"
                ],
                "lower": [
                    "bool"
                ]
            },
            "values": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "get_all": {
                "return": [
                    "list[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "copy": {
                "return": [
                    "list"
                ]
            },
            "remove": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "popitem": {
                "return": [
                    "typing.Optional[int]"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "to_wsgi_list": {
                "return": [
                    "list[WSGIRequest]"
                ]
            },
            "__copy__": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            }
        },
        "EnvironHeaders": {
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_get_key": {
                "return": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[environ_headers.EnvironHeaders, builtins.str]"
                ]
            },
            "__or__": {
                "return": [
                    "Copy"
                ],
                "other": [
                    "Copy"
                ]
            },
            "copy": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "__init__": {
                "return": [
                    "dict[str, str]"
                ],
                "environ": [
                    "dict[str, str]"
                ]
            },
            "__getitem__": {
                "return": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            }
        },
        "global": {
            "_str_header_value": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_options_header_vkw": {
                "return": [
                    "str"
                ],
                "kw": [
                    "dict[str, str]"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.urls": {
        "global": {
            "iri_to_uri": {
                "return": [
                    "str"
                ],
                "iri": [
                    "str"
                ]
            },
            "uri_to_iri": {
                "return": [
                    "tuple[typing.Union[str,str,str,str]]"
                ],
                "uri": [
                    "str"
                ]
            },
            "_make_unquote_part": {
                "return": [
                    "typing.Callable[str, str]"
                ],
                "chars": [
                    "list[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "_decode_idna": {
                "return": [
                    "str"
                ],
                "domain": [
                    "str"
                ]
            },
            "_urlencode": {
                "return": [
                    "str"
                ],
                "query": [
                    "dict"
                ]
            },
            "_codec_error_url_quote": {
                "return": [
                    "tuple[typing.Union[str,int]]"
                ],
                "e": [
                    "ParseError"
                ]
            }
        }
    },
    "werkzeug.datastructures.file_storage": {
        "FileStorage": {
            "__init__": {
                "content_length": [
                    "typing.Optional[int]"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "headers": [
                    "Headers"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "stream": [
                    "typing.Optional[io.BytesIO]"
                ]
            },
            "save": {
                "return": [
                    "None"
                ],
                "buffer_size": [
                    "int"
                ],
                "dst": [
                    "typing.Union[str,pathlib.Path]"
                ]
            },
            "__getattr__": {
                "return": [
                    "typing.Optional[typing.Any]"
                ],
                "name": [
                    "str"
                ]
            },
            "_parse_content_type": {
                "return": [
                    "dict[str, str]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "FileMultiDict": {
            "add_file": {
                "return": [
                    "None"
                ],
                "content_type": [
                    "typing.Optional[str]"
                ],
                "file": [
                    "typing.Union[str,pathlib.PathLike]"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.structures": {
        "_OrderedMultiDict": {
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[dict,_OrderedMultiDict]"
                ]
            },
            "items": {
                "return": [
                    "typing.Iterator"
                ],
                "multi": [
                    "bool"
                ]
            },
            "__init__": {
                "return": [
                    "OrderedMultiDict"
                ],
                "mapping": [
                    "typing.Optional[dict[str, typing.Any]]"
                ]
            },
            "popitemlist": {
                "return": [
                    "tuple[typing.Union[str,list]]"
                ]
            },
            "lists": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Union[str,typing.Any]]"
                ]
            },
            "poplist": {
                "return": [
                    "list"
                ],
                "key": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "setlistdefault": {
                "return": [
                    "None"
                ],
                "default_list": [
                    "list[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "new_list": [
                    "list"
                ]
            },
            "__setstate__": {
                "return": [
                    "None"
                ],
                "values": [
                    "dict[str, typing.Any]"
                ]
            },
            "update": {
                "return": [
                    "None"
                ],
                "mapping": [
                    "dict"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__reduce_ex__": {
                "return": [
                    "tuple"
                ],
                "protocol": [
                    "Protocol"
                ]
            },
            "listvalues": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "values": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__getstate__": {
                "return": [
                    "list[str]"
                ]
            },
            "keys": {
                "return": [
                    "typing.Iterable[str]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "int"
                ]
            }
        },
        "MultiDict": {
            "__init__": {
                "return": [
                    "None"
                ],
                "mapping": [
                    "typing.Optional[cabc.Mapping]"
                ]
            },
            "popitem": {
                "return": [
                    "tuple[typing.Union[str,str]]"
                ]
            },
            "items": {
                "return": [
                    "typing.Iterator"
                ],
                "multi": [
                    "bool"
                ]
            },
            "__getitem__": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "setlistdefault": {
                "return": [
                    "list[typing.Any]"
                ],
                "default_list": [
                    "typing.Optional[list[typing.Any]]"
                ],
                "key": [
                    "str"
                ]
            },
            "__ior__": {
                "return": [
                    "dict"
                ],
                "other": [
                    "dict[str, typing.Any]"
                ]
            },
            "popitemlist": {
                "return": [
                    "list[str]"
                ]
            },
            "__or__": {
                "return": [
                    "dict"
                ],
                "other": [
                    "dict"
                ]
            },
            "update": {
                "return": [
                    "None"
                ],
                "mapping": [
                    "dict"
                ]
            },
            "deepcopy": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "memo": [
                    "dict"
                ]
            },
            "lists": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "setlist": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "new_list": [
                    "list"
                ]
            },
            "values": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__setstate__": {
                "return": [
                    "None"
                ],
                "value": [
                    "dict"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__deepcopy__": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "memo": [
                    "dict[str, typing.Any]"
                ]
            },
            "poplist": {
                "return": [
                    "list"
                ],
                "key": [
                    "str"
                ]
            },
            "__getstate__": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "listvalues": {
                "return": [
                    "list[str]"
                ]
            },
            "copy": {
                "return": [
                    "Product"
                ]
            },
            "__copy__": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "global": {
            "__getattr__": {
                "return": [
                    "typing.Type"
                ],
                "name": [
                    "str"
                ]
            },
            "iter_multi_items": {
                "return": [
                    "typing.Iterator"
                ],
                "mapping": [
                    "typing.Union[dict,MultiDict]"
                ]
            }
        },
        "HeaderSet": {
            "remove": {
                "return": [
                    "None"
                ],
                "header": [
                    "str"
                ],
                "self": [
                    "str"
                ]
            },
            "update": {
                "return": [
                    "None"
                ],
                "iterable": [
                    "typing.Iterable[str]"
                ],
                "self": [
                    "typing.Iterable[str]"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "idx": [
                    "int"
                ],
                "self": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            },
            "find": {
                "return": [
                    "int"
                ],
                "header": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "headers": [
                    "typing.Optional[list[str]]"
                ],
                "on_update": [
                    "typing.Callable"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "idx": [
                    "int"
                ],
                "self": [
                    "int"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ],
                "self": [
                    "bool"
                ]
            },
            "as_set": {
                "return": [
                    "set[str]"
                ],
                "preserve_casing": [
                    "bool"
                ]
            },
            "index": {
                "return": [
                    "int"
                ],
                "header": [
                    "str"
                ]
            },
            "discard": {
                "return": [
                    "None"
                ],
                "header": [
                    "Header"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "header": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "Header"
                ],
                "idx": [
                    "int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "add": {
                "return": [
                    "None"
                ],
                "header": [
                    "Header"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            }
        },
        "_omd_bucket": {
            "__init__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "omd": [
                    "MutationMetadata"
                ],
                "value": [
                    "int"
                ]
            },
            "unlink": {
                "return": [
                    "None"
                ],
                "omd": [
                    "ObjectiveMetadata"
                ]
            }
        },
        "_ImmutableOrderedMultiDict": {
            "__init__": {
                "return": [
                    "None"
                ],
                "mapping": [
                    "typing.Optional[dict[str, typing.Any]]"
                ]
            },
            "_iter_hashitems": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "copy": {
                "return": [
                    "_OrderedMultiDict"
                ]
            },
            "__copy__": {
                "return": [
                    "Config"
                ]
            }
        },
        "CallbackDict": {
            "__init__": {
                "return": [
                    "None"
                ],
                "initial": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "on_update": [
                    "typing.Optional[typing.Callable]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "CombinedMultiDict": {
            "lists": {
                "return": [
                    "typing.Iterable[str]"
                ]
            },
            "__getitem__": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "fromkeys": {
                "return": [
                    "None"
                ],
                "keys": [
                    "typing.Iterable[str]"
                ],
                "value": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "dicts": [
                    "list[typing.Any]"
                ]
            },
            "__reduce_ex__": {
                "return": [
                    "tuple"
                ],
                "protocol": [
                    "Protocol"
                ]
            },
            "values": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_keys_impl": {
                "return": [
                    "set[str]"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "listvalues": {
                "return": [
                    "typing.Iterable[str]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "keys": {
                "return": [
                    "typing.Iterable[str]"
                ]
            },
            "copy": {
                "return": [
                    "MultiDict"
                ]
            }
        },
        "ImmutableDict": {
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "copy": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "__copy__": {
                "return": [
                    "Config"
                ]
            }
        },
        "ImmutableList": {
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "ImmutableTypeConversionDict": {
            "copy": {
                "return": [
                    "TypeConversionDict"
                ]
            },
            "__copy__": {
                "return": [
                    "Config"
                ]
            }
        },
        "ImmutableMultiDict": {
            "copy": {
                "return": [
                    "MultiDict"
                ]
            },
            "__copy__": {
                "return": [
                    "Config"
                ]
            }
        }
    },
    "werkzeug.sansio.utils": {
        "global": {
            "host_is_trusted": {
                "return": [
                    "bool"
                ],
                "hostname": [
                    "str"
                ],
                "trusted_list": [
                    "typing.Union[str,list[str]]"
                ]
            },
            "get_host": {
                "return": [
                    "str"
                ],
                "host_header": [
                    "typing.Optional[str]"
                ],
                "scheme": [
                    "str"
                ],
                "server": [
                    "typing.Optional[list[str]]"
                ],
                "trusted_hosts": [
                    "typing.Optional[list[str]]"
                ]
            },
            "get_current_url": {
                "return": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "path": [
                    "typing.Optional[str]"
                ],
                "query_string": [
                    "typing.Optional[str]"
                ],
                "root_path": [
                    "typing.Optional[str]"
                ],
                "scheme": [
                    "str"
                ]
            },
            "get_content_length": {
                "return": [
                    "typing.Optional[int]"
                ],
                "http_content_length": [
                    "typing.Optional[str]"
                ],
                "http_transfer_encoding": [
                    "typing.Optional[str]"
                ]
            }
        }
    },
    "werkzeug.datastructures": {
        "global": {
            "__getattr__": {
                "return": [
                    "typing.Type"
                ],
                "name": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.middleware.dispatcher": {
        "DispatcherMiddleware": {
            "__call__": {
                "return": [
                    "typing.Iterable[typing.Any]"
                ],
                "environ": [
                    "dict"
                ],
                "start_response": [
                    "typing.Callable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "app": [
                    "Flask"
                ],
                "mounts": [
                    "dict[str, Mount]"
                ]
            }
        }
    },
    "werkzeug.datastructures.auth": {
        "Authorization": {
            "from_header": {
                "return": [
                    "typing.Optional[AuthHeader]"
                ],
                "value": [
                    "str"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Authorization"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "auth_type": [
                    "str"
                ],
                "data": [
                    "dict"
                ],
                "token": [
                    "typing.Optional[str]"
                ]
            },
            "get": {
                "return": [
                    "typing.Optional[str]"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__getattr__": {
                "return": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "WWWAuthenticate": {
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "from_header": {
                "return": [
                    "typing.Optional[Header]"
                ],
                "value": [
                    "str"
                ]
            },
            "__init__": {
                "auth_type": [
                    "str"
                ],
                "token": [
                    "typing.Optional[str]"
                ],
                "values": [
                    "typing.Optional[dict[str, typing.Any]]"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[WWWAuthenticate, typing.Any]"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "__setattr__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ]
            },
            "_trigger_on_update": {
                "return": [
                    "None"
                ]
            },
            "get": {
                "return": [
                    "typing.Optional[str]"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__getattr__": {
                "return": [
                    "typing.Callable"
                ],
                "name": [
                    "str"
                ]
            },
            "__delattr__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.user_agent": {
        "UserAgent": {
            "global": {
                "language": [
                    "None"
                ],
                "platform": [
                    "None"
                ],
                "browser": [
                    "None"
                ],
                "version": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "string": [
                    "str"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug._internal": {
        "global": {
            "_log": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Union[str,list[typing.Any]]"
                ],
                "kwargs": [
                    "dict"
                ],
                "message": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            },
            "_has_level_handler": {
                "return": [
                    "bool"
                ],
                "logger": [
                    "Logger"
                ]
            },
            "_get_environ": {
                "return": [
                    "dict[str, str]"
                ],
                "obj": [
                    "WSGIRequest"
                ]
            },
            "global": {
                "_logger": [
                    "None"
                ]
            },
            "_plain_int": {
                "return": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            },
            "_wsgi_decoding_dance": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "_wsgi_encoding_dance": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            }
        },
        "_DictAccessorProperty": {
            "__init__": {
                "return": [
                    "None"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "doc": [
                    "typing.Optional[str]"
                ],
                "dump_func": [
                    "typing.Optional[typing.Callable]"
                ],
                "load_func": [
                    "typing.Optional[typing.Callable]"
                ],
                "name": [
                    "str"
                ],
                "read_only": [
                    "typing.Optional[bool]"
                ]
            },
            "__set__": {
                "return": [
                    "None"
                ],
                "instance": [
                    "Instance"
                ],
                "value": [
                    "str"
                ]
            },
            "__delete__": {
                "return": [
                    "None"
                ],
                "instance": [
                    "Instance"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "lookup": {
                "return": [
                    "Instance"
                ],
                "instance": [
                    "Instance"
                ]
            }
        },
        "_ColorStreamHandler": {
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "_Missing": {
            "__reduce__": {
                "return": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "werkzeug.datastructures.etag": {
        "ETags": {
            "__call__": {
                "return": [
                    "bool"
                ],
                "data": [
                    "typing.Optional[typing.Any]"
                ],
                "etag": [
                    "typing.Optional[str]"
                ],
                "include_weak": [
                    "bool"
                ]
            },
            "__init__": {
                "star_tag": [
                    "bool"
                ],
                "strong_etags": [
                    "typing.Optional[set[str]]"
                ],
                "weak_etags": [
                    "typing.Optional[set[str]]"
                ]
            },
            "contains_raw": {
                "return": [
                    "bool"
                ],
                "etag": [
                    "str"
                ]
            },
            "to_header": {
                "return": [
                    "str"
                ]
            },
            "as_set": {
                "return": [
                    "set[str]"
                ],
                "include_weak": [
                    "bool"
                ]
            },
            "contains": {
                "return": [
                    "bool"
                ],
                "etag": [
                    "str"
                ]
            },
            "contains_weak": {
                "return": [
                    "bool"
                ],
                "etag": [
                    "str"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "etag": [
                    "str"
                ]
            },
            "is_strong": {
                "return": [
                    "bool"
                ],
                "etag": [
                    "str"
                ]
            },
            "is_weak": {
                "return": [
                    "bool"
                ],
                "etag": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        }
    }
}