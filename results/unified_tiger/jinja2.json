{
    "jinja2.compiler": {
        "CodeGenerator": {
            "global": {
                "_finalize": [
                    "typing.Callable"
                ]
            },
            "visit_Template": {
                "return": [
                    "Frame"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Template"
                ]
            },
            "visit_For": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "For"
                ]
            },
            "macro_body": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "visit_Output": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Output"
                ]
            },
            "visit_Include": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Include"
                ]
            },
            "visit_FromImport": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "FromImport"
                ]
            },
            "pop_assign_tracking": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "signature": {
                "return": [
                    "None"
                ],
                "extra_kwargs": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "SignatureNode"
                ]
            },
            "visit_Block": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Block"
                ]
            },
            "visit_Extends": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Extends"
                ]
            },
            "pull_dependencies": {
                "return": [
                    "None"
                ],
                "nodes": [
                    "list[TemplateNode]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "defer_init": [
                    "bool"
                ],
                "environment": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "optimized": [
                    "bool"
                ],
                "stream": [
                    "StringIO"
                ]
            },
            "_filter_test_common": {
                "return": [
                    "typing.Iterator"
                ],
                "frame": [
                    "Frame"
                ],
                "is_filter": [
                    "bool"
                ],
                "node": [
                    "TestNode"
                ]
            },
            "_make_finalize": {
                "return": [
                    "typing.Callable"
                ]
            },
            "visit_Call": {
                "return": [
                    "None"
                ],
                "forward_caller": [
                    "bool"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Call"
                ]
            },
            "visit_AssignBlock": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "AssignBlock"
                ]
            },
            "return_buffer_contents": {
                "return": [
                    "None"
                ],
                "force_unescaped": [
                    "bool"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "visit_Assign": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Assign"
                ]
            },
            "enter_frame": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "visit_If": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "If"
                ]
            },
            "visit_Name": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Name"
                ]
            },
            "visit_Getitem": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Getitem"
                ]
            },
            "visit_CondExpr": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "CondExpr"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "x": [
                    "str"
                ]
            },
            "visit_Filter": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Filter"
                ]
            },
            "visit_OverlayScope": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "OverlayScope"
                ]
            },
            "_import_common": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "ImportNode"
                ]
            },
            "macro_def": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "macro_ref": [
                    "MacroRef"
                ]
            },
            "visit_ScopedEvalContextModifier": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "ScopedEvalContextModifier"
                ]
            },
            "visit_Concat": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Concat"
                ]
            },
            "visit_Macro": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Macro"
                ]
            },
            "visit_EvalContextModifier": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "EvalContextModifier"
                ]
            },
            "visit_With": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "With"
                ]
            },
            "visit_FilterBlock": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "FilterBlock"
                ]
            },
            "visit_Import": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Import"
                ]
            },
            "_output_child_pre": {
                "return": [
                    "None"
                ],
                "finalize": [
                    "Expr"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "visit_Getattr": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Getattr"
                ]
            },
            "visit_CallBlock": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "CallBlock"
                ]
            },
            "visit_Slice": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Slice"
                ]
            },
            "write_commons": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "_output_child_to_const": {
                "return": [
                    "str"
                ],
                "finalize": [
                    "ExprFinalizer"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "visit_Dict": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Dict"
                ]
            },
            "leave_frame": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "with_python_scope": [
                    "bool"
                ]
            },
            "newline": {
                "return": [
                    "None"
                ],
                "extra": [
                    "int"
                ],
                "node": [
                    "typing.Optional[lexer.Token]"
                ]
            },
            "visit_Tuple": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Tuple"
                ]
            },
            "visit_TemplateData": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "TemplateData"
                ]
            },
            "visit_Scope": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Scope"
                ]
            },
            "visit_List": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "List"
                ]
            },
            "visit_Compare": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Compare"
                ]
            },
            "blockvisit": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "nodes": [
                    "list[astyping.Block]"
                ]
            },
            "visit_MarkSafeIfAutoescape": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "MarkSafeIfAutoescape"
                ]
            },
            "visit_Const": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Const"
                ]
            },
            "start_write": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "dump_local_context": {
                "return": [
                    "str"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "get_resolve_func": {
                "return": [
                    "str"
                ]
            },
            "parameter_is_undeclared": {
                "return": [
                    "bool"
                ],
                "target": [
                    "str"
                ]
            },
            "visit_Test": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Test"
                ]
            },
            "position": {
                "return": [
                    "str"
                ],
                "node": [
                    "Node"
                ]
            },
            "_output_child_post": {
                "return": [
                    "None"
                ],
                "finalize": [
                    "Node"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "choose_async": {
                "return": [
                    "str"
                ],
                "async_value": [
                    "str"
                ],
                "sync_value": [
                    "str"
                ]
            },
            "visit_ExtensionAttribute": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "ExtensionAttribute"
                ]
            },
            "simple_write": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "typing.Optional[Node]"
                ],
                "s": [
                    "str"
                ]
            },
            "mark_parameter_stored": {
                "return": [
                    "None"
                ],
                "target": [
                    "str"
                ]
            },
            "visit_NSRef": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "NSRef"
                ]
            },
            "visit_MarkSafe": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "MarkSafe"
                ]
            },
            "buffer": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "derive_context": {
                "return": [
                    "str"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "push_parameter_definitions": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "visit_Operand": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Operand"
                ]
            },
            "temporary_identifier": {
                "return": [
                    "str"
                ]
            },
            "visit_Keyword": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Keyword"
                ]
            },
            "fail": {
                "return": [
                    "None"
                ],
                "lineno": [
                    "int"
                ],
                "msg": [
                    "str"
                ]
            },
            "visit_DerivedContextReference": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "DerivedContextReference"
                ]
            },
            "visit_ImportedName": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "ImportedName"
                ]
            },
            "visit_ExprStmt": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "ExprStmt"
                ]
            },
            "visit_EnvironmentAttribute": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "EnvironmentAttribute"
                ]
            },
            "writeline": {
                "return": [
                    "None"
                ],
                "extra": [
                    "int"
                ],
                "node": [
                    "typing.Optional[pytch.greencst.Node]"
                ],
                "x": [
                    "str"
                ]
            },
            "push_context_reference": {
                "return": [
                    "None"
                ],
                "target": [
                    "ContextReference"
                ]
            },
            "end_write": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "visit_Continue": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Continue"
                ]
            },
            "pop_context_reference": {
                "return": [
                    "None"
                ]
            },
            "visit_ContextReference": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "ContextReference"
                ]
            },
            "get_context_ref": {
                "return": [
                    "str"
                ]
            },
            "visit_Break": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Break"
                ]
            },
            "pop_parameter_definitions": {
                "return": [
                    "None"
                ]
            },
            "push_assign_tracking": {
                "return": [
                    "None"
                ]
            },
            "visit_InternalName": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "InternalName"
                ]
            },
            "_output_const_repr": {
                "return": [
                    "str"
                ],
                "group": [
                    "list[str]"
                ]
            },
            "func": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "_default_finalize": {
                "return": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            },
            "outdent": {
                "return": [
                    "None"
                ],
                "step": [
                    "int"
                ]
            },
            "indent": {
                "return": [
                    "None"
                ]
            }
        },
        "Frame": {
            "__init__": {
                "return": [
                    "None"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "level": [
                    "typing.Optional[int]"
                ],
                "parent": [
                    "typing.Optional[Node]"
                ]
            },
            "inner": {
                "return": [
                    "Frame"
                ],
                "isolated": [
                    "bool"
                ]
            },
            "copy": {
                "return": [
                    "SymbolSet"
                ]
            },
            "soft": {
                "return": [
                    "Frame"
                ]
            }
        },
        "global": {
            "_make_binop": {
                "return": [
                    "typing.Callable"
                ],
                "op": [
                    "str"
                ]
            },
            "has_safe_repr": {
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Union[None,typing.Any]"
                ]
            },
            "generate": {
                "return": [
                    "typing.Optional[str]"
                ],
                "defer_init": [
                    "bool"
                ],
                "environment": [
                    "Environment"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "node": [
                    "Node"
                ],
                "optimized": [
                    "bool"
                ],
                "stream": [
                    "typing.Optional[typing.IO]"
                ]
            },
            "_make_unop": {
                "return": [
                    "typing.Callable"
                ],
                "op": [
                    "str"
                ]
            },
            "optimizeconst": {
                "return": [
                    "typing.Callable"
                ],
                "f": [
                    "typing.Callable"
                ]
            },
            "find_undeclared": {
                "return": [
                    "set[str]"
                ],
                "names": [
                    "list[str]"
                ],
                "nodes": [
                    "list[AST]"
                ]
            }
        },
        "UndeclaredNameVisitor": {
            "visit_Name": {
                "return": [
                    "None"
                ],
                "node": [
                    "Name"
                ]
            },
            "__init__": {
                "return": [
                    "set[str]"
                ],
                "names": [
                    "list[str]"
                ]
            },
            "visit_Block": {
                "return": [
                    "None"
                ],
                "node": [
                    "Block"
                ]
            }
        },
        "MacroRef": {
            "__init__": {
                "return": [
                    "None"
                ],
                "node": [
                    "Node"
                ]
            }
        },
        "DependencyFinderVisitor": {
            "visit_Filter": {
                "return": [
                    "None"
                ],
                "node": [
                    "Filter"
                ]
            },
            "visit_Test": {
                "return": [
                    "None"
                ],
                "node": [
                    "Test"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            },
            "visit_Block": {
                "return": [
                    "None"
                ],
                "node": [
                    "Block"
                ]
            }
        },
        "_FinalizeInfo": {
            "global": {
                "const": [
                    "str"
                ],
                "src": [
                    "str"
                ]
            }
        }
    },
    "jinja2.environment": {
        "Environment": {
            "global": {
                "code_generator_class": [
                    "typing.Type"
                ],
                "template_class": [
                    "Template"
                ],
                "context_class": [
                    "typing.Type"
                ],
                "linked_to": [
                    "None"
                ]
            },
            "compile_templates": {
                "return": [
                    "None"
                ],
                "extensions": [
                    "list[str]"
                ],
                "filter_func": [
                    "typing.Optional[typing.Callable]"
                ],
                "ignore_errors": [
                    "bool"
                ],
                "log_function": [
                    "typing.Optional[typing.Callable]"
                ],
                "target": [
                    "str"
                ],
                "zip": [
                    "str"
                ]
            },
            "__init__": {
                "auto_reload": [
                    "bool"
                ],
                "autoescape": [
                    "bool"
                ],
                "block_end_string": [
                    "str"
                ],
                "block_start_string": [
                    "str"
                ],
                "bytecode_cache": [
                    "BytecodeCache"
                ],
                "cache_size": [
                    "int"
                ],
                "comment_end_string": [
                    "str"
                ],
                "comment_start_string": [
                    "str"
                ],
                "enable_async": [
                    "bool"
                ],
                "extensions": [
                    "list[str]"
                ],
                "finalize": [
                    "typing.Optional[bool]"
                ],
                "keep_trailing_newline": [
                    "str"
                ],
                "line_comment_prefix": [
                    "str"
                ],
                "line_statement_prefix": [
                    "str"
                ],
                "loader": [
                    "Loader"
                ],
                "lstrip_blocks": [
                    "int"
                ],
                "newline_sequence": [
                    "str"
                ],
                "optimized": [
                    "bool"
                ],
                "trim_blocks": [
                    "int"
                ],
                "undefined": [
                    "typing.Optional[str]"
                ],
                "variable_end_string": [
                    "str"
                ],
                "variable_start_string": [
                    "str"
                ]
            },
            "overlay": {
                "return": [
                    "EnvironmentConfig"
                ],
                "auto_reload": [
                    "typing.Optional[bool]"
                ],
                "autoescape": [
                    "typing.Optional[bool]"
                ],
                "block_end_string": [
                    "str"
                ],
                "block_start_string": [
                    "str"
                ],
                "bytecode_cache": [
                    "typing.Optional[str]"
                ],
                "cache_size": [
                    "typing.Optional[int]"
                ],
                "comment_end_string": [
                    "str"
                ],
                "comment_start_string": [
                    "str"
                ],
                "enable_async": [
                    "typing.Optional[bool]"
                ],
                "extensions": [
                    "dict[str, typing.Any]"
                ],
                "finalize": [
                    "typing.Callable"
                ],
                "keep_trailing_newline": [
                    "typing.Optional[bool]"
                ],
                "line_comment_prefix": [
                    "str"
                ],
                "line_statement_prefix": [
                    "str"
                ],
                "loader": [
                    "typing.Callable"
                ],
                "lstrip_blocks": [
                    "str"
                ],
                "newline_sequence": [
                    "str"
                ],
                "optimized": [
                    "typing.Optional[bool]"
                ],
                "trim_blocks": [
                    "typing.Optional[bool]"
                ],
                "undefined": [
                    "typing.Optional[str]"
                ],
                "variable_end_string": [
                    "str"
                ],
                "variable_start_string": [
                    "str"
                ]
            },
            "_filter_test_common": {
                "return": [
                    "typing.Callable"
                ],
                "args": [
                    "typing.Optional[list[typing.Any]]"
                ],
                "context": [
                    "EvalContext"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "is_filter": [
                    "bool"
                ],
                "kwargs": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_load_template": {
                "return": [
                    "Template"
                ],
                "globals": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            },
            "compile_expression": {
                "return": [
                    "TemplateExpression"
                ],
                "source": [
                    "str"
                ],
                "undefined_to_none": [
                    "bool"
                ]
            },
            "select_template": {
                "return": [
                    "Template"
                ],
                "globals": [
                    "dict"
                ],
                "names": [
                    "typing.Union[list[str],Template]"
                ],
                "parent": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "list[str]"
                ],
                "extensions": [
                    "typing.Optional[list[str]]"
                ],
                "filter_func": [
                    "typing.Optional[typing.Callable[str, bool]]"
                ]
            },
            "getitem": {
                "return": [
                    "typing.Union[dict,str]"
                ],
                "argument": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            },
            "get_or_select_template": {
                "return": [
                    "Template"
                ],
                "globals": [
                    "dict"
                ],
                "parent": [
                    "Template"
                ],
                "template_name_or_list": [
                    "TemplateOrList"
                ]
            },
            "_tokenize": {
                "return": [
                    "TokenStream"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "State"
                ]
            },
            "getattr": {
                "return": [
                    "typing.Optional[str]"
                ],
                "attribute": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            },
            "get_template": {
                "return": [
                    "Template"
                ],
                "globals": [
                    "dict"
                ],
                "name": [
                    "str"
                ],
                "parent": [
                    "str"
                ]
            },
            "lex": {
                "return": [
                    "typing.Iterator"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "source": [
                    "str"
                ]
            },
            "from_string": {
                "return": [
                    "Template"
                ],
                "globals": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "source": [
                    "str"
                ],
                "template_class": [
                    "typing.Optional[typing.Type]"
                ]
            },
            "parse": {
                "return": [
                    "TemplateResult"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "call_filter": {
                "return": [
                    "bool"
                ],
                "args": [
                    "typing.Optional[list[str]]"
                ],
                "context": [
                    "dict"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "call_test": {
                "return": [
                    "bool"
                ],
                "args": [
                    "typing.Optional[list[str]]"
                ],
                "context": [
                    "dict"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "_generate": {
                "return": [
                    "str"
                ],
                "defer_init": [
                    "bool"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "preprocess": {
                "return": [
                    "str"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "source": [
                    "str"
                ]
            },
            "extend": {
                "return": [
                    "None"
                ],
                "attributes": [
                    "dict"
                ]
            },
            "handle_exception": {
                "return": [
                    "None"
                ],
                "source": [
                    "typing.Optional[str]"
                ]
            },
            "iter_extensions": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "add_extension": {
                "return": [
                    "None"
                ],
                "extension": [
                    "Extension"
                ]
            },
            "_parse": {
                "return": [
                    "Result"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "make_globals": {
                "return": [
                    "dict"
                ],
                "d": [
                    "dict[str, typing.Any]"
                ]
            },
            "_compile": {
                "return": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "join_path": {
                "return": [
                    "str"
                ],
                "parent": [
                    "str"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "Template": {
            "global": {
                "environment_class": [
                    "typing.Type"
                ],
                "root_render_func": [
                    "typing.Callable"
                ],
                "_debug_info": [
                    "str"
                ],
                "environment": [
                    "dict[str, typing.Any]"
                ],
                "_uptodate": [
                    "bool"
                ],
                "filename": [
                    "str"
                ],
                "_module": [
                    "ModuleType"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "blocks": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "__new__": {
                "return": [
                    "Template"
                ],
                "autoescape": [
                    "bool"
                ],
                "block_end_string": [
                    "str"
                ],
                "block_start_string": [
                    "str"
                ],
                "comment_end_string": [
                    "str"
                ],
                "comment_start_string": [
                    "str"
                ],
                "enable_async": [
                    "bool"
                ],
                "extensions": [
                    "typing.Iterable[TemplateExtension]"
                ],
                "finalize": [
                    "typing.Optional[str]"
                ],
                "keep_trailing_newline": [
                    "str"
                ],
                "line_comment_prefix": [
                    "str"
                ],
                "line_statement_prefix": [
                    "str"
                ],
                "lstrip_blocks": [
                    "int"
                ],
                "newline_sequence": [
                    "str"
                ],
                "optimized": [
                    "bool"
                ],
                "source": [
                    "str"
                ],
                "trim_blocks": [
                    "int"
                ],
                "undefined": [
                    "TemplateUndefined"
                ],
                "variable_end_string": [
                    "str"
                ],
                "variable_start_string": [
                    "str"
                ]
            },
            "_from_namespace": {
                "return": [
                    "Template"
                ],
                "environment": [
                    "dict"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "namespace": [
                    "dict[str, typing.Any]"
                ]
            },
            "generate_async": {
                "return": [
                    "typing.Iterator"
                ],
                "args": [
                    "typing.Iterable[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "generate": {
                "return": [
                    "typing.Generator"
                ],
                "args": [
                    "typing.Iterable[str]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "_get_default_module": {
                "return": [
                    "ModuleType"
                ],
                "ctx": [
                    "typing.Optional[discord.ext.commands.Context]"
                ]
            },
            "render_async": {
                "return": [
                    "str"
                ],
                "args": [
                    "typing.Union[str,list]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "render": {
                "return": [
                    "str"
                ],
                "args": [
                    "typing.Union[str,tuple]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "_get_default_module_async": {
                "return": [
                    "ModuleType"
                ],
                "ctx": [
                    "typing.Optional[aiohttp.web.Context]"
                ]
            },
            "from_code": {
                "return": [
                    "typing.Type"
                ],
                "code": [
                    "CodeType"
                ],
                "environment": [
                    "dict[str, str]"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "uptodate": [
                    "bool"
                ]
            },
            "make_module_async": {
                "return": [
                    "TemplateModule"
                ],
                "locals": [
                    "dict"
                ],
                "shared": [
                    "bool"
                ],
                "vars": [
                    "dict"
                ]
            },
            "get_corresponding_lineno": {
                "return": [
                    "int"
                ],
                "lineno": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "new_context": {
                "return": [
                    "Context"
                ],
                "locals": [
                    "dict"
                ],
                "shared": [
                    "bool"
                ],
                "vars": [
                    "dict"
                ]
            },
            "make_module": {
                "return": [
                    "TemplateModule"
                ],
                "locals": [
                    "dict"
                ],
                "shared": [
                    "bool"
                ],
                "vars": [
                    "dict"
                ]
            },
            "from_module_dict": {
                "return": [
                    "typing.Type"
                ],
                "environment": [
                    "dict"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "module_dict": [
                    "dict[str, typing.Any]"
                ]
            },
            "stream": {
                "return": [
                    "TemplateStream"
                ],
                "args": [
                    "typing.Iterable[str]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "TemplateStream": {
            "dump": {
                "return": [
                    "None"
                ],
                "encoding": [
                    "typing.Optional[str]"
                ],
                "errors": [
                    "str"
                ],
                "fp": [
                    "typing.Union[str,typing.IO]"
                ]
            },
            "_buffered_generator": {
                "return": [
                    "typing.Iterator"
                ],
                "size": [
                    "int"
                ]
            },
            "enable_buffering": {
                "return": [
                    "None"
                ],
                "size": [
                    "int"
                ]
            },
            "disable_buffering": {
                "return": [
                    "None"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "gen": [
                    "Generator"
                ]
            },
            "__next__": {
                "return": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "global": {
            "_environment_config_check": {
                "return": [
                    "Environment"
                ],
                "environment": [
                    "Environment"
                ]
            },
            "load_extensions": {
                "return": [
                    "dict"
                ],
                "environment": [
                    "dict"
                ],
                "extensions": [
                    "list[str]"
                ]
            },
            "copy_cache": {
                "return": [
                    "typing.Optional[LRUCache]"
                ],
                "cache": [
                    "typing.Optional[lru_cache.LRUCache]"
                ]
            },
            "get_spontaneous_environment": {
                "return": [
                    "Environment"
                ],
                "args": [
                    "str"
                ],
                "cls": [
                    "typing.Type"
                ]
            },
            "create_cache": {
                "return": [
                    "typing.Optional[dict]"
                ],
                "size": [
                    "int"
                ]
            }
        },
        "TemplateModule": {
            "__init__": {
                "return": [
                    "None"
                ],
                "body_stream": [
                    "typing.Optional[typing.Iterable[bytes]]"
                ],
                "context": [
                    "TemplateContext"
                ],
                "template": [
                    "Template"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__html__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "TemplateExpression": {
            "__call__": {
                "return": [
                    "typing.Optional[str]"
                ],
                "args": [
                    "typing.Union[typing.Any,list,None]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "template": [
                    "str"
                ],
                "undefined_to_none": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "jinja2.lexer": {
        "Lexer": {
            "tokeniter": {
                "return": [
                    "typing.Iterator"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "typing.Optional[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "Environment"
                ]
            },
            "wrap": {
                "return": [
                    "typing.Iterator"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "stream": [
                    "typing.Iterator"
                ]
            },
            "tokenize": {
                "return": [
                    "TokenStream"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "State"
                ]
            },
            "_normalize_newlines": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "global": {
            "global": {
                "_lexer_cache": [
                    "LRUCache"
                ]
            },
            "compile_rules": {
                "return": [
                    "list[str]"
                ],
                "environment": [
                    "Environment"
                ]
            },
            "_describe_token_type": {
                "return": [
                    "str"
                ],
                "token_type": [
                    "str"
                ]
            },
            "get_lexer": {
                "return": [
                    "Lexer"
                ],
                "environment": [
                    "Environment"
                ]
            },
            "describe_token_expr": {
                "return": [
                    "str"
                ],
                "expr": [
                    "str"
                ]
            },
            "describe_token": {
                "return": [
                    "str"
                ],
                "token": [
                    "Token"
                ]
            },
            "count_newlines": {
                "return": [
                    "int"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "TokenStream": {
            "expect": {
                "return": [
                    "TemplateParser"
                ],
                "expr": [
                    "str"
                ]
            },
            "__next__": {
                "return": [
                    "Token"
                ]
            },
            "__init__": {
                "filename": [
                    "str"
                ],
                "generator": [
                    "typing.Iterator"
                ],
                "name": [
                    "str"
                ]
            },
            "look": {
                "return": [
                    "Token"
                ]
            },
            "close": {
                "return": [
                    "None"
                ]
            },
            "next_if": {
                "return": [
                    "typing.Optional[Node]"
                ],
                "expr": [
                    "Expr"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "skip_if": {
                "return": [
                    "bool"
                ],
                "expr": [
                    "Expr"
                ]
            },
            "skip": {
                "return": [
                    "None"
                ],
                "n": [
                    "int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "push": {
                "return": [
                    "None"
                ],
                "token": [
                    "Token"
                ]
            }
        },
        "Token": {
            "global": {
                "lineno": [
                    "int"
                ],
                "value": [
                    "str"
                ],
                "type": [
                    "str"
                ]
            },
            "test": {
                "return": [
                    "bool"
                ],
                "expr": [
                    "str"
                ]
            },
            "test_any": {
                "return": [
                    "bool"
                ],
                "iterable": [
                    "typing.Iterable[Expr]"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "TokenStreamIterator": {
            "__next__": {
                "return": [
                    "Token"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "stream": [
                    "typing.IO"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "Failure": {
            "__init__": {
                "return": [
                    "None"
                ],
                "cls": [
                    "typing.Type"
                ],
                "message": [
                    "str"
                ]
            },
            "__call__": {
                "return": [
                    "None"
                ],
                "filename": [
                    "str"
                ],
                "lineno": [
                    "int"
                ]
            }
        },
        "_Rule": {
            "global": {
                "command": [
                    "str"
                ],
                "pattern": [
                    "str"
                ],
                "tokens": [
                    "list[Token]"
                ]
            }
        }
    },
    "jinja2.sandbox": {
        "SandboxedEnvironment": {
            "global": {
                "default_binop_table": [
                    "dict[str, unknown]"
                ],
                "default_unop_table": [
                    "dict[str, unknown]"
                ],
                "intercepted_binops": [
                    "frozenset"
                ],
                "intercepted_unops": [
                    "frozenset"
                ]
            },
            "wrap_str_format": {
                "return": [
                    "typing.Optional[typing.Callable]"
                ],
                "value": [
                    "typing.Callable"
                ]
            },
            "getitem": {
                "return": [
                    "str"
                ],
                "argument": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            },
            "getattr": {
                "return": [
                    "str"
                ],
                "attribute": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "call": {
                "return": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "__context": [
                    "Context"
                ],
                "__obj": [
                    "typing.Callable"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "unsafe_undefined": {
                "return": [
                    "None"
                ],
                "attribute": [
                    "str"
                ],
                "obj": [
                    "Object"
                ]
            },
            "is_safe_callable": {
                "return": [
                    "bool"
                ],
                "obj": [
                    "Model"
                ]
            },
            "is_safe_attribute": {
                "return": [
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "Model"
                ],
                "value": [
                    "str"
                ]
            },
            "call_binop": {
                "return": [
                    "BinOpResult"
                ],
                "context": [
                    "UserContext"
                ],
                "left": [
                    "Expression"
                ],
                "operator": [
                    "str"
                ],
                "right": [
                    "AST"
                ]
            },
            "call_unop": {
                "return": [
                    "Value"
                ],
                "arg": [
                    "int"
                ],
                "context": [
                    "UserContext"
                ],
                "operator": [
                    "str"
                ]
            }
        },
        "global": {
            "is_internal_attribute": {
                "return": [
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "typing.Union[typing.Type, builtins.str]"
                ]
            },
            "global": {
                "UNSAFE_FUNCTION_ATTRIBUTES": [
                    "set[str]"
                ],
                "UNSAFE_METHOD_ATTRIBUTES": [
                    "set[str]"
                ],
                "_mutable_spec": [
                    "tuple"
                ]
            },
            "safe_range": {
                "return": [
                    "list[int]"
                ],
                "args": [
                    "tuple[typing.Union[int,...]]"
                ]
            },
            "modifies_known_mutable": {
                "return": [
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "typing.Union[typing.Type, builtins.str]"
                ]
            },
            "unsafe": {
                "return": [
                    "Callable"
                ],
                "f": [
                    "Callable"
                ]
            }
        },
        "SandboxedFormatter": {
            "get_field": {
                "return": [
                    "tuple[typing.Union[typing.Any,str]]"
                ],
                "args": [
                    "list"
                ],
                "field_name": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "env": [
                    "Env"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "ImmutableSandboxedEnvironment": {
            "is_safe_attribute": {
                "return": [
                    "bool"
                ],
                "attr": [
                    "str"
                ],
                "obj": [
                    "Model"
                ],
                "value": [
                    "str"
                ]
            }
        }
    },
    "jinja2.nodes": {
        "Node": {
            "global": {
                "environment": [
                    "str"
                ],
                "attributes": [
                    "tuple[typing.Union[str,str]]"
                ],
                "fields": [
                    "tuple"
                ],
                "lineno": [
                    "int"
                ]
            },
            "dump": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "attributes": [
                    "dict"
                ],
                "fields": [
                    "list[str]"
                ]
            },
            "iter_fields": {
                "return": [
                    "typing.Iterator"
                ],
                "exclude": [
                    "typing.Optional[list[str]]"
                ],
                "only": [
                    "typing.Optional[list[str]]"
                ]
            },
            "set_lineno": {
                "return": [
                    "Node"
                ],
                "lineno": [
                    "int"
                ],
                "override": [
                    "bool"
                ]
            },
            "iter_child_nodes": {
                "return": [
                    "typing.Iterator"
                ],
                "exclude": [
                    "typing.Optional[str]"
                ],
                "only": [
                    "typing.Optional[list[Node]]"
                ]
            },
            "set_ctx": {
                "return": [
                    "Node"
                ],
                "ctx": [
                    "Context"
                ]
            },
            "set_environment": {
                "return": [
                    "Node"
                ],
                "environment": [
                    "str"
                ]
            },
            "find_all": {
                "return": [
                    "typing.Iterator"
                ],
                "node_type": [
                    "typing.Type"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Model"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "find": {
                "return": [
                    "typing.Optional[Node]"
                ],
                "node_type": [
                    "str"
                ]
            }
        },
        "_FilterTestCommon": {
            "global": {
                "dyn_kwargs": [
                    "bool"
                ],
                "dyn_args": [
                    "bool"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "name": [
                    "str"
                ],
                "node": [
                    "Expr"
                ]
            },
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "global": {
            "global": {
                "_binop_to_func": [
                    "dict[str, typing.Callable]"
                ],
                "_cmpop_to_func": [
                    "dict[str, typing.Any]"
                ],
                "_uaop_to_func": [
                    "dict[str, typing.Any]"
                ]
            },
            "args_as_const": {
                "return": [
                    "tuple[typing.Union[list,dict]]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "node": [
                    "CallExpr"
                ]
            },
            "get_eval_context": {
                "return": [
                    "EvalContext"
                ],
                "ctx": [
                    "typing.Optional[eval.EvalContext]"
                ],
                "node": [
                    "Node"
                ]
            },
            "_failing_new": {
                "return": [
                    "Node"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "Compare": {
            "global": {
                "expr": [
                    "Expr"
                ],
                "ops": [
                    "list[Op]"
                ]
            },
            "as_const": {
                "return": [
                    "bool"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "BinExpr": {
            "global": {
                "operator": [
                    "str"
                ],
                "right": [
                    "Expr"
                ],
                "left": [
                    "Expr"
                ]
            },
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "UnaryExpr": {
            "global": {
                "operator": [
                    "str"
                ],
                "node": [
                    "Expr"
                ]
            },
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Getitem": {
            "global": {
                "node": [
                    "Expr"
                ],
                "arg": [
                    "Expr"
                ],
                "ctx": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Getattr": {
            "global": {
                "attr": [
                    "str"
                ],
                "node": [
                    "Expr"
                ],
                "ctx": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "typing.Optional[str]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Const": {
            "global": {
                "value": [
                    "str"
                ]
            },
            "from_untrusted": {
                "return": [
                    "typing.Type"
                ],
                "environment": [
                    "dict[str, str]"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ],
                "value": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "const.Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Tuple": {
            "global": {
                "items": [
                    "list[Literal]"
                ],
                "ctx": [
                    "EvalContext"
                ]
            },
            "as_const": {
                "return": [
                    "tuple[typing.Union[typing.Any,...]]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            },
            "can_assign": {
                "return": [
                    "bool"
                ]
            }
        },
        "CondExpr": {
            "global": {
                "expr1": [
                    "str"
                ],
                "expr2": [
                    "tuple[typing.Union[typing.Literal,typing.Literal,typing.Literal]]"
                ],
                "test": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Slice": {
            "global": {
                "start": [
                    "str"
                ],
                "step": [
                    "str"
                ],
                "stop": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "slice"
                ],
                "eval_ctx": [
                    "EvaluationContext"
                ]
            }
        },
        "MarkSafeIfAutoescape": {
            "global": {
                "expr": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "Expr"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "TemplateData": {
            "global": {
                "data": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "EvalContext": {
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "Environment"
                ],
                "template_name": [
                    "str"
                ]
            },
            "revert": {
                "return": [
                    "None"
                ],
                "old": [
                    "dict"
                ]
            },
            "save": {
                "return": [
                    "dict"
                ]
            }
        },
        "Pair": {
            "global": {
                "value": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "tuple[typing.Union[typing.Any,typing.Any]]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Concat": {
            "global": {
                "nodes": [
                    "list[Expr]"
                ]
            },
            "as_const": {
                "return": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Keyword": {
            "global": {
                "value": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "as_const": {
                "return": [
                    "tuple[typing.Union[str,typing.Any]]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Dict": {
            "global": {
                "items": [
                    "list[Literal]"
                ]
            },
            "as_const": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "List": {
            "global": {
                "items": [
                    "list[Literal]"
                ]
            },
            "as_const": {
                "return": [
                    "list[Const]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "MarkSafe": {
            "global": {
                "expr": [
                    "Expr"
                ]
            },
            "as_const": {
                "return": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Filter": {
            "global": {
                "node": [
                    "typing.Optional[astyping.AST]"
                ]
            },
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "InternalName": {
            "global": {
                "name": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ]
            }
        },
        "Name": {
            "global": {
                "name": [
                    "str"
                ],
                "ctx": [
                    "str"
                ]
            },
            "can_assign": {
                "return": [
                    "bool"
                ]
            }
        },
        "And": {
            "as_const": {
                "return": [
                    "bool"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "Or": {
            "as_const": {
                "return": [
                    "const.Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            }
        },
        "NSRef": {
            "global": {
                "attr": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "can_assign": {
                "return": [
                    "bool"
                ]
            }
        },
        "For": {
            "global": {
                "recursive": [
                    "bool"
                ],
                "target": [
                    "str"
                ],
                "else_": [
                    "str"
                ],
                "body": [
                    "Stmt"
                ],
                "iter": [
                    "typing.Type"
                ],
                "test": [
                    "str"
                ]
            }
        },
        "Include": {
            "global": {
                "ignore_missing": [
                    "bool"
                ],
                "with_context": [
                    "bool"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "Call": {
            "global": {
                "dyn_kwargs": [
                    "tuple[typing.Union[str,...]]"
                ],
                "dyn_args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "list[Expr]"
                ],
                "node": [
                    "Expr"
                ]
            }
        },
        "FromImport": {
            "global": {
                "with_context": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "names": [
                    "str"
                ]
            }
        },
        "Import": {
            "global": {
                "with_context": [
                    "str"
                ],
                "template": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "CallBlock": {
            "global": {
                "defaults": [
                    "list[typing.Any]"
                ],
                "args": [
                    "list[str]"
                ],
                "body": [
                    "Stmt"
                ],
                "call": [
                    "Call"
                ]
            }
        },
        "ScopedEvalContextModifier": {
            "global": {
                "body": [
                    "str"
                ]
            }
        },
        "Block": {
            "global": {
                "required": [
                    "bool"
                ],
                "scoped": [
                    "bool"
                ],
                "body": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "ExtensionAttribute": {
            "global": {
                "identifier": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Macro": {
            "global": {
                "defaults": [
                    "dict[str, typing.Any]"
                ],
                "args": [
                    "list[str]"
                ],
                "body": [
                    "Stmt"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "AssignBlock": {
            "global": {
                "filter": [
                    "str"
                ],
                "target": [
                    "str"
                ],
                "body": [
                    "Stmt"
                ]
            }
        },
        "If": {
            "global": {
                "elif_": [
                    "str"
                ],
                "else_": [
                    "str"
                ],
                "body": [
                    "Stmt"
                ],
                "test": [
                    "str"
                ]
            }
        },
        "With": {
            "global": {
                "targets": [
                    "tuple[typing.Union[str,str,str]]"
                ],
                "values": [
                    "tuple[typing.Union[str,str,str]]"
                ],
                "body": [
                    "Stmt"
                ]
            }
        },
        "EvalContextModifier": {
            "global": {
                "options": [
                    "str"
                ]
            }
        },
        "OverlayScope": {
            "global": {
                "context": [
                    "str"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "ImportedName": {
            "global": {
                "importname": [
                    "str"
                ]
            }
        },
        "FilterBlock": {
            "global": {
                "filter": [
                    "str"
                ],
                "body": [
                    "Stmt"
                ]
            }
        },
        "EnvironmentAttribute": {
            "global": {
                "name": [
                    "str"
                ]
            }
        },
        "Assign": {
            "global": {
                "target": [
                    "str"
                ],
                "node": [
                    "str"
                ]
            }
        },
        "Extends": {
            "global": {
                "template": [
                    "str"
                ]
            }
        },
        "Expr": {
            "as_const": {
                "return": [
                    "Const"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            },
            "can_assign": {
                "return": [
                    "bool"
                ]
            }
        },
        "Operand": {
            "global": {
                "expr": [
                    "str"
                ],
                "op": [
                    "str"
                ]
            }
        },
        "ExprStmt": {
            "global": {
                "node": [
                    "str"
                ]
            }
        },
        "Output": {
            "global": {
                "nodes": [
                    "list[str]"
                ]
            }
        },
        "Template": {
            "global": {
                "body": [
                    "str"
                ]
            }
        },
        "Scope": {
            "global": {
                "body": [
                    "str"
                ]
            }
        }
    },
    "jinja2.ext": {
        "InternationalizationExtension": {
            "parse": {
                "return": [
                    "TemplateNode"
                ],
                "parser": [
                    "Parser"
                ]
            },
            "_parse_block": {
                "return": [
                    "tuple[typing.Union[list[str],list[str]]]"
                ],
                "allow_pluralize": [
                    "bool"
                ],
                "parser": [
                    "Parser"
                ]
            },
            "_make_node": {
                "return": [
                    "Output"
                ],
                "context": [
                    "typing.Optional[str]"
                ],
                "num_called_num": [
                    "bool"
                ],
                "plural": [
                    "str"
                ],
                "plural_expr": [
                    "typing.Optional[str]"
                ],
                "singular": [
                    "str"
                ],
                "variables": [
                    "dict[str, typing.Any]"
                ],
                "vars_referenced": [
                    "bool"
                ]
            },
            "_install_callables": {
                "return": [
                    "None"
                ],
                "gettext": [
                    "str"
                ],
                "newstyle": [
                    "typing.Optional[bool]"
                ],
                "ngettext": [
                    "str"
                ],
                "npgettext": [
                    "typing.Optional[str]"
                ],
                "pgettext": [
                    "typing.Optional[str]"
                ]
            },
            "_install_null": {
                "return": [
                    "None"
                ],
                "newstyle": [
                    "typing.Optional[str]"
                ]
            },
            "_install": {
                "return": [
                    "None"
                ],
                "newstyle": [
                    "typing.Optional[str]"
                ],
                "translations": [
                    "Translations"
                ]
            },
            "__init__": {
                "return": [
                    "Environment"
                ],
                "environment": [
                    "Environment"
                ]
            },
            "_extract": {
                "return": [
                    "dict[str, str]"
                ],
                "gettext_functions": [
                    "list[str]"
                ],
                "source": [
                    "typing.Union[str,astyping.AST]"
                ]
            },
            "_uninstall": {
                "return": [
                    "None"
                ],
                "translations": [
                    "dict"
                ]
            },
            "_trim_whitespace": {
                "return": [
                    "str"
                ],
                "_ws_re": [
                    "typing.Pattern"
                ],
                "string": [
                    "str"
                ]
            }
        },
        "global": {
            "babel_extract": {
                "return": [
                    "list[Token]"
                ],
                "comment_tags": [
                    "list[str]"
                ],
                "fileobj": [
                    "typing.IO"
                ],
                "keywords": [
                    "list[str]"
                ],
                "options": [
                    "dict"
                ]
            },
            "extract_from_ast": {
                "return": [
                    "typing.Iterator"
                ],
                "ast": [
                    "BeautifulSoup"
                ],
                "babel_style": [
                    "bool"
                ],
                "gettext_functions": [
                    "list[str]"
                ]
            },
            "_make_new_npgettext": {
                "return": [
                    "typing.Callable"
                ],
                "func": [
                    "typing.Callable"
                ]
            },
            "_make_new_pgettext": {
                "return": [
                    "typing.Callable"
                ],
                "func": [
                    "typing.Callable"
                ]
            },
            "_make_new_ngettext": {
                "return": [
                    "typing.Callable"
                ],
                "func": [
                    "typing.Callable"
                ]
            },
            "global": {
                "GETTEXT_FUNCTIONS": [
                    "tuple[typing.Union[str,str,str,str,str]]"
                ]
            },
            "_make_new_gettext": {
                "return": [
                    "typing.Callable"
                ],
                "func": [
                    "typing.Callable"
                ]
            },
            "_gettext_alias": {
                "return": [
                    "str"
                ],
                "__context": [
                    "Context"
                ],
                "args": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "Extension": {
            "global": {
                "identifier": [
                    "str"
                ],
                "tags": [
                    "set[typing.Any]"
                ]
            },
            "call_method": {
                "return": [
                    "Call"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "dyn_args": [
                    "list[typing.Any]"
                ],
                "dyn_kwargs": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "kwargs": [
                    "list[typing.Any]"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ],
                "name": [
                    "str"
                ]
            },
            "bind": {
                "return": [
                    "Environment"
                ],
                "environment": [
                    "dict"
                ]
            },
            "attr": {
                "return": [
                    "ExtensionAttribute"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ],
                "name": [
                    "str"
                ]
            },
            "__init_subclass__": {
                "return": [
                    "None"
                ]
            },
            "preprocess": {
                "return": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "str"
                ]
            },
            "parse": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "parser": [
                    "Parser"
                ]
            },
            "filter_stream": {
                "return": [
                    "typing.IO"
                ],
                "stream": [
                    "typing.IO"
                ]
            }
        },
        "_CommentFinder": {
            "find_backwards": {
                "return": [
                    "list[str]"
                ],
                "offset": [
                    "int"
                ]
            },
            "find_comments": {
                "return": [
                    "list[str]"
                ],
                "lineno": [
                    "int"
                ]
            },
            "__init__": {
                "return": [
                    "list[Token]"
                ],
                "comment_tags": [
                    "list[str]"
                ],
                "tokens": [
                    "list[Token]"
                ]
            }
        },
        "_TranslationsContext": {
            "npgettext": {
                "return": [
                    "str"
                ],
                "context": [
                    "dict"
                ],
                "n": [
                    "int"
                ],
                "plural": [
                    "str"
                ],
                "singular": [
                    "str"
                ]
            },
            "pgettext": {
                "return": [
                    "str"
                ],
                "context": [
                    "dict"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "_TranslationsBasic": {
            "ngettext": {
                "return": [
                    "str"
                ],
                "n": [
                    "int"
                ],
                "plural": [
                    "str"
                ],
                "singular": [
                    "str"
                ]
            },
            "gettext": {
                "return": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "DebugExtension": {
            "parse": {
                "return": [
                    "Output"
                ],
                "parser": [
                    "Parser"
                ]
            },
            "_render": {
                "return": [
                    "str"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "LoopControlExtension": {
            "parse": {
                "return": [
                    "Continue"
                ],
                "parser": [
                    "Parser"
                ]
            }
        },
        "ExprStmtExtension": {
            "parse": {
                "return": [
                    "ExprStmt"
                ],
                "parser": [
                    "Parser"
                ]
            }
        }
    },
    "jinja2.runtime": {
        "LoopContext": {
            "global": {
                "_last_changed_value": [
                    "typing.Optional[typing.Any]"
                ],
                "_current": [
                    "typing.Optional[typing.Any]"
                ],
                "_before": [
                    "typing.Optional[typing.Any]"
                ],
                "_length": [
                    "int"
                ],
                "_after": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "__next__": {
                "return": [
                    "tuple[typing.Union[typing.Any,Node]]"
                ]
            },
            "__call__": {
                "return": [
                    "typing.Iterable"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "depth0": [
                    "int"
                ],
                "iterable": [
                    "typing.Iterable"
                ],
                "recurse": [
                    "typing.Optional[bool]"
                ],
                "undefined": [
                    "typing.Optional[bool]"
                ]
            },
            "_peek_next": {
                "return": [
                    "str"
                ]
            },
            "changed": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "cycle": {
                "return": [
                    "list[typing.Any]"
                ],
                "args": [
                    "list"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "_to_iterator": {
                "return": [
                    "typing.Iterator"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "AsyncLoopContext": {
            "global": {
                "_iterator": [
                    "typing.Iterator"
                ]
            },
            "__anext__": {
                "return": [
                    "tuple[typing.Union[typing.Any,Iterator]]"
                ]
            },
            "_peek_next": {
                "return": [
                    "str"
                ]
            },
            "_to_iterator": {
                "return": [
                    "typing.Iterator"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "__aiter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "Macro": {
            "__call__": {
                "return": [
                    "typing.Union"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict[str, typing.Any]"
                ]
            },
            "__init__": {
                "arguments": [
                    "list[str]"
                ],
                "caller": [
                    "typing.Optional[str]"
                ],
                "catch_kwargs": [
                    "bool"
                ],
                "catch_varargs": [
                    "bool"
                ],
                "default_autoescape": [
                    "typing.Optional[bool]"
                ],
                "environment": [
                    "Environment"
                ],
                "func": [
                    "typing.Callable"
                ],
                "name": [
                    "str"
                ]
            },
            "_invoke": {
                "return": [
                    "str"
                ],
                "arguments": [
                    "list"
                ],
                "autoescape": [
                    "bool"
                ]
            },
            "_async_invoke": {
                "return": [
                    "str"
                ],
                "arguments": [
                    "list"
                ],
                "autoescape": [
                    "bool"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "global": {
            "make_logging_undefined": {
                "return": [
                    "Undefined"
                ],
                "base": [
                    "typing.Type"
                ],
                "logger": [
                    "logging.Logger"
                ]
            },
            "new_context": {
                "return": [
                    "Context"
                ],
                "blocks": [
                    "list[Block]"
                ],
                "environment": [
                    "Environment"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "locals": [
                    "dict"
                ],
                "shared": [
                    "bool"
                ],
                "template_name": [
                    "str"
                ],
                "vars": [
                    "dict[str, typing.Any]"
                ]
            },
            "markup_join": {
                "return": [
                    "str"
                ],
                "seq": [
                    "typing.Iterable[str]"
                ]
            },
            "_dict_method_all": {
                "return": [
                    "F"
                ],
                "dict_method": [
                    "typing.Callable"
                ]
            },
            "str_join": {
                "return": [
                    "str"
                ],
                "seq": [
                    "typing.Iterable[str]"
                ]
            },
            "identity": {
                "return": [
                    "int"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "Context": {
            "call": {
                "return": [
                    "Value"
                ],
                "__obj": [
                    "typing.Callable"
                ],
                "args": [
                    "typing.Iterable"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__init__": {
                "blocks": [
                    "dict"
                ],
                "environment": [
                    "dict"
                ],
                "globals": [
                    "typing.Optional[dict[str, typing.Any]]"
                ],
                "name": [
                    "str"
                ],
                "parent": [
                    "Node"
                ]
            },
            "super": {
                "return": [
                    "BlockReference"
                ],
                "current": [
                    "Block"
                ],
                "name": [
                    "str"
                ]
            },
            "derived": {
                "return": [
                    "Context"
                ],
                "locals": [
                    "dict"
                ]
            },
            "resolve_or_missing": {
                "return": [
                    "Variable"
                ],
                "key": [
                    "str"
                ]
            },
            "get_all": {
                "return": [
                    "dict"
                ]
            },
            "resolve": {
                "return": [
                    "Value"
                ],
                "key": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "typing.Union"
                ],
                "key": [
                    "str"
                ]
            },
            "get": {
                "return": [
                    "typing.Optional[str]"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "name": [
                    "str"
                ]
            },
            "get_exported": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            }
        },
        "DebugUndefined": {
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "BlockReference": {
            "__call__": {
                "return": [
                    "str"
                ]
            },
            "_async_call": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "context": [
                    "Context"
                ],
                "depth": [
                    "int"
                ],
                "name": [
                    "str"
                ],
                "stack": [
                    "Stack"
                ]
            }
        },
        "Undefined": {
            "__init__": {
                "return": [
                    "None"
                ],
                "exc": [
                    "typing.Type"
                ],
                "hint": [
                    "str"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "obj": [
                    "typing.Type"
                ]
            },
            "__getattr__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            },
            "_fail_with_undefined_error": {
                "return": [
                    "None"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__eq__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "Type"
                ]
            },
            "__ne__": {
                "return": [
                    "bool"
                ],
                "other": [
                    "typing.Union[str,int]"
                ]
            },
            "__aiter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__hash__": {
                "return": [
                    "int"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__bool__": {
                "return": [
                    "bool"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            }
        },
        "TemplateReference": {
            "__getitem__": {
                "return": [
                    "BlockReference"
                ],
                "name": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "context": [
                    "Context"
                ]
            }
        },
        "ChainableUndefined": {
            "__getattr__": {
                "return": [
                    "Object"
                ],
                "name": [
                    "str"
                ]
            },
            "__getitem__": {
                "return": [
                    "dict[str, typing.Any]"
                ],
                "_name": [
                    "str"
                ]
            },
            "__html__": {
                "return": [
                    "str"
                ]
            }
        },
        "LoopRenderFunc": {
            "__call__": {
                "return": [
                    "None"
                ],
                "depth": [
                    "int"
                ],
                "loop_render_func": [
                    "typing.Callable"
                ],
                "reciter": [
                    "Reciter"
                ]
            }
        }
    },
    "jinja2.utils": {
        "global": {
            "urlize": {
                "return": [
                    "str"
                ],
                "extra_schemes": [
                    "typing.Optional[list[str]]"
                ],
                "rel": [
                    "typing.Optional[str]"
                ],
                "target": [
                    "typing.Optional[str]"
                ],
                "text": [
                    "str"
                ],
                "trim_url_limit": [
                    "typing.Optional[int]"
                ]
            },
            "generate_lorem_ipsum": {
                "return": [
                    "str"
                ],
                "html": [
                    "bool"
                ],
                "max": [
                    "int"
                ],
                "min": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            },
            "global": {
                "internal_code": [
                    "set[typing.Any]"
                ],
                "missing": [
                    "_MissingType"
                ]
            },
            "select_autoescape": {
                "return": [
                    "typing.Callable[str, bool]"
                ],
                "default": [
                    "bool"
                ],
                "default_for_string": [
                    "bool"
                ],
                "disabled_extensions": [
                    "typing.Iterable[str]"
                ],
                "enabled_extensions": [
                    "tuple[typing.Union[str,str,str]]"
                ]
            },
            "import_string": {
                "return": [
                    "typing.Type"
                ],
                "import_name": [
                    "str"
                ],
                "silent": [
                    "bool"
                ]
            },
            "url_quote": {
                "return": [
                    "str"
                ],
                "charset": [
                    "str"
                ],
                "for_qs": [
                    "bool"
                ],
                "obj": [
                    "typing.Union[str,bytes]"
                ]
            },
            "object_type_repr": {
                "return": [
                    "str"
                ],
                "obj": [
                    "typing.Optional[typing.Any]"
                ]
            },
            "htmlsafe_json_dumps": {
                "return": [
                    "str"
                ],
                "dumps": [
                    "typing.Callable"
                ],
                "kwargs": [
                    "dict"
                ],
                "obj": [
                    "dict"
                ]
            },
            "clear_caches": {
                "return": [
                    "None"
                ]
            },
            "open_if_exists": {
                "return": [
                    "typing.Optional[typing.IO]"
                ],
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            },
            "is_undefined": {
                "return": [
                    "bool"
                ],
                "obj": [
                    "Object"
                ]
            },
            "pass_eval_context": {
                "return": [
                    "typing.Callable"
                ],
                "f": [
                    "typing.Callable"
                ]
            },
            "pass_environment": {
                "return": [
                    "Pass"
                ],
                "f": [
                    "Pass"
                ]
            },
            "pass_context": {
                "return": [
                    "typing.Callable"
                ],
                "f": [
                    "typing.Callable"
                ]
            },
            "pformat": {
                "return": [
                    "str"
                ],
                "obj": [
                    "dict"
                ]
            },
            "internalcode": {
                "return": [
                    "typing.Callable"
                ],
                "f": [
                    "typing.Callable"
                ]
            },
            "consume": {
                "return": [
                    "None"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            }
        },
        "LRUCache": {
            "__setitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            },
            "__getitem__": {
                "return": [
                    "tuple[typing.Union[int,int]]"
                ],
                "key": [
                    "int"
                ]
            },
            "_postinit": {
                "return": [
                    "None"
                ]
            },
            "__delitem__": {
                "return": [
                    "None"
                ],
                "key": [
                    "int"
                ]
            },
            "setdefault": {
                "return": [
                    "typing.Optional[typing.Any]"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "key": [
                    "str"
                ]
            },
            "copy": {
                "return": [
                    "Queue"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "capacity": [
                    "int"
                ]
            },
            "items": {
                "return": [
                    "list[tuple[typing.Union[str,str]]]"
                ]
            },
            "__getstate__": {
                "return": [
                    "dict[str, typing.Any]"
                ]
            },
            "get": {
                "return": [
                    "typing.Optional[str]"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__setstate__": {
                "return": [
                    "None"
                ],
                "d": [
                    "dict[str, typing.Any]"
                ]
            },
            "__contains__": {
                "return": [
                    "bool"
                ],
                "key": [
                    "str"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "__reversed__": {
                "return": [
                    "typing.Iterator"
                ]
            },
            "values": {
                "return": [
                    "list[str]"
                ]
            },
            "__getnewargs__": {
                "return": [
                    "tuple[int]"
                ]
            },
            "__len__": {
                "return": [
                    "int"
                ]
            },
            "keys": {
                "return": [
                    "list[str]"
                ]
            }
        },
        "Namespace": {
            "__getattribute__": {
                "return": [
                    "Attribute"
                ],
                "name": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "args": [
                    "tuple"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "__setitem__": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        },
        "Cycler": {
            "__init__": {
                "return": [
                    "None"
                ],
                "items": [
                    "list[int]"
                ]
            },
            "next": {
                "return": [
                    "int"
                ]
            },
            "reset": {
                "return": [
                    "None"
                ]
            }
        },
        "_PassArg": {
            "from_obj": {
                "return": [
                    "typing.Optional[str]"
                ],
                "obj": [
                    "typing.Union[jinja2.environment.Environment, jinja2.environment.EnvironmentVar]"
                ]
            }
        },
        "Joiner": {
            "__call__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "sep": [
                    "str"
                ]
            }
        },
        "_MissingType": {
            "__reduce__": {
                "return": [
                    "str"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "jinja2.loaders": {
        "PackageLoader": {
            "__init__": {
                "return": [
                    "None"
                ],
                "encoding": [
                    "str"
                ],
                "package_name": [
                    "str"
                ],
                "package_path": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "list[str]"
                ]
            },
            "get_source": {
                "return": [
                    "tuple[typing.Union[bytes,str,None,None]]"
                ],
                "environment": [
                    "dict"
                ],
                "template": [
                    "str"
                ]
            }
        },
        "FileSystemLoader": {
            "get_source": {
                "return": [
                    "tuple[typing.Union[str,str,bool]]"
                ],
                "environment": [
                    "dict"
                ],
                "template": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "list[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "encoding": [
                    "str"
                ],
                "followlinks": [
                    "bool"
                ],
                "searchpath": [
                    "typing.Union[str,list[str]]"
                ]
            }
        },
        "BaseLoader": {
            "load": {
                "return": [
                    "Template"
                ],
                "environment": [
                    "Environment"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str"
                ]
            },
            "get_source": {
                "return": [
                    "str"
                ],
                "environment": [
                    "dict"
                ],
                "template": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "typing.Iterator"
                ]
            }
        },
        "ModuleLoader": {
            "load": {
                "return": [
                    "Template"
                ],
                "environment": [
                    "Environment"
                ],
                "globals": [
                    "dict[str, typing.Any]"
                ],
                "name": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "path": [
                    "typing.Union[str,list[str]]"
                ]
            },
            "get_template_key": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            },
            "get_module_filename": {
                "return": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "global": {
            "split_template_path": {
                "return": [
                    "list[str]"
                ],
                "template": [
                    "str"
                ]
            },
            "_get_zipimporter_files": {
                "z": [
                    "ZipFile"
                ],
                "return": [
                    "list[Path]"
                ]
            }
        },
        "PrefixLoader": {
            "load": {
                "return": [
                    "dict"
                ],
                "environment": [
                    "dict"
                ],
                "globals": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            },
            "get_loader": {
                "return": [
                    "tuple[typing.Union[TemplateLoader,str]]"
                ],
                "template": [
                    "str"
                ]
            },
            "get_source": {
                "return": [
                    "str"
                ],
                "environment": [
                    "dict"
                ],
                "template": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "list[str]"
                ]
            },
            "__init__": {
                "return": [
                    "dict[str, str]"
                ],
                "delimiter": [
                    "str"
                ],
                "mapping": [
                    "dict[str, str]"
                ]
            }
        },
        "ChoiceLoader": {
            "load": {
                "return": [
                    "Template"
                ],
                "environment": [
                    "dict"
                ],
                "globals": [
                    "dict"
                ],
                "name": [
                    "str"
                ]
            },
            "get_source": {
                "return": [
                    "str"
                ],
                "environment": [
                    "dict"
                ],
                "template": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "list[str]"
                ]
            },
            "__init__": {
                "return": [
                    "typing.Iterable[Loader]"
                ],
                "loaders": [
                    "list[Loader]"
                ]
            }
        },
        "DictLoader": {
            "get_source": {
                "return": [
                    "tuple[typing.Union[str,None,typing.Callable[str, bool]]]"
                ],
                "environment": [
                    "Environment"
                ],
                "template": [
                    "str"
                ]
            },
            "list_templates": {
                "return": [
                    "list[str]"
                ]
            },
            "__init__": {
                "return": [
                    "dict"
                ],
                "mapping": [
                    "dict[str, str]"
                ]
            }
        },
        "FunctionLoader": {
            "get_source": {
                "return": [
                    "tuple[typing.Union[str,None,None,None]]"
                ],
                "environment": [
                    "dict"
                ],
                "template": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "typing.Callable"
                ],
                "load_func": [
                    "typing.Callable"
                ]
            }
        }
    },
    "jinja2.parser": {
        "Parser": {
            "parse_primary": {
                "return": [
                    "Node"
                ],
                "with_namespace": [
                    "bool"
                ]
            },
            "subparse": {
                "return": [
                    "list[typing.Any]"
                ],
                "end_tokens": [
                    "typing.Optional[list[Token]]"
                ]
            },
            "parse_call_args": {
                "return": [
                    "tuple"
                ]
            },
            "parse_from": {
                "return": [
                    "FromImport"
                ]
            },
            "parse_test": {
                "return": [
                    "Test"
                ],
                "node": [
                    "Test"
                ]
            },
            "parse_subscript": {
                "return": [
                    "Node"
                ],
                "node": [
                    "Node"
                ]
            },
            "parse_tuple": {
                "return": [
                    "Node"
                ],
                "explicit_parentheses": [
                    "bool"
                ],
                "extra_end_rules": [
                    "typing.Optional[list[str]]"
                ],
                "simplified": [
                    "bool"
                ],
                "with_condexpr": [
                    "bool"
                ],
                "with_namespace": [
                    "bool"
                ]
            },
            "_fail_ut_eof": {
                "return": [
                    "None"
                ],
                "end_token_stack": [
                    "list[list[typing.Any]]"
                ],
                "lineno": [
                    "int"
                ],
                "name": [
                    "typing.Optional[str]"
                ]
            },
            "parse_block": {
                "return": [
                    "Block"
                ]
            },
            "parse_subscribed": {
                "return": [
                    "Slice"
                ]
            },
            "parse_statement": {
                "return": [
                    "Statement"
                ]
            },
            "parse_compare": {
                "return": [
                    "Expr"
                ]
            },
            "parse_filter": {
                "return": [
                    "Filter"
                ],
                "node": [
                    "Filter"
                ],
                "start_inline": [
                    "bool"
                ]
            },
            "parse_for": {
                "return": [
                    "For"
                ]
            },
            "parse_if": {
                "return": [
                    "If"
                ]
            },
            "parse_signature": {
                "return": [
                    "SignatureNode"
                ],
                "node": [
                    "SignatureNode"
                ]
            },
            "parse_with": {
                "return": [
                    "With"
                ]
            },
            "parse_unary": {
                "return": [
                    "AST"
                ],
                "with_filter": [
                    "bool"
                ]
            },
            "parse_dict": {
                "return": [
                    "dict"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "Environment"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "typing.Optional[str]"
                ],
                "source": [
                    "str"
                ],
                "state": [
                    "State"
                ]
            },
            "parse_call_block": {
                "return": [
                    "CallBlock"
                ]
            },
            "parse_set": {
                "return": [
                    "AssignBlock"
                ]
            },
            "parse_condexpr": {
                "return": [
                    "typing.Optional[nodes.CondExpr]"
                ]
            },
            "parse_filter_expr": {
                "return": [
                    "Node"
                ],
                "node": [
                    "Node"
                ]
            },
            "parse_list": {
                "return": [
                    "list"
                ]
            },
            "parse_math2": {
                "return": [
                    "Node"
                ]
            },
            "parse_include": {
                "return": [
                    "ImportContext"
                ]
            },
            "parse_math1": {
                "return": [
                    "Node"
                ]
            },
            "parse_postfix": {
                "return": [
                    "Node"
                ],
                "node": [
                    "Node"
                ]
            },
            "parse_pow": {
                "return": [
                    "AST"
                ]
            },
            "parse_import_context": {
                "return": [
                    "ImportContext"
                ],
                "default": [
                    "bool"
                ],
                "node": [
                    "ImportContext"
                ]
            },
            "parse_statements": {
                "return": [
                    "list[Statement]"
                ],
                "drop_needle": [
                    "bool"
                ],
                "end_tokens": [
                    "list[Token]"
                ]
            },
            "parse_concat": {
                "return": [
                    "Node"
                ]
            },
            "parse_autoescape": {
                "return": [
                    "Scope"
                ]
            },
            "parse_print": {
                "return": [
                    "Output"
                ]
            },
            "parse_and": {
                "return": [
                    "AST"
                ]
            },
            "parse_or": {
                "return": [
                    "Or"
                ]
            },
            "parse_import": {
                "return": [
                    "ImportContext"
                ]
            },
            "parse_macro": {
                "return": [
                    "Macro"
                ]
            },
            "is_tuple_end": {
                "return": [
                    "bool"
                ],
                "extra_end_rules": [
                    "typing.Optional[list[Rule]]"
                ]
            },
            "parse_filter_block": {
                "return": [
                    "FilterBlock"
                ]
            },
            "parse_call": {
                "return": [
                    "Call"
                ],
                "node": [
                    "Node"
                ]
            },
            "free_identifier": {
                "return": [
                    "InternalName"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ]
            },
            "parse_not": {
                "return": [
                    "Node"
                ]
            },
            "fail_eof": {
                "return": [
                    "None"
                ],
                "end_tokens": [
                    "list[Token]"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ]
            },
            "fail": {
                "return": [
                    "None"
                ],
                "exc": [
                    "typing.Type"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ],
                "msg": [
                    "str"
                ]
            },
            "parse_extends": {
                "return": [
                    "Extends"
                ]
            },
            "parse": {
                "return": [
                    "Template"
                ]
            },
            "parse_expression": {
                "return": [
                    "Expression"
                ],
                "with_condexpr": [
                    "bool"
                ]
            },
            "fail_unknown_tag": {
                "return": [
                    "None"
                ],
                "lineno": [
                    "typing.Optional[int]"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "global": {
            "global": {
                "_math_nodes": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "jinja2.debug": {
        "global": {
            "fake_traceback": {
                "return": [
                    "typing.Optional[traceback.TracebackType]"
                ],
                "exc_value": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "lineno": [
                    "int"
                ],
                "tb": [
                    "typing.Optional[traceback.TracebackType]"
                ]
            },
            "rewrite_traceback_stack": {
                "return": [
                    "BaseException"
                ],
                "source": [
                    "str"
                ]
            },
            "get_template_locals": {
                "return": [
                    "dict"
                ],
                "real_locals": [
                    "dict[str, typing.Any]"
                ]
            }
        }
    },
    "jinja2.bccache": {
        "FileSystemBytecodeCache": {
            "_get_default_cache_dir": {
                "return": [
                    "str"
                ]
            },
            "dump_bytecode": {
                "return": [
                    "None"
                ],
                "bucket": [
                    "Bucket"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            },
            "load_bytecode": {
                "return": [
                    "None"
                ],
                "bucket": [
                    "Bucket"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "directory": [
                    "typing.Optional[str]"
                ],
                "pattern": [
                    "str"
                ]
            },
            "_get_cache_filename": {
                "return": [
                    "str"
                ],
                "bucket": [
                    "Bucket"
                ]
            }
        },
        "Bucket": {
            "load_bytecode": {
                "return": [
                    "None"
                ],
                "f": [
                    "typing.IO"
                ]
            },
            "write_bytecode": {
                "return": [
                    "None"
                ],
                "f": [
                    "typing.IO"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "checksum": [
                    "str"
                ],
                "environment": [
                    "str"
                ],
                "key": [
                    "str"
                ]
            },
            "bytecode_to_string": {
                "return": [
                    "bytes"
                ]
            },
            "bytecode_from_string": {
                "return": [
                    "bytes"
                ],
                "string": [
                    "str"
                ]
            },
            "reset": {
                "return": [
                    "None"
                ]
            }
        },
        "MemcachedBytecodeCache": {
            "dump_bytecode": {
                "return": [
                    "None"
                ],
                "bucket": [
                    "Bucket"
                ]
            },
            "load_bytecode": {
                "return": [
                    "str"
                ],
                "bucket": [
                    "Bucket"
                ]
            },
            "__init__": {
                "client": [
                    "MemcacheClient"
                ],
                "ignore_memcache_errors": [
                    "bool"
                ],
                "prefix": [
                    "str"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ]
            }
        },
        "BytecodeCache": {
            "get_bucket": {
                "return": [
                    "Bucket"
                ],
                "environment": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "name": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "get_cache_key": {
                "return": [
                    "str"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "get_source_checksum": {
                "return": [
                    "str"
                ],
                "source": [
                    "str"
                ]
            },
            "dump_bytecode": {
                "return": [
                    "str"
                ],
                "bucket": [
                    "str"
                ]
            },
            "load_bytecode": {
                "return": [
                    "str"
                ],
                "bucket": [
                    "str"
                ]
            },
            "set_bucket": {
                "return": [
                    "None"
                ],
                "bucket": [
                    "int"
                ]
            },
            "clear": {
                "return": [
                    "None"
                ]
            }
        },
        "_MemcachedClient": {
            "set": {
                "return": [
                    "None"
                ],
                "key": [
                    "str"
                ],
                "timeout": [
                    "typing.Optional[int]"
                ],
                "value": [
                    "bytes"
                ]
            },
            "get": {
                "return": [
                    "typing.Optional[str]"
                ],
                "key": [
                    "str"
                ]
            }
        }
    },
    "jinja2.meta": {
        "global": {
            "find_referenced_templates": {
                "return": [
                    "typing.Iterator"
                ],
                "ast": [
                    "ast.AST"
                ]
            },
            "find_undeclared_variables": {
                "return": [
                    "list[str]"
                ],
                "ast": [
                    "Variable"
                ]
            }
        },
        "TrackingCodeGenerator": {
            "enter_frame": {
                "return": [
                    "None"
                ],
                "frame": [
                    "Frame"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "str"
                ]
            },
            "write": {
                "return": [
                    "None"
                ],
                "x": [
                    "int"
                ]
            }
        }
    },
    "jinja2.filters": {
        "global": {
            "do_urlize": {
                "return": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "extra_schemes": [
                    "typing.Optional[tuple[typing.Union[str,...]]]"
                ],
                "nofollow": [
                    "bool"
                ],
                "rel": [
                    "typing.Optional[str]"
                ],
                "target": [
                    "str"
                ],
                "trim_url_limit": [
                    "typing.Optional[int]"
                ],
                "value": [
                    "str"
                ]
            },
            "sync_do_join": {
                "return": [
                    "str"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "d": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "value": [
                    "typing.Iterable[str]"
                ]
            },
            "prepare_map": {
                "return": [
                    "typing.Callable"
                ],
                "args": [
                    "list"
                ],
                "context": [
                    "Context"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "do_filesizeformat": {
                "return": [
                    "str"
                ],
                "binary": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "prepare_select_or_reject": {
                "return": [
                    "typing.Callable"
                ],
                "args": [
                    "list"
                ],
                "context": [
                    "Context"
                ],
                "kwargs": [
                    "dict"
                ],
                "lookup_attr": [
                    "bool"
                ],
                "modfunc": [
                    "typing.Callable"
                ]
            },
            "make_multi_attrgetter": {
                "return": [
                    "typing.Callable"
                ],
                "attribute": [
                    "typing.Union[str,list[str]]"
                ],
                "environment": [
                    "dict"
                ],
                "postprocess": [
                    "typing.Optional[typing.Callable]"
                ]
            },
            "do_indent": {
                "return": [
                    "str"
                ],
                "blank": [
                    "bool"
                ],
                "first": [
                    "bool"
                ],
                "s": [
                    "str"
                ],
                "width": [
                    "typing.Union[str,int]"
                ]
            },
            "do_groupby": {
                "return": [
                    "list[_GroupTuple]"
                ],
                "attribute": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "environment": [
                    "dict"
                ],
                "value": [
                    "list[typing.Any]"
                ]
            },
            "sync_do_slice": {
                "return": [
                    "typing.Iterator"
                ],
                "fill_with": [
                    "typing.Optional[list[str]]"
                ],
                "slices": [
                    "int"
                ],
                "value": [
                    "typing.Iterable"
                ]
            },
            "sync_do_groupby": {
                "return": [
                    "list[_GroupTuple]"
                ],
                "attribute": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "default": [
                    "typing.Optional[str]"
                ],
                "environment": [
                    "dict"
                ],
                "value": [
                    "list"
                ]
            },
            "do_xmlattr": {
                "return": [
                    "str"
                ],
                "autospace": [
                    "bool"
                ],
                "d": [
                    "dict"
                ],
                "eval_ctx": [
                    "EvalContext"
                ]
            },
            "do_truncate": {
                "return": [
                    "str"
                ],
                "end": [
                    "str"
                ],
                "env": [
                    "Env"
                ],
                "killwords": [
                    "bool"
                ],
                "leeway": [
                    "typing.Optional[int]"
                ],
                "length": [
                    "int"
                ],
                "s": [
                    "str"
                ]
            },
            "do_dictsort": {
                "return": [
                    "list[str]"
                ],
                "by": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "reverse": [
                    "bool"
                ],
                "value": [
                    "dict"
                ]
            },
            "make_attrgetter": {
                "return": [
                    "typing.Callable"
                ],
                "attribute": [
                    "str"
                ],
                "default": [
                    "typing.Optional[typing.Any]"
                ],
                "environment": [
                    "dict"
                ],
                "postprocess": [
                    "typing.Optional[typing.Callable]"
                ]
            },
            "do_wordwrap": {
                "return": [
                    "str"
                ],
                "break_long_words": [
                    "bool"
                ],
                "break_on_hyphens": [
                    "bool"
                ],
                "environment": [
                    "Environment"
                ],
                "s": [
                    "str"
                ],
                "width": [
                    "int"
                ],
                "wrapstring": [
                    "typing.Optional[str]"
                ]
            },
            "do_replace": {
                "return": [
                    "str"
                ],
                "count": [
                    "typing.Optional[int]"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "new": [
                    "str"
                ],
                "old": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "_min_or_max": {
                "return": [
                    "typing.Union[dict[str, typing.Any],float]"
                ],
                "attribute": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "environment": [
                    "Environment"
                ],
                "func": [
                    "typing.Callable"
                ],
                "value": [
                    "typing.Iterable"
                ]
            },
            "sync_do_unique": {
                "return": [
                    "typing.Iterator"
                ],
                "attribute": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "environment": [
                    "dict"
                ],
                "value": [
                    "typing.Iterable"
                ]
            },
            "do_tojson": {
                "return": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "indent": [
                    "typing.Optional[int]"
                ],
                "value": [
                    "str"
                ]
            },
            "do_round": {
                "return": [
                    "float"
                ],
                "method": [
                    "str"
                ],
                "precision": [
                    "int"
                ],
                "value": [
                    "float"
                ]
            },
            "do_batch": {
                "return": [
                    "typing.Iterator"
                ],
                "fill_with": [
                    "typing.Optional[str]"
                ],
                "linecount": [
                    "int"
                ],
                "value": [
                    "list"
                ]
            },
            "do_sum": {
                "return": [
                    "int"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "environment": [
                    "dict"
                ],
                "iterable": [
                    "typing.Iterable"
                ],
                "start": [
                    "int"
                ]
            },
            "do_urlencode": {
                "return": [
                    "str"
                ],
                "value": [
                    "typing.Union[str,dict]"
                ]
            },
            "do_int": {
                "return": [
                    "int"
                ],
                "base": [
                    "int"
                ],
                "default": [
                    "int"
                ],
                "value": [
                    "typing.Union[str,int]"
                ]
            },
            "async_select_or_reject": {
                "return": [
                    "typing.Iterator"
                ],
                "args": [
                    "list"
                ],
                "context": [
                    "UserContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "lookup_attr": [
                    "str"
                ],
                "modfunc": [
                    "typing.Callable"
                ],
                "value": [
                    "typing.Optional[str]"
                ]
            },
            "do_sort": {
                "return": [
                    "list[str]"
                ],
                "attribute": [
                    "str"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "environment": [
                    "dict"
                ],
                "reverse": [
                    "bool"
                ],
                "value": [
                    "list"
                ]
            },
            "do_attr": {
                "return": [
                    "typing.Optional[str]"
                ],
                "environment": [
                    "Environment"
                ],
                "name": [
                    "str"
                ],
                "obj": [
                    "Object"
                ]
            },
            "select_or_reject": {
                "return": [
                    "typing.Iterator"
                ],
                "args": [
                    "list"
                ],
                "context": [
                    "dict"
                ],
                "kwargs": [
                    "dict"
                ],
                "lookup_attr": [
                    "str"
                ],
                "modfunc": [
                    "typing.Callable"
                ],
                "value": [
                    "typing.Iterable"
                ]
            },
            "do_first": {
                "return": [
                    "Item"
                ],
                "environment": [
                    "Environment"
                ],
                "seq": [
                    "Sequence"
                ]
            },
            "sync_do_sum": {
                "return": [
                    "int"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "environment": [
                    "Environment"
                ],
                "iterable": [
                    "typing.Iterable"
                ],
                "start": [
                    "int"
                ]
            },
            "do_items": {
                "return": [
                    "typing.Iterator"
                ],
                "value": [
                    "dict[str, typing.Any]"
                ]
            },
            "do_format": {
                "return": [
                    "str"
                ],
                "args": [
                    "typing.Optional[list[str]]"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "str"
                ]
            },
            "do_unique": {
                "return": [
                    "list[str]"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "environment": [
                    "Environment"
                ],
                "value": [
                    "str"
                ]
            },
            "do_last": {
                "return": [
                    "Item"
                ],
                "environment": [
                    "Env"
                ],
                "seq": [
                    "list[str]"
                ]
            },
            "sync_do_first": {
                "return": [
                    "Item"
                ],
                "environment": [
                    "Environment"
                ],
                "seq": [
                    "typing.Iterable"
                ]
            },
            "_prepare_attribute_parts": {
                "return": [
                    "list[str]"
                ],
                "attr": [
                    "typing.Optional[str]"
                ]
            },
            "do_random": {
                "return": [
                    "Item"
                ],
                "context": [
                    "Configuration"
                ],
                "seq": [
                    "list[int]"
                ]
            },
            "do_rejectattr": {
                "return": [
                    "typing.Union[typing.Any,None]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "AbstractContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "str"
                ]
            },
            "do_selectattr": {
                "return": [
                    "list[typing.Any]"
                ],
                "args": [
                    "list[str]"
                ],
                "context": [
                    "Context"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "str"
                ]
            },
            "do_reject": {
                "return": [
                    "typing.Optional[bool]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "CallbackContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "typing.Union[str,int]"
                ]
            },
            "do_select": {
                "return": [
                    "list[typing.Any]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "CallbackContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "int"
                ]
            },
            "do_default": {
                "return": [
                    "typing.Optional[str]"
                ],
                "boolean": [
                    "bool"
                ],
                "default_value": [
                    "str"
                ],
                "value": [
                    "typing.Union[bool,str]"
                ]
            },
            "do_max": {
                "return": [
                    "typing.Optional[float]"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "environment": [
                    "dict"
                ],
                "value": [
                    "typing.Union[str,int]"
                ]
            },
            "do_min": {
                "return": [
                    "typing.Optional[float]"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "case_sensitive": [
                    "bool"
                ],
                "environment": [
                    "dict[str, str]"
                ],
                "value": [
                    "str"
                ]
            },
            "do_join": {
                "return": [
                    "str"
                ],
                "attribute": [
                    "typing.Optional[str]"
                ],
                "d": [
                    "str"
                ],
                "eval_ctx": [
                    "EvalContext"
                ],
                "value": [
                    "str"
                ]
            },
            "do_striptags": {
                "return": [
                    "str"
                ],
                "value": [
                    "typing.Union[bool,str]"
                ]
            },
            "do_slice": {
                "return": [
                    "list"
                ],
                "fill_with": [
                    "typing.Optional[str]"
                ],
                "slices": [
                    "list[int]"
                ],
                "value": [
                    "typing.Union[list,tuple]"
                ]
            },
            "sync_do_rejectattr": {
                "return": [
                    "typing.Optional[bool]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "UserContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "str"
                ]
            },
            "sync_do_reject": {
                "return": [
                    "bool"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "Context"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "typing.Union[int,str]"
                ]
            },
            "sync_do_selectattr": {
                "return": [
                    "list[typing.Any]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "UserContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "str"
                ]
            },
            "sync_do_select": {
                "return": [
                    "list[typing.Any]"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "context": [
                    "UserContext"
                ],
                "kwargs": [
                    "dict"
                ],
                "value": [
                    "int"
                ]
            },
            "do_forceescape": {
                "return": [
                    "str"
                ],
                "value": [
                    "typing.Union[typing.Any, builtins.str]"
                ]
            },
            "do_title": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "do_float": {
                "return": [
                    "float"
                ],
                "default": [
                    "float"
                ],
                "value": [
                    "str"
                ]
            },
            "ignore_case": {
                "return": [
                    "V"
                ],
                "value": [
                    "V"
                ]
            },
            "do_list": {
                "return": [
                    "list"
                ],
                "value": [
                    "str"
                ]
            },
            "do_center": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "width": [
                    "int"
                ]
            },
            "do_trim": {
                "return": [
                    "str"
                ],
                "chars": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "do_wordcount": {
                "return": [
                    "int"
                ],
                "s": [
                    "str"
                ]
            },
            "do_capitalize": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "do_mark_safe": {
                "return": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            },
            "do_mark_unsafe": {
                "return": [
                    "str"
                ],
                "value": [
                    "int"
                ]
            },
            "do_lower": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "do_pprint": {
                "return": [
                    "str"
                ],
                "value": [
                    "float"
                ]
            },
            "do_upper": {
                "return": [
                    "str"
                ],
                "s": [
                    "str"
                ]
            },
            "sync_do_list": {
                "return": [
                    "list"
                ],
                "value": [
                    "list"
                ]
            }
        },
        "_GroupTuple": {
            "global": {
                "grouper": [
                    "Grouper"
                ],
                "list": [
                    "typing.Type"
                ]
            },
            "__repr__": {
                "return": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "HasHTML": {
            "__html__": {
                "return": [
                    "str"
                ]
            }
        }
    },
    "jinja2.visitor": {
        "NodeTransformer": {
            "generic_visit": {
                "return": [
                    "Node"
                ],
                "args": [
                    "typing.Union"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Node"
                ]
            },
            "visit_list": {
                "return": [
                    "list"
                ],
                "args": [
                    "typing.Optional[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "list"
                ]
            }
        },
        "NodeVisitor": {
            "visit": {
                "return": [
                    "VisitExprReturnT"
                ],
                "args": [
                    "typing.Iterable[AST]"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AST"
                ]
            },
            "generic_visit": {
                "return": [
                    "None"
                ],
                "args": [
                    "typing.Iterable[AST]"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AST"
                ]
            },
            "get_visitor": {
                "return": [
                    "typing.Optional[visitor.Visitor]"
                ],
                "node": [
                    "AST"
                ]
            }
        },
        "VisitCallable": {
            "__call__": {
                "return": [
                    "Node"
                ],
                "args": [
                    "list[typing.Any]"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Node"
                ]
            }
        }
    },
    "jinja2.defaults": {
        "global": {
            "global": {
                "LINE_STATEMENT_PREFIX": [
                    "None"
                ],
                "LINE_COMMENT_PREFIX": [
                    "None"
                ],
                "DEFAULT_POLICIES": [
                    "dict[str, typing.Any]"
                ],
                "NEWLINE_SEQUENCE": [
                    "str"
                ]
            }
        }
    },
    "jinja2.idtracking": {
        "Symbols": {
            "branch_update": {
                "return": [
                    "None"
                ],
                "branch_symbols": [
                    "list[BranchSymbol]"
                ]
            },
            "store": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "level": [
                    "typing.Optional[int]"
                ],
                "parent": [
                    "typing.Optional[Node]"
                ]
            },
            "dump_param_targets": {
                "return": [
                    "set[str]"
                ]
            },
            "dump_stores": {
                "return": [
                    "dict[str, Reference]"
                ]
            },
            "copy": {
                "return": [
                    "RefSet"
                ]
            },
            "ref": {
                "return": [
                    "Reference"
                ],
                "name": [
                    "str"
                ]
            },
            "find_load": {
                "return": [
                    "typing.Optional[str]"
                ],
                "target": [
                    "str"
                ]
            },
            "_define_ref": {
                "return": [
                    "str"
                ],
                "load": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "find_ref": {
                "return": [
                    "typing.Optional[Reference]"
                ],
                "name": [
                    "str"
                ]
            },
            "declare_parameter": {
                "return": [
                    "Ref"
                ],
                "name": [
                    "str"
                ]
            },
            "load": {
                "return": [
                    "None"
                ],
                "name": [
                    "str"
                ]
            },
            "analyze_node": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AST"
                ]
            }
        },
        "RootVisitor": {
            "visit_For": {
                "return": [
                    "None"
                ],
                "for_branch": [
                    "str"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "For"
                ]
            },
            "visit_With": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "With"
                ]
            },
            "visit_CallBlock": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "CallBlock"
                ]
            },
            "generic_visit": {
                "return": [
                    "None"
                ],
                "args": [
                    "tuple[typing.Union[str,...]]"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AST"
                ]
            },
            "_simple_visit": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AST"
                ]
            },
            "visit_OverlayScope": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "OverlayScope"
                ]
            },
            "visit_AssignBlock": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AssignBlock"
                ]
            },
            "__init__": {
                "return": [
                    "FrameSymbolVisitor"
                ],
                "symbols": [
                    "list[FrameSymbol]"
                ]
            }
        },
        "FrameSymbolVisitor": {
            "visit_If": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "If"
                ]
            },
            "visit_Name": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Name"
                ],
                "store_as_param": [
                    "bool"
                ]
            },
            "visit_FromImport": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "FromImport"
                ]
            },
            "visit_Import": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Import"
                ]
            },
            "visit_Assign": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Assign"
                ]
            },
            "visit_With": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "With"
                ]
            },
            "visit_AssignBlock": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AssignBlock"
                ]
            },
            "visit_FilterBlock": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "FilterBlock"
                ]
            },
            "visit_CallBlock": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "CallBlock"
                ]
            },
            "visit_For": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "For"
                ]
            },
            "visit_Macro": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Macro"
                ]
            },
            "visit_NSRef": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "NSRef"
                ]
            },
            "__init__": {
                "return": [
                    "list[str]"
                ],
                "symbols": [
                    "list[str]"
                ]
            },
            "visit_OverlayScope": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "OverlayScope"
                ]
            },
            "visit_Block": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Block"
                ]
            },
            "visit_Scope": {
                "return": [
                    "None"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "Scope"
                ]
            }
        },
        "global": {
            "find_symbols": {
                "return": [
                    "Symbols"
                ],
                "nodes": [
                    "list[FrameSymbol]"
                ],
                "parent_symbols": [
                    "list[Symbol]"
                ]
            },
            "symbols_for_node": {
                "return": [
                    "Symbols"
                ],
                "node": [
                    "Node"
                ],
                "parent_symbols": [
                    "list[Symbol]"
                ]
            }
        }
    },
    "jinja2.exceptions": {
        "TemplatesNotFound": {
            "__init__": {
                "return": [
                    "None"
                ],
                "message": [
                    "typing.Optional[str]"
                ],
                "names": [
                    "typing.Iterable[Template]"
                ]
            }
        },
        "TemplateSyntaxError": {
            "__str__": {
                "return": [
                    "str"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "filename": [
                    "typing.Optional[str]"
                ],
                "lineno": [
                    "int"
                ],
                "message": [
                    "str"
                ],
                "name": [
                    "typing.Optional[str]"
                ]
            }
        },
        "TemplateNotFound": {
            "global": {
                "message": [
                    "typing.Optional[str]"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "message": [
                    "typing.Optional[str]"
                ],
                "name": [
                    "str"
                ]
            },
            "__str__": {
                "return": [
                    "str"
                ]
            }
        },
        "TemplateError": {
            "__init__": {
                "return": [
                    "None"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "jinja2.nativetypes": {
        "global": {
            "native_concat": {
                "return": [
                    "typing.Optional[str]"
                ],
                "values": [
                    "typing.Iterable"
                ]
            }
        },
        "NativeTemplate": {
            "render_async": {
                "return": [
                    "str"
                ],
                "args": [
                    "typing.Union[str,list]"
                ],
                "kwargs": [
                    "dict"
                ]
            },
            "render": {
                "return": [
                    "str"
                ],
                "args": [
                    "typing.Union[str,list]"
                ],
                "kwargs": [
                    "dict"
                ]
            }
        },
        "NativeCodeGenerator": {
            "_output_child_to_const": {
                "return": [
                    "str"
                ],
                "finalize": [
                    "Finalize"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "_output_child_pre": {
                "return": [
                    "None"
                ],
                "finalize": [
                    "Node"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "_output_child_post": {
                "return": [
                    "None"
                ],
                "finalize": [
                    "Finalize"
                ],
                "frame": [
                    "Frame"
                ],
                "node": [
                    "Node"
                ]
            },
            "_output_const_repr": {
                "return": [
                    "str"
                ],
                "group": [
                    "list[typing.Any]"
                ]
            },
            "_default_finalize": {
                "return": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        }
    },
    "jinja2.optimizer": {
        "Optimizer": {
            "generic_visit": {
                "return": [
                    "typing.Union[astyping.Expr, builtins.str]"
                ],
                "args": [
                    "typing.Optional[list[str]]"
                ],
                "kwargs": [
                    "dict"
                ],
                "node": [
                    "AST"
                ]
            },
            "__init__": {
                "return": [
                    "None"
                ],
                "environment": [
                    "str"
                ]
            }
        },
        "global": {
            "optimize": {
                "return": [
                    "Node"
                ],
                "environment": [
                    "dict"
                ],
                "node": [
                    "Node"
                ]
            }
        }
    },
    "jinja2.async_utils": {
        "global": {
            "auto_await": {
                "return": [
                    "V"
                ],
                "value": [
                    "typing.Union[None,typing.Any]"
                ]
            },
            "auto_aiter": {
                "return": [
                    "typing.Iterator"
                ],
                "iterable": [
                    "typing.Iterable"
                ]
            },
            "auto_to_list": {
                "return": [
                    "list"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "_IteratorToAsyncIterator": {
            "__anext__": {
                "return": [
                    "typing.Optional[asyncio.Queue]"
                ]
            },
            "__init__": {
                "iterator": [
                    "typing.Iterator"
                ]
            },
            "__aiter__": {
                "return": [
                    "typing.Iterator"
                ]
            }
        }
    },
    "jinja2.tests": {
        "global": {
            "test_sequence": {
                "return": [
                    "bool"
                ],
                "value": [
                    "list"
                ]
            },
            "test_iterable": {
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Iterable"
                ]
            },
            "test_integer": {
                "return": [
                    "bool"
                ],
                "value": [
                    "int"
                ]
            },
            "test_filter": {
                "return": [
                    "bool"
                ],
                "env": [
                    "Env"
                ],
                "value": [
                    "str"
                ]
            },
            "test_test": {
                "return": [
                    "bool"
                ],
                "env": [
                    "Env"
                ],
                "value": [
                    "str"
                ]
            },
            "test_defined": {
                "return": [
                    "bool"
                ],
                "value": [
                    "Value"
                ]
            },
            "test_boolean": {
                "return": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            },
            "test_mapping": {
                "return": [
                    "bool"
                ],
                "value": [
                    "dict"
                ]
            },
            "test_undefined": {
                "return": [
                    "bool"
                ],
                "value": [
                    "Value"
                ]
            },
            "test_escaped": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "test_divisibleby": {
                "return": [
                    "bool"
                ],
                "num": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            },
            "test_number": {
                "return": [
                    "bool"
                ],
                "value": [
                    "typing.Union[int,float]"
                ]
            },
            "test_float": {
                "return": [
                    "bool"
                ],
                "value": [
                    "float"
                ]
            },
            "test_string": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "test_sameas": {
                "return": [
                    "bool"
                ],
                "other": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            },
            "test_lower": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "test_upper": {
                "return": [
                    "bool"
                ],
                "value": [
                    "str"
                ]
            },
            "test_false": {
                "return": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            },
            "test_in": {
                "return": [
                    "bool"
                ],
                "seq": [
                    "list[int]"
                ],
                "value": [
                    "str"
                ]
            },
            "test_even": {
                "return": [
                    "bool"
                ],
                "value": [
                    "int"
                ]
            },
            "test_none": {
                "return": [
                    "bool"
                ],
                "value": [
                    "None"
                ]
            },
            "test_odd": {
                "return": [
                    "bool"
                ],
                "value": [
                    "int"
                ]
            },
            "test_true": {
                "return": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            }
        }
    }
}