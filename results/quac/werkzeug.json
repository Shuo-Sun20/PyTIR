{
    "werkzeug._internal": {
        "global": {
            "_wsgi_decoding_dance": {
                "s": [
                    "urllib.parse._ResultMixinStr"
                ],
                "return": []
            },
            "_wsgi_encoding_dance": {
                "s": [
                    "urllib.parse._ResultMixinStr"
                ],
                "return": []
            },
            "_get_environ": {
                "obj": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "return": [
                    "builtins.dict[typing.Any, typing.Any]"
                ]
            },
            "_has_level_handler": {
                "logger": [
                    "logging.Logger"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "_log": {
                "type": [],
                "message": [
                    "builtins.str"
                ],
                "args": [],
                "kwargs": [],
                "return": []
            },
            "_dt_as_utc": {
                "dt": [
                    "datetime.time"
                ],
                "return": [
                    "datetime.time"
                ]
            },
            "_plain_int": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        },
        "_Missing": {
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__reduce__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "_ColorStreamHandler": {
            "__init__": {
                "return": []
            }
        },
        "_DictAccessorProperty": {
            "__init__": {
                "name": [],
                "default": [],
                "load_func": [],
                "dump_func": [],
                "read_only": [],
                "doc": [],
                "return": []
            },
            "lookup": {
                "instance": [],
                "return": []
            },
            "__get__": {
                "instance": [],
                "owner": [],
                "return": [
                    "werkzeug._internal._DictAccessorProperty"
                ]
            },
            "__set__": {
                "instance": [],
                "value": [],
                "return": []
            },
            "__delete__": {
                "instance": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug._reloader": {
        "global": {
            "_iter_module_paths": {
                "return": [
                    "typing.Generator[builtins.str, typing.Any, typing.Any]"
                ]
            },
            "_remove_by_pattern": {
                "paths": [
                    "builtins.set[typing.Any]"
                ],
                "exclude_patterns": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "_find_stat_paths": {
                "extra_files": [],
                "exclude_patterns": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "_find_watchdog_paths": {
                "extra_files": [],
                "exclude_patterns": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "_find_common_roots": {
                "paths": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "_get_args_for_reloading": {
                "return": [
                    "builtins.list[builtins.str]"
                ]
            },
            "ensure_echo_on": {
                "return": []
            },
            "run_with_reloader": {
                "main_func": [],
                "extra_files": [],
                "exclude_patterns": [],
                "interval": [
                    "builtins.int"
                ],
                "reloader_type": [
                    "builtins.str"
                ],
                "return": []
            }
        },
        "ReloaderLoop": {
            "__init__": {
                "extra_files": [],
                "exclude_patterns": [],
                "interval": [
                    "builtins.int"
                ],
                "return": []
            },
            "__enter__": {
                "return": [
                    "werkzeug._reloader.ReloaderLoop"
                ]
            },
            "__exit__": {
                "exc_type": [],
                "exc_val": [],
                "exc_tb": [],
                "return": []
            },
            "run": {
                "return": []
            },
            "run_step": {
                "return": []
            },
            "restart_with_reloader": {
                "return": [
                    "builtins.int"
                ]
            },
            "trigger_reload": {
                "filename": [],
                "return": []
            },
            "log_reload": {
                "filename": [],
                "return": []
            }
        },
        "StatReloaderLoop": {
            "__enter__": {
                "return": []
            },
            "run_step": {
                "return": []
            }
        },
        "WatchdogReloaderLoop": {
            "__init__": {
                "args": [],
                "kwargs": [],
                "return": []
            },
            "trigger_reload": {
                "filename": [],
                "return": []
            },
            "__enter__": {
                "return": []
            },
            "__exit__": {
                "exc_type": [],
                "exc_val": [],
                "exc_tb": [],
                "return": []
            },
            "run": {
                "return": []
            },
            "run_step": {
                "return": []
            }
        }
    },
    "werkzeug.exceptions": {
        "global": {
            "_find_exceptions": {
                "return": []
            },
            "abort": {
                "status": [],
                "args": [],
                "kwargs": [],
                "return": []
            }
        },
        "HTTPException": {
            "__init__": {
                "description": [],
                "response": [],
                "return": []
            },
            "name": {
                "return": []
            },
            "get_description": {
                "environ": [],
                "scope": [],
                "return": [
                    "builtins.str"
                ]
            },
            "get_body": {
                "environ": [],
                "scope": [],
                "return": [
                    "builtins.str"
                ]
            },
            "get_headers": {
                "environ": [],
                "scope": [],
                "return": [
                    "builtins.list[builtins.tuple[builtins.str, builtins.str]]"
                ]
            },
            "get_response": {
                "environ": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "scope": [],
                "return": []
            },
            "__call__": {
                "environ": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "start_response": [],
                "return": []
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "BadRequestKeyError": {
            "__init__": {
                "arg": [],
                "args": [],
                "kwargs": [],
                "return": []
            },
            "description": {
                "value": [],
                "return": []
            }
        },
        "Unauthorized": {
            "__init__": {
                "description": [],
                "response": [],
                "www_authenticate": [
                    "builtins.tuple[builtins.tuple[builtins.tuple[builtins.tuple[typing.Any]]]]"
                ],
                "return": []
            },
            "get_headers": {
                "environ": [],
                "scope": [],
                "return": [
                    "werkzeug.datastructures.mixins.ImmutableListMixin"
                ]
            }
        },
        "MethodNotAllowed": {
            "__init__": {
                "valid_methods": [],
                "description": [],
                "response": [],
                "return": []
            },
            "get_headers": {
                "environ": [],
                "scope": [],
                "return": [
                    "socketserver._NoThreads"
                ]
            }
        },
        "RequestedRangeNotSatisfiable": {
            "__init__": {
                "length": [],
                "units": [
                    "builtins.str"
                ],
                "description": [],
                "response": [],
                "return": []
            },
            "get_headers": {
                "environ": [],
                "scope": [],
                "return": [
                    "socketserver._NoThreads"
                ]
            }
        },
        "_RetryAfter": {
            "__init__": {
                "description": [],
                "response": [],
                "retry_after": [],
                "return": []
            },
            "get_headers": {
                "environ": [],
                "scope": [],
                "return": [
                    "socketserver._NoThreads"
                ]
            }
        },
        "InternalServerError": {
            "__init__": {
                "description": [],
                "response": [],
                "original_exception": [],
                "return": []
            }
        },
        "Aborter": {
            "__init__": {
                "mapping": [
                    "builtins.dict[typing.Any, builtins.type]"
                ],
                "extra": [],
                "return": []
            },
            "__call__": {
                "code": [],
                "args": [],
                "kwargs": [],
                "return": []
            }
        }
    },
    "werkzeug.formparser": {
        "global": {
            "default_stream_factory": {
                "total_content_length": [],
                "content_type": [],
                "filename": [],
                "content_length": [],
                "return": [
                    "io.BytesIO"
                ]
            },
            "parse_form_data": {
                "environ": [],
                "stream_factory": [],
                "max_form_memory_size": [],
                "max_content_length": [],
                "cls": [],
                "silent": [
                    "builtins.bool"
                ],
                "max_form_parts": [],
                "return": []
            },
            "_chunk_iter": {
                "read": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "size": [],
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            }
        },
        "FormDataParser": {
            "__init__": {
                "stream_factory": [
                    "typing.Callable[[typing.Any, typing.Any, typing.Any, typing.Any], io.BytesIO]"
                ],
                "max_form_memory_size": [],
                "max_content_length": [],
                "cls": [],
                "silent": [
                    "builtins.bool"
                ],
                "max_form_parts": [],
                "return": []
            },
            "parse_from_environ": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.tuple[_typeshed.SupportsRead, typing.Any, typing.Any]"
                ]
            },
            "parse": {
                "stream": [
                    "_typeshed.SupportsRead"
                ],
                "mimetype": [
                    "builtins.str"
                ],
                "content_length": [],
                "options": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "builtins.tuple[_typeshed.SupportsRead, typing.Any, typing.Any]"
                ]
            },
            "_parse_multipart": {
                "stream": [],
                "mimetype": [],
                "content_length": [],
                "options": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.tuple[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "_parse_urlencoded": {
                "stream": [
                    "_typeshed.SupportsRead"
                ],
                "mimetype": [],
                "content_length": [],
                "options": [],
                "return": [
                    "builtins.tuple[_typeshed.SupportsRead, typing.Any, typing.Any]"
                ]
            }
        },
        "MultiPartParser": {
            "__init__": {
                "stream_factory": [
                    "typing.Callable[[typing.Any, typing.Any, typing.Any, typing.Any], io.BytesIO]"
                ],
                "max_form_memory_size": [],
                "cls": [],
                "buffer_size": [],
                "max_form_parts": [],
                "return": []
            },
            "fail": {
                "message": [],
                "return": []
            },
            "get_part_charset": {
                "headers": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "start_file_streaming": {
                "event": [
                    "werkzeug.sansio.multipart.File"
                ],
                "total_content_length": [],
                "return": []
            },
            "parse": {
                "stream": [
                    "_typeshed.SupportsRead"
                ],
                "boundary": [],
                "content_length": [],
                "return": [
                    "builtins.tuple[typing.Any, typing.Any]"
                ]
            }
        }
    },
    "werkzeug.http": {
        "global": {
            "quote_header_value": {
                "value": [],
                "allow_token": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "unquote_header_value": {
                "value": [
                    "typing.Sequence[builtins.str]"
                ],
                "return": [
                    "typing.Sequence[builtins.str]"
                ]
            },
            "dump_options_header": {
                "header": [],
                "options": [
                    "werkzeug.routing.converters.AnyConverter"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "dump_header": {
                "iterable": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "dump_csp_header": {
                "header": [
                    "werkzeug.routing.converters.AnyConverter"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "parse_list_header": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "parse_dict_header": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.dict[typing.Sequence[builtins.str], builtins.str]"
                ]
            },
            "parse_options_header": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[builtins.str, builtins.dict[typing.Sequence[builtins.str], builtins.str]]"
                ]
            },
            "parse_accept_header": {
                "value": [
                    "builtins.str"
                ],
                "cls": [
                    "typing.Callable[[builtins.list[typing.Any]], typing.Any]"
                ],
                "return": []
            },
            "parse_cache_control_header": {
                "value": [
                    "builtins.str"
                ],
                "on_update": [],
                "cls": [
                    "typing.Callable[[builtins.dict[typing.Sequence[builtins.str], builtins.str], typing.Any], typing.Any]"
                ],
                "return": []
            },
            "parse_csp_header": {
                "value": [
                    "re.Pattern"
                ],
                "on_update": [],
                "cls": [
                    "typing.Callable[[builtins.list[typing.Any], typing.Any], typing.Any]"
                ],
                "return": []
            },
            "parse_set_header": {
                "value": [
                    "builtins.str"
                ],
                "on_update": [],
                "return": [
                    "werkzeug.datastructures.structures.HeaderSet"
                ]
            },
            "parse_if_range_header": {
                "value": [],
                "return": [
                    "werkzeug.datastructures.range.IfRange"
                ]
            },
            "parse_range_header": {
                "value": [
                    "typing.Collection[builtins.str]"
                ],
                "make_inclusive": [
                    "builtins.bool"
                ],
                "return": [
                    "werkzeug.datastructures.range.Range"
                ]
            },
            "parse_content_range_header": {
                "value": [],
                "on_update": [],
                "return": [
                    "werkzeug.datastructures.range.ContentRange"
                ]
            },
            "quote_etag": {
                "etag": [
                    "builtins.str"
                ],
                "weak": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "unquote_etag": {
                "etag": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[builtins.str, builtins.bool]"
                ]
            },
            "parse_etags": {
                "value": [
                    "typing.Sized"
                ],
                "return": [
                    "werkzeug.datastructures.etag.ETags"
                ]
            },
            "generate_etag": {
                "data": [],
                "return": []
            },
            "parse_date": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "datetime.datetime"
                ]
            },
            "http_date": {
                "timestamp": [
                    "datetime.datetime"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "parse_age": {
                "value": [],
                "return": [
                    "datetime.timedelta"
                ]
            },
            "dump_age": {
                "age": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "is_resource_modified": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "etag": [
                    "builtins.str"
                ],
                "data": [],
                "last_modified": [
                    "datetime.datetime"
                ],
                "ignore_if_range": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "remove_entity_headers": {
                "headers": [
                    "builtins.list[builtins.tuple[ast.Slice, typing.Any]]"
                ],
                "allowed": [
                    "builtins.set[ast.Slice]"
                ],
                "return": []
            },
            "remove_hop_by_hop_headers": {
                "headers": [
                    "builtins.list[builtins.tuple[typing.Any, typing.Any]]"
                ],
                "return": []
            },
            "is_entity_header": {
                "header": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "is_hop_by_hop_header": {
                "header": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "parse_cookie": {
                "header": [
                    "builtins.str"
                ],
                "cls": [
                    "typing.Callable[[builtins.list[typing.Any]], typing.Any]"
                ],
                "return": []
            },
            "dump_cookie": {
                "key": [
                    "urllib.parse._ResultMixinStr"
                ],
                "value": [
                    "builtins.str"
                ],
                "max_age": [
                    "datetime.datetime"
                ],
                "expires": [
                    "datetime.datetime"
                ],
                "path": [
                    "builtins.str"
                ],
                "domain": [
                    "builtins.str"
                ],
                "secure": [
                    "builtins.bool"
                ],
                "httponly": [
                    "builtins.bool"
                ],
                "sync_expires": [
                    "builtins.bool"
                ],
                "max_size": [
                    "builtins.int"
                ],
                "samesite": [
                    "builtins.str"
                ],
                "partitioned": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "is_byte_range_valid": {
                "start": [
                    "builtins.int"
                ],
                "stop": [
                    "builtins.int"
                ],
                "length": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.bool"
                ]
            }
        }
    },
    "werkzeug.local": {
        "global": {
            "release_local": {
                "local": [
                    "werkzeug.local.Local"
                ],
                "return": []
            },
            "_l_to_r_op": {
                "op": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Any]"
                ],
                "return": []
            },
            "_identity": {
                "o": [],
                "return": []
            }
        },
        "Local": {
            "__init__": {
                "context_var": [
                    "_contextvars.ContextVar"
                ],
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "__call__": {
                "name": [],
                "unbound_message": [],
                "return": []
            },
            "__release_local__": {
                "return": []
            },
            "__getattr__": {
                "name": [],
                "return": []
            },
            "__setattr__": {
                "name": [],
                "value": [],
                "return": []
            },
            "__delattr__": {
                "name": [],
                "return": []
            }
        },
        "LocalStack": {
            "__init__": {
                "context_var": [
                    "_contextvars.ContextVar"
                ],
                "return": []
            },
            "__release_local__": {
                "return": []
            },
            "push": {
                "obj": [],
                "return": [
                    "socketserver._NoThreads"
                ]
            },
            "pop": {
                "return": []
            },
            "top": {
                "return": []
            },
            "__call__": {
                "name": [],
                "unbound_message": [],
                "return": []
            }
        },
        "LocalManager": {
            "__init__": {
                "locals": [
                    "werkzeug.local.Local"
                ],
                "return": []
            },
            "cleanup": {
                "return": []
            },
            "make_middleware": {
                "app": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Coroutine[typing.Any, typing.Any, typing.Any]]"
                ],
                "return": [
                    "typing.Callable[[typing.Any, typing.Any], werkzeug.wsgi.ClosingIterator]"
                ]
            },
            "middleware": {
                "func": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Coroutine[typing.Any, typing.Any, typing.Any]]"
                ],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "_ProxyLookup": {
            "__init__": {
                "f": [
                    "functools._lru_cache_wrapper"
                ],
                "fallback": [],
                "class_value": [],
                "is_attr": [
                    "builtins.bool"
                ],
                "return": []
            },
            "__set_name__": {
                "owner": [],
                "name": [],
                "return": []
            },
            "__get__": {
                "instance": [
                    "werkzeug.local.LocalProxy"
                ],
                "owner": [],
                "return": [
                    "werkzeug.local._ProxyLookup"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__call__": {
                "instance": [
                    "werkzeug.local.LocalProxy"
                ],
                "args": [],
                "kwargs": [],
                "return": []
            }
        },
        "_ProxyIOp": {
            "__init__": {
                "f": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Any]"
                ],
                "fallback": [],
                "return": []
            }
        },
        "LocalProxy": {
            "__init__": {
                "local": [
                    "werkzeug.local.LocalStack"
                ],
                "name": [
                    "builtins.str"
                ],
                "unbound_message": [
                    "builtins.str"
                ],
                "return": []
            }
        }
    },
    "werkzeug.security": {
        "global": {
            "gen_salt": {
                "length": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_hash_internal": {
                "method": [
                    "builtins.str"
                ],
                "salt": [
                    "urllib.parse._ResultMixinStr"
                ],
                "password": [
                    "urllib.parse._ResultMixinStr"
                ],
                "return": [
                    "builtins.tuple[typing.Any, builtins.str]"
                ]
            },
            "generate_password_hash": {
                "password": [
                    "urllib.parse._ResultMixinStr"
                ],
                "method": [
                    "builtins.str"
                ],
                "salt_length": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "check_password_hash": {
                "pwhash": [
                    "re.Pattern"
                ],
                "password": [
                    "urllib.parse._ResultMixinStr"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "safe_join": {
                "directory": [
                    "builtins.str"
                ],
                "pathnames": [],
                "return": []
            }
        }
    },
    "werkzeug.serving": {
        "global": {
            "_ansi_style": {
                "value": [
                    "builtins.str"
                ],
                "styles": [],
                "return": [
                    "builtins.str"
                ]
            },
            "generate_adhoc_ssl_pair": {
                "cn": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[typing.Any, typing.Any]"
                ]
            },
            "make_ssl_devcert": {
                "base_path": [],
                "host": [
                    "builtins.str"
                ],
                "cn": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[builtins.str, builtins.str]"
                ]
            },
            "generate_adhoc_ssl_context": {
                "return": []
            },
            "load_ssl_context": {
                "cert_file": [],
                "pkey_file": [],
                "protocol": [
                    "builtins.int"
                ],
                "return": [
                    "ssl.SSLContext"
                ]
            },
            "is_ssl_error": {
                "error": [
                    "socket.herror"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "select_address_family": {
                "host": [
                    "typing.Collection[builtins.str]"
                ],
                "port": [],
                "return": [
                    "socket.AddressFamily"
                ]
            },
            "get_sockaddr": {
                "host": [
                    "builtins.str"
                ],
                "port": [],
                "family": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.tuple[builtins.str, typing.Any]"
                ]
            },
            "get_interface_ip": {
                "family": [],
                "return": [
                    "builtins.str"
                ]
            },
            "make_server": {
                "host": [
                    "builtins.str"
                ],
                "port": [
                    "builtins.int"
                ],
                "app": [],
                "threaded": [
                    "builtins.bool"
                ],
                "processes": [
                    "builtins.int"
                ],
                "request_handler": [
                    "builtins.type"
                ],
                "passthrough_errors": [
                    "builtins.bool"
                ],
                "ssl_context": [
                    "ssl.SSLContext"
                ],
                "fd": [
                    "typing.SupportsIndex"
                ],
                "return": [
                    "werkzeug.serving.ForkingWSGIServer"
                ]
            },
            "is_running_from_reloader": {
                "return": []
            },
            "run_simple": {
                "hostname": [
                    "builtins.str"
                ],
                "port": [
                    "builtins.int"
                ],
                "application": [
                    "werkzeug.debug.DebuggedApplication"
                ],
                "use_reloader": [
                    "builtins.bool"
                ],
                "use_debugger": [
                    "builtins.bool"
                ],
                "use_evalex": [
                    "builtins.bool"
                ],
                "extra_files": [],
                "exclude_patterns": [],
                "reloader_interval": [
                    "builtins.int"
                ],
                "reloader_type": [
                    "builtins.str"
                ],
                "threaded": [
                    "builtins.bool"
                ],
                "processes": [
                    "builtins.int"
                ],
                "request_handler": [
                    "builtins.type"
                ],
                "static_files": [],
                "passthrough_errors": [
                    "builtins.bool"
                ],
                "ssl_context": [
                    "ssl.SSLContext"
                ],
                "return": []
            }
        },
        "DechunkedInput": {
            "__init__": {
                "rfile": [],
                "return": []
            },
            "readable": {
                "return": [
                    "builtins.bool"
                ]
            },
            "read_chunk_len": {
                "return": [
                    "builtins.int"
                ]
            },
            "readinto": {
                "buf": [
                    "typing.MutableSequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        },
        "WSGIRequestHandler": {
            "server_version": {
                "return": []
            },
            "make_environ": {
                "return": [
                    "builtins.dict[builtins.str, builtins.str]"
                ]
            },
            "run_wsgi": {
                "return": []
            },
            "handle": {
                "return": []
            },
            "connection_dropped": {
                "error": [],
                "environ": [],
                "return": []
            },
            "__getattr__": {
                "name": [
                    "builtins.str"
                ],
                "return": []
            },
            "address_string": {
                "return": [
                    "builtins.str"
                ]
            },
            "port_integer": {
                "return": []
            },
            "log_request": {
                "code": [
                    "builtins.str"
                ],
                "size": [
                    "builtins.str"
                ],
                "return": []
            },
            "log_error": {
                "format": [],
                "args": [],
                "return": []
            },
            "log_message": {
                "format": [],
                "args": [],
                "return": []
            },
            "log": {
                "type": [],
                "message": [],
                "args": [],
                "return": []
            }
        },
        "BaseWSGIServer": {
            "__init__": {
                "host": [
                    "builtins.str"
                ],
                "port": [
                    "builtins.int"
                ],
                "app": [],
                "handler": [
                    "builtins.type"
                ],
                "passthrough_errors": [
                    "builtins.bool"
                ],
                "ssl_context": [
                    "ssl.SSLContext"
                ],
                "fd": [
                    "typing.SupportsIndex"
                ],
                "return": []
            },
            "log": {
                "type": [],
                "message": [
                    "builtins.str"
                ],
                "args": [],
                "return": []
            },
            "serve_forever": {
                "poll_interval": [
                    "builtins.float"
                ],
                "return": []
            },
            "handle_error": {
                "request": [],
                "client_address": [],
                "return": []
            },
            "log_startup": {
                "return": []
            }
        },
        "ForkingWSGIServer": {
            "__init__": {
                "host": [],
                "port": [],
                "app": [],
                "processes": [
                    "builtins.int"
                ],
                "handler": [],
                "passthrough_errors": [
                    "builtins.bool"
                ],
                "ssl_context": [],
                "fd": [],
                "return": []
            }
        }
    },
    "werkzeug.test": {
        "global": {
            "stream_encode_multipart": {
                "data": [],
                "use_tempfile": [
                    "builtins.bool"
                ],
                "threshold": [
                    "builtins.int"
                ],
                "boundary": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[builtins.int, builtins.int, builtins.str]"
                ]
            },
            "encode_multipart": {
                "values": [],
                "boundary": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[builtins.str, typing.Any]"
                ]
            },
            "_iter_data": {
                "data": [
                    "werkzeug.datastructures.structures.MultiDict"
                ],
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, builtins.list[typing.Any]], typing.Any, typing.Any]"
                ]
            },
            "create_environ": {
                "args": [],
                "kwargs": [],
                "return": [
                    "builtins.dict[builtins.str, builtins.str]"
                ]
            },
            "run_wsgi_app": {
                "app": [
                    "typing.Callable[[werkzeug.datastructures.headers.EnvironHeaders, typing.Callable[[typing.Any, typing.Any, _typeshed.SupportsGetItem[builtins.int, werkzeug.routing.exceptions.RoutingException]], typing.Any]], typing.Coroutine[typing.Any, typing.Any, typing.Any]]"
                ],
                "environ": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "buffered": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.tuple[builtins.list[typing.Any], typing.Any, werkzeug.datastructures.headers.Headers]"
                ]
            }
        },
        "EnvironBuilder": {
            "__init__": {
                "path": [
                    "builtins.str"
                ],
                "base_url": [],
                "query_string": [
                    "builtins.str"
                ],
                "method": [
                    "builtins.str"
                ],
                "input_stream": [],
                "content_type": [],
                "content_length": [],
                "errors_stream": [
                    "io.TextIOWrapper"
                ],
                "multithread": [
                    "builtins.bool"
                ],
                "multiprocess": [
                    "builtins.bool"
                ],
                "run_once": [
                    "builtins.bool"
                ],
                "headers": [
                    "werkzeug.datastructures.headers.Headers"
                ],
                "data": [
                    "builtins.str"
                ],
                "environ_base": [],
                "environ_overrides": [],
                "mimetype": [],
                "json": [],
                "auth": [
                    "werkzeug.datastructures.auth.Authorization"
                ],
                "return": []
            },
            "from_environ": {
                "environ": [
                    "_typeshed.SupportsGetItem[builtins.str, urllib.parse._ResultMixinStr]"
                ],
                "kwargs": [],
                "return": []
            },
            "_add_file_from_data": {
                "key": [],
                "value": [
                    "builtins.tuple"
                ],
                "return": []
            },
            "_make_base_url": {
                "scheme": [],
                "host": [],
                "script_root": [],
                "return": [
                    "builtins.str"
                ]
            },
            "base_url": {
                "value": [],
                "return": []
            },
            "content_type": {
                "value": [],
                "return": []
            },
            "mimetype": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "mimetype_params": {
                "return": [
                    "werkzeug.datastructures.structures.CallbackDict"
                ]
            },
            "content_length": {
                "value": [],
                "return": []
            },
            "_get_form": {
                "name": [],
                "storage": [
                    "typing.Callable[[], typing.Any]"
                ],
                "return": []
            },
            "_set_form": {
                "name": [],
                "value": [],
                "return": []
            },
            "form": {
                "value": [],
                "return": []
            },
            "files": {
                "value": [],
                "return": []
            },
            "input_stream": {
                "value": [],
                "return": []
            },
            "query_string": {
                "value": [],
                "return": []
            },
            "args": {
                "value": [],
                "return": []
            },
            "server_name": {
                "return": []
            },
            "server_port": {
                "return": [
                    "builtins.int"
                ]
            },
            "__del__": {
                "return": []
            },
            "close": {
                "return": []
            },
            "get_environ": {
                "return": [
                    "builtins.dict[builtins.str, builtins.str]"
                ]
            },
            "get_request": {
                "cls": [],
                "return": []
            }
        },
        "Client": {
            "__init__": {
                "application": [],
                "response_wrapper": [
                    "builtins.type"
                ],
                "use_cookies": [
                    "builtins.bool"
                ],
                "allow_subdomain_redirects": [
                    "builtins.bool"
                ],
                "return": []
            },
            "get_cookie": {
                "key": [],
                "domain": [
                    "builtins.str"
                ],
                "path": [
                    "builtins.str"
                ],
                "return": []
            },
            "set_cookie": {
                "key": [
                    "urllib.parse._ResultMixinStr"
                ],
                "value": [
                    "builtins.str"
                ],
                "domain": [
                    "builtins.str"
                ],
                "origin_only": [
                    "builtins.bool"
                ],
                "path": [
                    "builtins.str"
                ],
                "kwargs": [],
                "return": []
            },
            "delete_cookie": {
                "key": [],
                "domain": [
                    "builtins.str"
                ],
                "path": [
                    "builtins.str"
                ],
                "return": []
            },
            "_add_cookies_to_wsgi": {
                "environ": [
                    "typing.MutableMapping[builtins.str, builtins.str]"
                ],
                "return": []
            },
            "_update_cookies_from_response": {
                "server_name": [],
                "path": [],
                "headers": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "run_wsgi_app": {
                "environ": [
                    "typing.MutableMapping[builtins.str, builtins.str]"
                ],
                "buffered": [
                    "builtins.bool"
                ],
                "return": [
                    "_typeshed.SupportsGetItem[builtins.int, werkzeug.datastructures.headers.Headers]"
                ]
            },
            "resolve_redirect": {
                "response": [
                    "socketserver.BaseRequestHandler"
                ],
                "buffered": [
                    "builtins.bool"
                ],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "open": {
                "args": [],
                "buffered": [
                    "builtins.bool"
                ],
                "follow_redirects": [
                    "builtins.bool"
                ],
                "kwargs": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "get": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "post": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "put": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "delete": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "patch": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "options": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "head": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "trace": {
                "args": [],
                "kw": [],
                "return": [
                    "werkzeug.test.TestResponse"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "TestResponse": {
            "__init__": {
                "response": [],
                "status": [],
                "headers": [],
                "request": [],
                "history": [
                    "builtins.tuple"
                ],
                "kwargs": [],
                "return": []
            },
            "text": {
                "return": []
            }
        },
        "Cookie": {
            "_matches_request": {
                "server_name": [
                    "typing.Sequence[typing.Any]"
                ],
                "path": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": []
            },
            "_to_request_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "_from_response_header": {
                "server_name": [],
                "path": [
                    "builtins.str"
                ],
                "header": [
                    "builtins.str"
                ],
                "return": []
            },
            "_storage_key": {
                "return": [
                    "builtins.tuple[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "_should_delete": {
                "return": []
            }
        }
    },
    "werkzeug.testapp": {
        "global": {
            "iter_sys_path": {
                "return": [
                    "typing.Generator[builtins.tuple[builtins.str, builtins.bool, typing.Any], typing.Any, typing.Any]"
                ]
            },
            "test_app": {
                "req": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "_get_werkzeug_version": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.urls": {
        "global": {
            "_codec_error_url_quote": {
                "e": [
                    "re.Match"
                ],
                "return": [
                    "builtins.tuple[builtins.str, typing.Any]"
                ]
            },
            "_make_unquote_part": {
                "name": [],
                "chars": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "typing.Callable[[typing.Any], builtins.str]"
                ]
            },
            "uri_to_iri": {
                "uri": [],
                "return": []
            },
            "iri_to_uri": {
                "iri": [],
                "return": []
            },
            "_decode_idna": {
                "domain": [
                    "urllib.parse._ResultMixinStr"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_urlencode": {
                "query": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.user_agent": {
        "UserAgent": {
            "__init__": {
                "string": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": []
            },
            "__bool__": {
                "return": [
                    "builtins.bool"
                ]
            },
            "to_header": {
                "return": []
            }
        }
    },
    "werkzeug.utils": {
        "global": {
            "get_content_type": {
                "mimetype": [
                    "builtins.str"
                ],
                "charset": [],
                "return": [
                    "builtins.str"
                ]
            },
            "secure_filename": {
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "redirect": {
                "location": [],
                "code": [
                    "builtins.int"
                ],
                "Response": [
                    "typing.Callable[..., werkzeug.sansio.multipart.Field]"
                ],
                "return": [
                    "werkzeug.sansio.multipart.Field"
                ]
            },
            "append_slash_redirect": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "code": [
                    "builtins.int"
                ],
                "return": [
                    "werkzeug.sansio.multipart.Field"
                ]
            },
            "send_file": {
                "path_or_file": [
                    "builtins.str"
                ],
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "mimetype": [
                    "builtins.str"
                ],
                "as_attachment": [
                    "builtins.bool"
                ],
                "download_name": [
                    "builtins.str"
                ],
                "conditional": [
                    "builtins.bool"
                ],
                "etag": [
                    "builtins.str"
                ],
                "last_modified": [],
                "max_age": [
                    "builtins.int"
                ],
                "use_x_sendfile": [
                    "builtins.bool"
                ],
                "response_class": [
                    "typing.Callable[..., werkzeug.sansio.response.Response]"
                ],
                "_root_path": [],
                "return": [
                    "werkzeug.sansio.response.Response"
                ]
            },
            "send_from_directory": {
                "directory": [],
                "path": [],
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "kwargs": [],
                "return": [
                    "werkzeug.sansio.response.Response"
                ]
            },
            "import_string": {
                "import_name": [
                    "builtins.str"
                ],
                "silent": [
                    "builtins.bool"
                ],
                "return": []
            },
            "find_modules": {
                "import_path": [
                    "builtins.str"
                ],
                "include_packages": [
                    "builtins.bool"
                ],
                "recursive": [
                    "builtins.bool"
                ],
                "return": [
                    "typing.Generator[builtins.str, typing.Any, typing.Any]"
                ]
            }
        },
        "cached_property": {
            "__init__": {
                "fget": [],
                "name": [],
                "doc": [],
                "return": []
            },
            "__set__": {
                "obj": [],
                "value": [],
                "return": []
            },
            "__get__": {
                "obj": [],
                "type": [],
                "return": [
                    "werkzeug.utils.cached_property"
                ]
            },
            "__delete__": {
                "obj": [],
                "return": []
            }
        },
        "environ_property": {
            "lookup": {
                "obj": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "return": []
            }
        },
        "header_property": {
            "lookup": {
                "obj": [
                    "werkzeug.sansio.multipart.Field"
                ],
                "return": []
            }
        },
        "ImportStringError": {
            "__init__": {
                "import_name": [
                    "builtins.str"
                ],
                "exception": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.wsgi": {
        "global": {
            "responder": {
                "f": [
                    "typing.Callable[..., typing.Callable[..., typing.Any]]"
                ],
                "return": []
            },
            "get_current_url": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "root_only": [
                    "builtins.bool"
                ],
                "strip_querystring": [
                    "builtins.bool"
                ],
                "host_only": [
                    "builtins.bool"
                ],
                "trusted_hosts": [],
                "return": []
            },
            "_get_server": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.tuple[typing.Any, builtins.int]"
                ]
            },
            "get_host": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "trusted_hosts": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "get_content_length": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "get_input_stream": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "safe_fallback": [
                    "builtins.bool"
                ],
                "max_content_length": [
                    "builtins.int"
                ],
                "return": [
                    "io.BytesIO"
                ]
            },
            "get_path_info": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": []
            },
            "wrap_file": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "file": [],
                "buffer_size": [
                    "builtins.int"
                ],
                "return": []
            }
        },
        "ClosingIterator": {
            "__init__": {
                "iterable": [
                    "typing.Coroutine[typing.Any, typing.Any, typing.Any]"
                ],
                "callbacks": [
                    "builtins.list[builtins.list[builtins.list[builtins.list[typing.Any]]]]"
                ],
                "return": []
            },
            "__iter__": {
                "return": [
                    "werkzeug.wsgi.ClosingIterator"
                ]
            },
            "__next__": {
                "return": []
            },
            "close": {
                "return": []
            }
        },
        "FileWrapper": {
            "__init__": {
                "file": [],
                "buffer_size": [
                    "builtins.int"
                ],
                "return": []
            },
            "close": {
                "return": []
            },
            "seekable": {
                "return": [
                    "builtins.bool"
                ]
            },
            "seek": {
                "args": [],
                "return": []
            },
            "tell": {
                "return": []
            },
            "__iter__": {
                "return": [
                    "werkzeug.wsgi.FileWrapper"
                ]
            },
            "__next__": {
                "return": []
            }
        },
        "_RangeWrapper": {
            "__init__": {
                "iterable": [
                    "werkzeug.wsgi.FileWrapper"
                ],
                "start_byte": [
                    "builtins.int"
                ],
                "byte_range": [
                    "builtins.int"
                ],
                "return": []
            },
            "__iter__": {
                "return": [
                    "werkzeug.wsgi._RangeWrapper"
                ]
            },
            "_next_chunk": {
                "return": [
                    "typing.Sized"
                ]
            },
            "_first_iteration": {
                "return": [
                    "builtins.tuple[typing.Sequence[typing.Any], typing.Any]"
                ]
            },
            "_next": {
                "return": [
                    "typing.Sequence[typing.Any]"
                ]
            },
            "__next__": {
                "return": [
                    "typing.Sequence[typing.Any]"
                ]
            },
            "close": {
                "return": []
            }
        },
        "LimitedStream": {
            "__init__": {
                "stream": [],
                "limit": [],
                "is_max": [
                    "builtins.bool"
                ],
                "return": []
            },
            "is_exhausted": {
                "return": []
            },
            "on_exhausted": {
                "return": []
            },
            "on_disconnect": {
                "error": [],
                "return": []
            },
            "exhaust": {
                "return": [
                    "builtins.bytes"
                ]
            },
            "readinto": {
                "b": [
                    "typing.ByteString"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "readall": {
                "return": [
                    "builtins.bytes"
                ]
            },
            "tell": {
                "return": []
            },
            "readable": {
                "return": [
                    "builtins.bool"
                ]
            }
        }
    },
    "werkzeug.datastructures": {
        "global": {
            "__getattr__": {
                "name": [
                    "builtins.str"
                ],
                "return": []
            }
        }
    },
    "werkzeug.datastructures.accept": {
        "global": {
            "_normalize_mime": {
                "value": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "_normalize_lang": {
                "value": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            }
        },
        "Accept": {
            "__init__": {
                "values": [
                    "werkzeug.datastructures.accept.Accept"
                ],
                "return": []
            },
            "_specificity": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[typing.Any]"
                ]
            },
            "_value_matches": {
                "value": [
                    "ast.Slice"
                ],
                "item": [
                    "builtins.str"
                ],
                "return": []
            },
            "__getitem__": {
                "key": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "quality": {
                "key": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "__contains__": {
                "value": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "index": {
                "key": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "find": {
                "key": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "_best_single_match": {
                "match": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.tuple[builtins.str, typing.Any]"
                ]
            },
            "best_match": {
                "matches": [
                    "typing.Iterable[ast.Slice]"
                ],
                "default": [
                    "ast.Slice"
                ],
                "return": [
                    "ast.Slice"
                ]
            },
            "best": {
                "return": []
            }
        },
        "MIMEAccept": {
            "_specificity": {
                "value": [],
                "return": [
                    "builtins.tuple"
                ]
            },
            "_value_matches": {
                "value": [
                    "ast.Slice"
                ],
                "item": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "accept_html": {
                "return": []
            },
            "accept_xhtml": {
                "return": []
            },
            "accept_json": {
                "return": [
                    "builtins.bool"
                ]
            }
        },
        "LanguageAccept": {
            "_value_matches": {
                "value": [
                    "ast.Slice"
                ],
                "item": [
                    "builtins.str"
                ],
                "return": []
            },
            "best_match": {
                "matches": [
                    "typing.Iterable[ast.Slice]"
                ],
                "default": [],
                "return": [
                    "ast.Slice"
                ]
            }
        },
        "CharsetAccept": {
            "_value_matches": {
                "value": [
                    "builtins.str"
                ],
                "item": [
                    "builtins.str"
                ],
                "return": []
            }
        }
    },
    "werkzeug.datastructures.auth": {
        "Authorization": {
            "__init__": {
                "auth_type": [],
                "data": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "token": [],
                "return": []
            },
            "__getattr__": {
                "name": [],
                "return": []
            },
            "__getitem__": {
                "name": [],
                "return": []
            },
            "get": {
                "key": [],
                "default": [],
                "return": []
            },
            "__contains__": {
                "key": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "__eq__": {
                "other": [
                    "werkzeug.datastructures.auth.Authorization"
                ],
                "return": []
            },
            "from_header": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "WWWAuthenticate": {
            "__init__": {
                "auth_type": [
                    "ast.Slice"
                ],
                "values": [],
                "token": [],
                "return": []
            },
            "_trigger_on_update": {
                "return": []
            },
            "type": {
                "value": [],
                "return": []
            },
            "parameters": {
                "value": [],
                "return": []
            },
            "token": {
                "value": [],
                "return": []
            },
            "__getitem__": {
                "key": [],
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "__delitem__": {
                "key": [],
                "return": []
            },
            "__getattr__": {
                "name": [],
                "return": []
            },
            "__setattr__": {
                "name": [
                    "builtins.str"
                ],
                "value": [],
                "return": []
            },
            "__delattr__": {
                "name": [],
                "return": []
            },
            "__contains__": {
                "key": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "__eq__": {
                "other": [
                    "werkzeug.datastructures.auth.WWWAuthenticate"
                ],
                "return": []
            },
            "get": {
                "key": [],
                "default": [],
                "return": []
            },
            "from_header": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.datastructures.cache_control": {
        "global": {
            "cache_control_property": {
                "key": [],
                "empty": [],
                "type": [],
                "doc": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.property"
                ]
            }
        },
        "_CacheControl": {
            "__init__": {
                "values": [
                    "builtins.tuple"
                ],
                "on_update": [],
                "return": []
            },
            "_get_cache_value": {
                "key": [],
                "empty": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "_set_cache_value": {
                "key": [],
                "value": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": []
            },
            "_del_cache_value": {
                "key": [],
                "return": []
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.datastructures.csp": {
        "global": {
            "csp_property": {
                "key": [],
                "return": [
                    "builtins.property"
                ]
            }
        },
        "ContentSecurityPolicy": {
            "__init__": {
                "values": [
                    "builtins.tuple"
                ],
                "on_update": [],
                "return": []
            },
            "_get_value": {
                "key": [],
                "return": []
            },
            "_set_value": {
                "key": [],
                "value": [],
                "return": []
            },
            "_del_value": {
                "key": [],
                "return": []
            },
            "to_header": {
                "return": []
            },
            "__str__": {
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.datastructures.etag": {
        "ETags": {
            "__init__": {
                "strong_etags": [
                    "typing.Iterable[typing.Any]"
                ],
                "weak_etags": [],
                "star_tag": [
                    "builtins.bool"
                ],
                "return": []
            },
            "as_set": {
                "include_weak": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "is_weak": {
                "etag": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "is_strong": {
                "etag": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "contains_weak": {
                "etag": [],
                "return": []
            },
            "contains": {
                "etag": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "contains_raw": {
                "etag": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__call__": {
                "etag": [],
                "data": [],
                "include_weak": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "__bool__": {
                "return": [
                    "builtins.bool"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__len__": {
                "return": [
                    "builtins.int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "__contains__": {
                "etag": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.datastructures.file_storage": {
        "FileStorage": {
            "__init__": {
                "stream": [
                    "dataclasses._FIELD_BASE"
                ],
                "filename": [
                    "builtins.str"
                ],
                "name": [],
                "content_type": [],
                "content_length": [],
                "headers": [
                    "werkzeug.datastructures.headers.Headers"
                ],
                "return": []
            },
            "_parse_content_type": {
                "return": []
            },
            "content_type": {
                "return": []
            },
            "content_length": {
                "return": [
                    "builtins.int"
                ]
            },
            "mimetype": {
                "return": []
            },
            "mimetype_params": {
                "return": []
            },
            "save": {
                "dst": [
                    "builtins.str"
                ],
                "buffer_size": [
                    "builtins.int"
                ],
                "return": []
            },
            "close": {
                "return": []
            },
            "__bool__": {
                "return": [
                    "builtins.bool"
                ]
            },
            "__getattr__": {
                "name": [],
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "FileMultiDict": {
            "add_file": {
                "name": [],
                "file": [
                    "builtins.str"
                ],
                "filename": [
                    "builtins.str"
                ],
                "content_type": [],
                "return": []
            }
        }
    },
    "werkzeug.datastructures.headers": {
        "global": {
            "_options_header_vkw": {
                "value": [],
                "kw": [
                    "werkzeug.routing.converters.AnyConverter"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_str_header_value": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            }
        },
        "Headers": {
            "__init__": {
                "defaults": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "__getitem__": {
                "key": [
                    "builtins.str"
                ],
                "return": []
            },
            "_get_key": {
                "key": [
                    "ast.Slice"
                ],
                "return": []
            },
            "__eq__": {
                "other": [
                    "werkzeug.datastructures.headers.Headers"
                ],
                "return": []
            },
            "get": {
                "key": [
                    "ast.Slice"
                ],
                "default": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": []
            },
            "getlist": {
                "key": [
                    "ast.Slice"
                ],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "get_all": {
                "name": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "items": {
                "lower": [
                    "builtins.bool"
                ],
                "return": [
                    "typing.Generator[builtins.tuple[ast.Slice, typing.Any], typing.Any, typing.Any]"
                ]
            },
            "keys": {
                "lower": [
                    "builtins.bool"
                ],
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "extend": {
                "arg": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "kwargs": [],
                "return": []
            },
            "__delitem__": {
                "key": [
                    "builtins.str"
                ],
                "return": []
            },
            "_del_key": {
                "key": [
                    "ast.Slice"
                ],
                "return": []
            },
            "remove": {
                "key": [
                    "ast.Slice"
                ],
                "return": []
            },
            "pop": {
                "key": [
                    "builtins.int"
                ],
                "default": [],
                "return": []
            },
            "popitem": {
                "return": []
            },
            "__contains__": {
                "key": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "__len__": {
                "return": [
                    "builtins.int"
                ]
            },
            "add": {
                "key": [],
                "value": [],
                "kwargs": [],
                "return": []
            },
            "add_header": {
                "key": [],
                "value": [],
                "kwargs": [],
                "return": []
            },
            "clear": {
                "return": []
            },
            "set": {
                "key": [
                    "ast.Slice"
                ],
                "value": [],
                "kwargs": [],
                "return": []
            },
            "setlist": {
                "key": [
                    "ast.Slice"
                ],
                "values": [],
                "return": []
            },
            "setdefault": {
                "key": [
                    "ast.Slice"
                ],
                "default": [],
                "return": []
            },
            "setlistdefault": {
                "key": [
                    "ast.Slice"
                ],
                "default": [],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "__setitem__": {
                "key": [
                    "builtins.str"
                ],
                "value": [
                    "importlib.metadata._meta.PackageMetadata"
                ],
                "return": []
            },
            "update": {
                "arg": [
                    "werkzeug.datastructures.headers.Headers"
                ],
                "kwargs": [],
                "return": []
            },
            "__or__": {
                "other": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": [
                    "werkzeug.routing.matcher.StateMachineMatcher"
                ]
            },
            "__ior__": {
                "other": [
                    "werkzeug.datastructures.headers.Headers"
                ],
                "return": [
                    "werkzeug.datastructures.headers.Headers"
                ]
            },
            "to_wsgi_list": {
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "copy": {
                "return": []
            },
            "__copy__": {
                "return": []
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "EnvironHeaders": {
            "__init__": {
                "environ": [],
                "return": []
            },
            "__eq__": {
                "other": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "return": []
            },
            "__getitem__": {
                "key": [
                    "builtins.str"
                ],
                "return": []
            },
            "_get_key": {
                "key": [
                    "builtins.str"
                ],
                "return": []
            },
            "__len__": {
                "return": [
                    "builtins.int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, typing.Any], typing.Any, typing.Any]"
                ]
            },
            "copy": {
                "return": []
            },
            "__or__": {
                "other": [],
                "return": []
            }
        }
    },
    "werkzeug.datastructures.mixins": {
        "global": {
            "_immutable_error": {
                "self": [],
                "return": []
            },
            "_always_update": {
                "f": [
                    "typing.Callable[..., typing.Any]"
                ],
                "return": []
            }
        },
        "ImmutableListMixin": {
            "__hash__": {
                "return": [
                    "builtins.int"
                ]
            },
            "__reduce_ex__": {
                "protocol": [],
                "return": [
                    "builtins.tuple[builtins.type, builtins.tuple[builtins.list[typing.Any]]]"
                ]
            },
            "__delitem__": {
                "key": [],
                "return": []
            },
            "__iadd__": {
                "other": [],
                "return": []
            },
            "__imul__": {
                "other": [],
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "append": {
                "item": [],
                "return": []
            },
            "remove": {
                "item": [],
                "return": []
            },
            "extend": {
                "iterable": [],
                "return": []
            },
            "insert": {
                "pos": [],
                "value": [],
                "return": []
            },
            "pop": {
                "index": [
                    "builtins.int"
                ],
                "return": []
            },
            "reverse": {
                "return": []
            },
            "sort": {
                "key": [],
                "reverse": [
                    "builtins.bool"
                ],
                "return": []
            }
        },
        "ImmutableDictMixin": {
            "fromkeys": {
                "keys": [
                    "typing.Iterable[typing.Any]"
                ],
                "value": [],
                "return": [
                    "werkzeug.datastructures.range._CallbackProperty"
                ]
            },
            "__reduce_ex__": {
                "protocol": [],
                "return": [
                    "builtins.tuple[builtins.type, builtins.tuple[builtins.dict[typing.Any, typing.Any]]]"
                ]
            },
            "_iter_hashitems": {
                "return": []
            },
            "__hash__": {
                "return": [
                    "builtins.int"
                ]
            },
            "setdefault": {
                "key": [],
                "default": [],
                "return": []
            },
            "update": {
                "arg": [],
                "kwargs": [],
                "return": []
            },
            "__ior__": {
                "other": [],
                "return": []
            },
            "pop": {
                "key": [],
                "default": [],
                "return": []
            },
            "popitem": {
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "__delitem__": {
                "key": [],
                "return": []
            },
            "clear": {
                "return": []
            }
        },
        "ImmutableMultiDictMixin": {
            "__reduce_ex__": {
                "protocol": [],
                "return": [
                    "builtins.tuple[builtins.type, builtins.tuple[builtins.list[typing.Any]]]"
                ]
            },
            "_iter_hashitems": {
                "return": []
            },
            "add": {
                "key": [],
                "value": [],
                "return": []
            },
            "popitemlist": {
                "return": []
            },
            "poplist": {
                "key": [],
                "return": []
            },
            "setlist": {
                "key": [],
                "new_list": [],
                "return": []
            },
            "setlistdefault": {
                "key": [],
                "default_list": [],
                "return": []
            }
        },
        "ImmutableHeadersMixin": {
            "__delitem__": {
                "key": [],
                "kwargs": [],
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "set": {
                "key": [],
                "value": [],
                "kwargs": [],
                "return": []
            },
            "setlist": {
                "key": [],
                "values": [],
                "return": []
            },
            "add": {
                "key": [],
                "value": [],
                "kwargs": [],
                "return": []
            },
            "add_header": {
                "key": [],
                "value": [],
                "kwargs": [],
                "return": []
            },
            "remove": {
                "key": [],
                "return": []
            },
            "extend": {
                "arg": [],
                "kwargs": [],
                "return": []
            },
            "update": {
                "arg": [],
                "kwargs": [],
                "return": []
            },
            "__ior__": {
                "other": [],
                "return": []
            },
            "insert": {
                "pos": [],
                "value": [],
                "return": []
            },
            "pop": {
                "key": [],
                "default": [],
                "return": []
            },
            "popitem": {
                "return": []
            },
            "setdefault": {
                "key": [],
                "default": [],
                "return": []
            },
            "setlistdefault": {
                "key": [],
                "default": [],
                "return": []
            }
        },
        "UpdateDictMixin": {
            "setdefault": {
                "key": [],
                "default": [],
                "return": []
            },
            "pop": {
                "key": [],
                "default": [],
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "__delitem__": {
                "key": [],
                "return": []
            },
            "clear": {
                "return": []
            },
            "popitem": {
                "return": []
            },
            "update": {
                "arg": [],
                "kwargs": [],
                "return": []
            },
            "__ior__": {
                "other": [],
                "return": []
            }
        }
    },
    "werkzeug.datastructures.range": {
        "IfRange": {
            "__init__": {
                "etag": [],
                "date": [],
                "return": []
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "Range": {
            "__init__": {
                "units": [],
                "ranges": [
                    "typing.Iterable[builtins.tuple[builtins.int, builtins.int]]"
                ],
                "return": []
            },
            "range_for_length": {
                "length": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.tuple[builtins.int, typing.Any]"
                ]
            },
            "make_content_range": {
                "length": [
                    "builtins.int"
                ],
                "return": []
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "to_content_range_header": {
                "length": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "_CallbackProperty": {
            "__set_name__": {
                "owner": [],
                "name": [],
                "return": []
            },
            "__get__": {
                "instance": [],
                "owner": [],
                "return": [
                    "werkzeug.datastructures.range._CallbackProperty"
                ]
            },
            "__set__": {
                "instance": [
                    "werkzeug.datastructures.range.ContentRange"
                ],
                "value": [],
                "return": []
            }
        },
        "ContentRange": {
            "__init__": {
                "units": [
                    "builtins.str"
                ],
                "start": [
                    "builtins.int"
                ],
                "stop": [
                    "builtins.int"
                ],
                "length": [
                    "builtins.int"
                ],
                "on_update": [],
                "return": []
            },
            "set": {
                "start": [
                    "builtins.int"
                ],
                "stop": [
                    "builtins.int"
                ],
                "length": [
                    "builtins.int"
                ],
                "units": [
                    "builtins.str"
                ],
                "return": []
            },
            "unset": {
                "return": []
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__bool__": {
                "return": []
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.datastructures.structures": {
        "global": {
            "iter_multi_items": {
                "mapping": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, builtins.set[typing.Any]], typing.Any, typing.Any]"
                ]
            },
            "__getattr__": {
                "name": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.type"
                ]
            }
        },
        "ImmutableList": {
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "TypeConversionDict": {
            "get": {
                "key": [],
                "default": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": []
            }
        },
        "ImmutableTypeConversionDict": {
            "copy": {
                "return": [
                    "werkzeug.datastructures.structures.TypeConversionDict"
                ]
            },
            "__copy__": {
                "return": [
                    "werkzeug.datastructures.structures.ImmutableTypeConversionDict"
                ]
            }
        },
        "MultiDict": {
            "__init__": {
                "mapping": [
                    "werkzeug.datastructures.structures.MultiDict"
                ],
                "return": []
            },
            "__getstate__": {
                "return": [
                    "builtins.dict[typing.Any, typing.Any]"
                ]
            },
            "__setstate__": {
                "value": [],
                "return": []
            },
            "__iter__": {
                "return": []
            },
            "__getitem__": {
                "key": [],
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "add": {
                "key": [],
                "value": [],
                "return": []
            },
            "getlist": {
                "key": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "setlist": {
                "key": [],
                "new_list": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "setdefault": {
                "key": [],
                "default": [],
                "return": []
            },
            "setlistdefault": {
                "key": [],
                "default_list": [],
                "return": []
            },
            "items": {
                "multi": [
                    "builtins.bool"
                ],
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, typing.Any], typing.Any, typing.Any]"
                ]
            },
            "lists": {
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, builtins.list[typing.Any]], typing.Any, typing.Any]"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "listvalues": {
                "return": []
            },
            "copy": {
                "return": []
            },
            "deepcopy": {
                "memo": [],
                "return": []
            },
            "to_dict": {
                "flat": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.dict[typing.Any, typing.Any]"
                ]
            },
            "update": {
                "mapping": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "__or__": {
                "other": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": [
                    "werkzeug.routing.matcher.StateMachineMatcher"
                ]
            },
            "__ior__": {
                "other": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": [
                    "werkzeug.datastructures.structures.MultiDict"
                ]
            },
            "pop": {
                "key": [],
                "default": [],
                "return": []
            },
            "popitem": {
                "return": [
                    "builtins.tuple[typing.Any, typing.Any]"
                ]
            },
            "poplist": {
                "key": [],
                "return": []
            },
            "popitemlist": {
                "return": []
            },
            "__copy__": {
                "return": []
            },
            "__deepcopy__": {
                "memo": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "_omd_bucket": {
            "__init__": {
                "omd": [
                    "werkzeug.datastructures.structures._OrderedMultiDict"
                ],
                "key": [],
                "value": [],
                "return": []
            },
            "unlink": {
                "omd": [
                    "werkzeug.datastructures.structures._OrderedMultiDict"
                ],
                "return": []
            }
        },
        "_OrderedMultiDict": {
            "__init__": {
                "mapping": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "__eq__": {
                "other": [
                    "werkzeug.datastructures.structures._OrderedMultiDict"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "__reduce_ex__": {
                "protocol": [],
                "return": [
                    "builtins.tuple[builtins.type, builtins.tuple[builtins.list[typing.Any]]]"
                ]
            },
            "__getstate__": {
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "__setstate__": {
                "values": [
                    "typing.Iterable[builtins.tuple[typing.Any, typing.Any]]"
                ],
                "return": []
            },
            "__getitem__": {
                "key": [],
                "return": []
            },
            "__setitem__": {
                "key": [],
                "value": [],
                "return": []
            },
            "__delitem__": {
                "key": [],
                "return": []
            },
            "keys": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "items": {
                "multi": [
                    "builtins.bool"
                ],
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, typing.Any], typing.Any, typing.Any]"
                ]
            },
            "lists": {
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, builtins.list[typing.Any]], typing.Any, typing.Any]"
                ]
            },
            "listvalues": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "add": {
                "key": [],
                "value": [],
                "return": []
            },
            "getlist": {
                "key": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "setlist": {
                "key": [],
                "new_list": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "setlistdefault": {
                "key": [],
                "default_list": [],
                "return": []
            },
            "update": {
                "mapping": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "poplist": {
                "key": [],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "pop": {
                "key": [],
                "default": [],
                "return": []
            },
            "popitem": {
                "return": [
                    "builtins.tuple[typing.Any, typing.Any]"
                ]
            },
            "popitemlist": {
                "return": [
                    "builtins.tuple[typing.Any, builtins.list[typing.Any]]"
                ]
            }
        },
        "CombinedMultiDict": {
            "__reduce_ex__": {
                "protocol": [],
                "return": [
                    "builtins.tuple[builtins.type, builtins.tuple[typing.Any]]"
                ]
            },
            "__init__": {
                "dicts": [],
                "return": []
            },
            "fromkeys": {
                "keys": [],
                "value": [],
                "return": []
            },
            "__getitem__": {
                "key": [],
                "return": []
            },
            "get": {
                "key": [],
                "default": [],
                "type": [
                    "typing.Callable[[typing.Any], typing.Any]"
                ],
                "return": []
            },
            "getlist": {
                "key": [],
                "type": [],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "_keys_impl": {
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "keys": {
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "items": {
                "multi": [
                    "builtins.bool"
                ],
                "return": [
                    "typing.Generator[builtins.tuple[typing.Any, typing.Any], typing.Any, typing.Any]"
                ]
            },
            "values": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "lists": {
                "return": [
                    "_collections_abc.dict_items"
                ]
            },
            "listvalues": {
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "copy": {
                "return": [
                    "werkzeug.datastructures.structures.MultiDict"
                ]
            },
            "__len__": {
                "return": [
                    "builtins.int"
                ]
            },
            "__contains__": {
                "key": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "ImmutableDict": {
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "copy": {
                "return": [
                    "builtins.dict[typing.Any, typing.Any]"
                ]
            },
            "__copy__": {
                "return": [
                    "werkzeug.datastructures.structures.ImmutableDict"
                ]
            }
        },
        "ImmutableMultiDict": {
            "copy": {
                "return": [
                    "werkzeug.datastructures.structures.MultiDict"
                ]
            },
            "__copy__": {
                "return": [
                    "werkzeug.datastructures.structures.ImmutableMultiDict"
                ]
            }
        },
        "_ImmutableOrderedMultiDict": {
            "__init__": {
                "mapping": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "_iter_hashitems": {
                "return": [
                    "builtins.enumerate"
                ]
            },
            "copy": {
                "return": [
                    "werkzeug.datastructures.structures._OrderedMultiDict"
                ]
            },
            "__copy__": {
                "return": [
                    "werkzeug.datastructures.structures._ImmutableOrderedMultiDict"
                ]
            }
        },
        "CallbackDict": {
            "__init__": {
                "initial": [],
                "on_update": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "HeaderSet": {
            "__init__": {
                "headers": [],
                "on_update": [],
                "return": []
            },
            "add": {
                "header": [],
                "return": []
            },
            "remove": {
                "header": [
                    "ast.Slice"
                ],
                "return": []
            },
            "update": {
                "iterable": [
                    "typing.Iterable[ast.Slice]"
                ],
                "return": []
            },
            "discard": {
                "header": [
                    "ast.Slice"
                ],
                "return": []
            },
            "find": {
                "header": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "index": {
                "header": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "clear": {
                "return": []
            },
            "as_set": {
                "preserve_casing": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "to_header": {
                "return": [
                    "builtins.str"
                ]
            },
            "__getitem__": {
                "idx": [],
                "return": []
            },
            "__delitem__": {
                "idx": [],
                "return": []
            },
            "__setitem__": {
                "idx": [],
                "value": [
                    "ast.Slice"
                ],
                "return": []
            },
            "__contains__": {
                "header": [
                    "ast.Slice"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "__len__": {
                "return": [
                    "builtins.int"
                ]
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "__bool__": {
                "return": [
                    "builtins.bool"
                ]
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.debug": {
        "global": {
            "hash_pin": {
                "pin": [],
                "return": [
                    "typing.Sequence[typing.Any]"
                ]
            },
            "get_machine_id": {
                "return": [
                    "builtins.str"
                ]
            },
            "get_pin_and_cookie_name": {
                "app": [],
                "return": [
                    "builtins.tuple[builtins.str, builtins.str]"
                ]
            }
        },
        "_ConsoleFrame": {
            "__init__": {
                "namespace": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "return": []
            },
            "eval": {
                "code": [],
                "return": []
            }
        },
        "DebuggedApplication": {
            "__init__": {
                "app": [],
                "evalex": [
                    "builtins.bool"
                ],
                "request_key": [
                    "builtins.str"
                ],
                "console_path": [
                    "builtins.str"
                ],
                "console_init_func": [],
                "show_hidden_frames": [
                    "builtins.bool"
                ],
                "pin_security": [
                    "builtins.bool"
                ],
                "pin_logging": [
                    "builtins.bool"
                ],
                "return": []
            },
            "pin": {
                "value": [],
                "return": []
            },
            "pin_cookie_name": {
                "return": []
            },
            "debug_application": {
                "environ": [
                    "builtins.str"
                ],
                "start_response": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Any]"
                ],
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "execute_command": {
                "request": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "command": [],
                "frame": [
                    "werkzeug.debug.console.Console"
                ],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "display_console": {
                "request": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "get_resource": {
                "request": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "werkzeug.exceptions.HTTPException"
                ]
            },
            "check_pin_trust": {
                "environ": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "check_host_trust": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "_fail_pin_auth": {
                "return": []
            },
            "pin_auth": {
                "request": [
                    "werkzeug.wrappers.request.Request"
                ],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "log_pin_request": {
                "request": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "__call__": {
                "environ": [
                    "builtins.str"
                ],
                "start_response": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Any]"
                ],
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            }
        }
    },
    "werkzeug.debug.console": {
        "HTMLStringO": {
            "__init__": {
                "return": []
            },
            "isatty": {
                "return": [
                    "builtins.bool"
                ]
            },
            "close": {
                "return": []
            },
            "flush": {
                "return": []
            },
            "seek": {
                "n": [],
                "mode": [
                    "builtins.int"
                ],
                "return": []
            },
            "readline": {
                "return": [
                    "builtins.str"
                ]
            },
            "reset": {
                "return": [
                    "builtins.str"
                ]
            },
            "_write": {
                "x": [],
                "return": []
            },
            "write": {
                "x": [],
                "return": []
            },
            "writelines": {
                "x": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            }
        },
        "ThreadedStream": {
            "push": {
                "return": []
            },
            "fetch": {
                "return": [
                    "builtins.str"
                ]
            },
            "displayhook": {
                "obj": [],
                "return": []
            },
            "__setattr__": {
                "name": [],
                "value": [],
                "return": []
            },
            "__dir__": {
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "__getattribute__": {
                "name": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "_ConsoleLoader": {
            "__init__": {
                "return": []
            },
            "register": {
                "code": [
                    "types.CodeType"
                ],
                "source": [],
                "return": []
            },
            "get_source_by_code": {
                "code": [
                    "builtins.object"
                ],
                "return": []
            }
        },
        "_InteractiveConsole": {
            "__init__": {
                "globals": [],
                "locals": [
                    "builtins.dict[builtins.str, typing.Any]"
                ],
                "return": []
            },
            "runsource": {
                "source": [
                    "builtins.str"
                ],
                "kwargs": [],
                "return": [
                    "builtins.str"
                ]
            },
            "runcode": {
                "code": [],
                "return": []
            },
            "showtraceback": {
                "return": []
            },
            "showsyntaxerror": {
                "filename": [],
                "return": []
            },
            "write": {
                "data": [],
                "return": []
            }
        },
        "Console": {
            "__init__": {
                "globals": [
                    "builtins.dict[typing.Any, typing.Any]"
                ],
                "locals": [
                    "builtins.dict[builtins.str, typing.Any]"
                ],
                "return": []
            },
            "eval": {
                "code": [],
                "return": []
            }
        }
    },
    "werkzeug.debug.repr": {
        "global": {
            "debug_repr": {
                "obj": [],
                "return": []
            },
            "dump": {
                "obj": [
                    "builtins.object"
                ],
                "return": []
            },
            "_add_subclass_info": {
                "inner": [],
                "obj": [],
                "base": [
                    "builtins.tuple"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_sequence_repr_maker": {
                "left": [],
                "right": [],
                "base": [
                    "builtins.tuple"
                ],
                "limit": [
                    "builtins.int"
                ],
                "return": [
                    "typing.Callable[[dataclasses._DataclassParams, typing.Any, typing.Any], builtins.str]"
                ]
            }
        },
        "_Helper": {
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "__call__": {
                "topic": [],
                "return": []
            }
        },
        "DebugReprGenerator": {
            "__init__": {
                "return": []
            },
            "regex_repr": {
                "obj": [
                    "ast.MatchAs"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "string_repr": {
                "obj": [],
                "limit": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "dict_repr": {
                "d": [
                    "werkzeug.routing.converters.AnyConverter"
                ],
                "recursive": [],
                "limit": [
                    "builtins.int"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "object_repr": {
                "obj": [
                    "builtins.object"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "dispatch_repr": {
                "obj": [
                    "builtins.str"
                ],
                "recursive": [],
                "return": [
                    "builtins.str"
                ]
            },
            "fallback_repr": {
                "return": [
                    "builtins.str"
                ]
            },
            "repr": {
                "obj": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "dump_object": {
                "obj": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "dump_locals": {
                "d": [
                    "werkzeug.routing.converters.AnyConverter"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "render_object_dump": {
                "items": [
                    "typing.Iterable[builtins.tuple[typing.Any, typing.Any]]"
                ],
                "title": [],
                "repr": [],
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.debug.tbtools": {
        "global": {
            "_process_traceback": {
                "exc": [
                    "werkzeug.routing.exceptions.RoutingException"
                ],
                "te": [
                    "binascii.Incomplete"
                ],
                "skip": [
                    "builtins.int"
                ],
                "hide": [
                    "builtins.bool"
                ],
                "return": [
                    "binascii.Incomplete"
                ]
            },
            "render_console_html": {
                "secret": [],
                "evalex_trusted": [],
                "return": [
                    "builtins.str"
                ]
            }
        },
        "DebugTraceback": {
            "__init__": {
                "exc": [
                    "werkzeug.routing.exceptions.RoutingException"
                ],
                "te": [
                    "binascii.Incomplete"
                ],
                "skip": [
                    "builtins.int"
                ],
                "hide": [
                    "builtins.bool"
                ],
                "return": []
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            },
            "all_tracebacks": {
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "all_frames": {
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "render_traceback_text": {
                "return": [
                    "builtins.str"
                ]
            },
            "render_traceback_html": {
                "include_title": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "render_debugger_html": {
                "evalex": [],
                "secret": [],
                "evalex_trusted": [],
                "return": [
                    "builtins.str"
                ]
            }
        },
        "DebugFrameSummary": {
            "__init__": {
                "locals": [],
                "globals": [],
                "kwargs": [],
                "return": []
            },
            "info": {
                "return": []
            },
            "is_library": {
                "return": [
                    "builtins.bool"
                ]
            },
            "console": {
                "return": [
                    "werkzeug.debug.console.Console"
                ]
            },
            "eval": {
                "code": [],
                "return": []
            },
            "render_html": {
                "mark_library": [],
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.middleware.dispatcher": {
        "DispatcherMiddleware": {
            "__init__": {
                "app": [],
                "mounts": [],
                "return": []
            },
            "__call__": {
                "environ": [
                    "werkzeug.datastructures.auth.WWWAuthenticate"
                ],
                "start_response": [],
                "return": []
            }
        }
    },
    "werkzeug.middleware.http_proxy": {
        "ProxyMiddleware": {
            "__init__": {
                "app": [],
                "targets": [
                    "werkzeug.routing.converters.AnyConverter"
                ],
                "chunk_size": [
                    "builtins.int"
                ],
                "timeout": [
                    "builtins.int"
                ],
                "return": []
            },
            "proxy_to": {
                "opts": [
                    "_typeshed.SupportsGetItem[builtins.str, builtins.str]"
                ],
                "path": [
                    "builtins.str"
                ],
                "prefix": [
                    "typing.Sized"
                ],
                "return": [
                    "typing.Callable[[importlib.metadata.Deprecated, typing.Callable[[builtins.str, builtins.list[builtins.tuple[typing.Any, typing.Any]]], typing.Any]], typing.Generator[builtins.bytes, typing.Any, typing.Any]]"
                ]
            },
            "__call__": {
                "environ": [
                    "_typeshed.SupportsGetItem[builtins.str, builtins.str]"
                ],
                "start_response": [],
                "return": []
            }
        }
    },
    "werkzeug.middleware.lint": {
        "global": {
            "check_type": {
                "context": [],
                "obj": [],
                "need": [],
                "return": []
            }
        },
        "InputStream": {
            "__init__": {
                "stream": [],
                "return": []
            },
            "read": {
                "args": [],
                "return": []
            },
            "readline": {
                "args": [],
                "return": []
            },
            "__iter__": {
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "close": {
                "return": []
            }
        },
        "ErrorStream": {
            "__init__": {
                "stream": [],
                "return": []
            },
            "write": {
                "s": [],
                "return": []
            },
            "flush": {
                "return": []
            },
            "writelines": {
                "seq": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "close": {
                "return": []
            }
        },
        "GuardedWrite": {
            "__init__": {
                "write": [],
                "chunks": [],
                "return": []
            },
            "__call__": {
                "s": [
                    "typing.Sized"
                ],
                "return": []
            }
        },
        "GuardedIterator": {
            "__init__": {
                "iterator": [],
                "headers_set": [],
                "chunks": [],
                "return": []
            },
            "__iter__": {
                "return": [
                    "werkzeug.middleware.lint.GuardedIterator"
                ]
            },
            "__next__": {
                "return": [
                    "typing.Sized"
                ]
            },
            "close": {
                "return": []
            },
            "__del__": {
                "return": []
            }
        },
        "LintMiddleware": {
            "__init__": {
                "app": [],
                "return": []
            },
            "check_environ": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": []
            },
            "check_start_response": {
                "status": [
                    "importlib.metadata._meta.PackageMetadata"
                ],
                "headers": [
                    "typing.Mapping[builtins.tuple[ast.Slice, typing.Any], typing.Any]"
                ],
                "exc_info": [
                    "builtins.tuple"
                ],
                "return": [
                    "builtins.tuple[builtins.int, werkzeug.datastructures.headers.Headers]"
                ]
            },
            "check_headers": {
                "headers": [
                    "importlib.metadata.Deprecated"
                ],
                "return": []
            },
            "check_iterator": {
                "app_iter": [
                    "builtins.str"
                ],
                "return": []
            },
            "__call__": {
                "args": [],
                "kwargs": [],
                "return": [
                    "werkzeug.middleware.lint.GuardedIterator"
                ]
            }
        }
    },
    "werkzeug.middleware.profiler": {
        "ProfilerMiddleware": {
            "__init__": {
                "app": [],
                "stream": [
                    "io.TextIOWrapper"
                ],
                "sort_by": [
                    "builtins.tuple[builtins.str, builtins.str]"
                ],
                "restrictions": [
                    "builtins.tuple"
                ],
                "profile_dir": [],
                "filename_format": [
                    "builtins.str"
                ],
                "return": []
            },
            "__call__": {
                "environ": [
                    "werkzeug.datastructures.auth.WWWAuthenticate"
                ],
                "start_response": [
                    "typing.Callable[[typing.Any, typing.Any, typing.Any], typing.Any]"
                ],
                "return": [
                    "builtins.list[builtins.bytes]"
                ]
            }
        }
    },
    "werkzeug.middleware.proxy_fix": {
        "ProxyFix": {
            "__init__": {
                "app": [],
                "x_for": [
                    "builtins.int"
                ],
                "x_proto": [
                    "builtins.int"
                ],
                "x_host": [
                    "builtins.int"
                ],
                "x_port": [
                    "builtins.int"
                ],
                "x_prefix": [
                    "builtins.int"
                ],
                "return": []
            },
            "_get_real_value": {
                "trusted": [
                    "builtins.int"
                ],
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "__call__": {
                "environ": [
                    "typing.MutableMapping[builtins.str, builtins.str]"
                ],
                "start_response": [],
                "return": []
            }
        }
    },
    "werkzeug.middleware.shared_data": {
        "SharedDataMiddleware": {
            "__init__": {
                "app": [],
                "exports": [
                    "typing.AbstractSet[builtins.tuple[typing.Any, builtins.str]]"
                ],
                "disallow": [],
                "cache": [
                    "builtins.bool"
                ],
                "cache_timeout": [],
                "fallback_mimetype": [
                    "builtins.str"
                ],
                "return": []
            },
            "is_allowed": {
                "filename": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "_opener": {
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "typing.Callable[[], builtins.tuple[typing.IO, datetime.datetime, builtins.int]]"
                ]
            },
            "get_file_loader": {
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "typing.Callable[[typing.Any], builtins.tuple[typing.Any, typing.Callable[[], builtins.tuple[typing.IO, datetime.datetime, builtins.int]]]]"
                ]
            },
            "get_package_loader": {
                "package": [
                    "builtins.str"
                ],
                "package_path": [
                    "builtins.str"
                ],
                "return": [
                    "typing.Callable[[typing.Any], builtins.tuple[typing.Any, typing.Callable[[], builtins.tuple[typing.Any, typing.Any, typing.Any]]]]"
                ]
            },
            "get_directory_loader": {
                "directory": [
                    "builtins.str"
                ],
                "return": [
                    "typing.Callable[[builtins.str], builtins.tuple[typing.Any, typing.Callable[[], builtins.tuple[typing.IO, datetime.datetime, builtins.int]]]]"
                ]
            },
            "generate_etag": {
                "mtime": [
                    "datetime.datetime"
                ],
                "file_size": [],
                "real_filename": [],
                "return": [
                    "builtins.str"
                ]
            },
            "__call__": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "start_response": [
                    "typing.Callable[[builtins.str, builtins.list[builtins.tuple[builtins.str, builtins.str]]], typing.Any]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            }
        }
    },
    "werkzeug.routing.converters": {
        "BaseConverter": {
            "__init_subclass__": {
                "kwargs": [],
                "return": []
            },
            "__init__": {
                "map": [],
                "args": [],
                "kwargs": [],
                "return": []
            },
            "to_python": {
                "value": [],
                "return": []
            },
            "to_url": {
                "value": [],
                "return": [
                    "builtins.str"
                ]
            }
        },
        "UnicodeConverter": {
            "__init__": {
                "map": [],
                "minlength": [
                    "builtins.int"
                ],
                "maxlength": [],
                "length": [],
                "return": []
            }
        },
        "AnyConverter": {
            "__init__": {
                "map": [],
                "items": [],
                "return": []
            },
            "to_url": {
                "value": [],
                "return": [
                    "builtins.str"
                ]
            }
        },
        "NumberConverter": {
            "__init__": {
                "map": [],
                "fixed_digits": [
                    "builtins.int"
                ],
                "min": [],
                "max": [],
                "signed": [
                    "builtins.bool"
                ],
                "return": []
            },
            "to_python": {
                "value": [
                    "typing.Sized"
                ],
                "return": []
            },
            "to_url": {
                "value": [],
                "return": [
                    "builtins.str"
                ]
            },
            "signed_regex": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "FloatConverter": {
            "__init__": {
                "map": [],
                "min": [],
                "max": [],
                "signed": [
                    "builtins.bool"
                ],
                "return": []
            }
        },
        "UUIDConverter": {
            "to_python": {
                "value": [
                    "builtins.str"
                ],
                "return": [
                    "uuid.UUID"
                ]
            },
            "to_url": {
                "value": [],
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.routing.exceptions": {
        "RequestRedirect": {
            "__init__": {
                "new_url": [],
                "return": []
            },
            "get_response": {
                "environ": [],
                "scope": [],
                "return": [
                    "werkzeug.sansio.multipart.Field"
                ]
            }
        },
        "RequestPath": {
            "__init__": {
                "path_info": [],
                "return": []
            }
        },
        "RequestAliasRedirect": {
            "__init__": {
                "matched_values": [],
                "endpoint": [],
                "return": []
            }
        },
        "BuildError": {
            "__init__": {
                "endpoint": [],
                "values": [],
                "method": [],
                "adapter": [],
                "return": []
            },
            "suggested": {
                "return": []
            },
            "closest_rule": {
                "adapter": [
                    "werkzeug.routing.converters.BaseConverter"
                ],
                "return": []
            },
            "__str__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "NoMatch": {
            "__init__": {
                "have_match_for": [],
                "websocket_mismatch": [],
                "return": []
            }
        }
    },
    "werkzeug.routing.map": {
        "Map": {
            "__init__": {
                "rules": [],
                "default_subdomain": [
                    "builtins.str"
                ],
                "strict_slashes": [
                    "builtins.bool"
                ],
                "merge_slashes": [
                    "builtins.bool"
                ],
                "redirect_defaults": [
                    "builtins.bool"
                ],
                "converters": [],
                "sort_parameters": [
                    "builtins.bool"
                ],
                "sort_key": [],
                "host_matching": [
                    "builtins.bool"
                ],
                "return": []
            },
            "merge_slashes": {
                "value": [],
                "return": []
            },
            "is_endpoint_expecting": {
                "endpoint": [],
                "arguments": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "_rules": {
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "iter_rules": {
                "endpoint": [],
                "return": [
                    "typing.Iterator[typing.Any]"
                ]
            },
            "add": {
                "rulefactory": [
                    "werkzeug.routing.rules.RuleFactory"
                ],
                "return": []
            },
            "bind": {
                "server_name": [
                    "urllib.parse._ResultMixinStr"
                ],
                "script_name": [
                    "builtins.str"
                ],
                "subdomain": [],
                "url_scheme": [
                    "builtins.str"
                ],
                "default_method": [
                    "builtins.str"
                ],
                "path_info": [
                    "builtins.str"
                ],
                "query_args": [],
                "return": []
            },
            "bind_to_environ": {
                "environ": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "server_name": [
                    "typing.Sequence[typing.Any]"
                ],
                "subdomain": [
                    "builtins.str"
                ],
                "return": []
            },
            "update": {
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        },
        "MapAdapter": {
            "__init__": {
                "map": [],
                "server_name": [],
                "script_name": [
                    "builtins.str"
                ],
                "subdomain": [],
                "url_scheme": [],
                "path_info": [],
                "default_method": [],
                "query_args": [],
                "return": []
            },
            "dispatch": {
                "view_func": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Any]"
                ],
                "path_info": [
                    "builtins.str"
                ],
                "method": [],
                "catch_http_exceptions": [
                    "builtins.bool"
                ],
                "return": []
            },
            "match": {
                "path_info": [
                    "builtins.str"
                ],
                "method": [],
                "return_rule": [
                    "builtins.bool"
                ],
                "query_args": [
                    "builtins.str"
                ],
                "websocket": [],
                "return": [
                    "builtins.tuple[werkzeug.routing.rules.Rule, typing.MutableMapping[typing.Any, typing.Any]]"
                ]
            },
            "test": {
                "path_info": [
                    "builtins.str"
                ],
                "method": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "allowed_methods": {
                "path_info": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "get_host": {
                "domain_part": [],
                "return": [
                    "builtins.str"
                ]
            },
            "get_default_redirect": {
                "rule": [
                    "werkzeug.routing.exceptions.RequestAliasRedirect"
                ],
                "method": [],
                "values": [
                    "werkzeug.routing.matcher.StateMachineMatcher"
                ],
                "query_args": [
                    "builtins.str"
                ],
                "return": []
            },
            "encode_query_args": {
                "query_args": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "make_redirect_url": {
                "path_info": [
                    "builtins.str"
                ],
                "query_args": [
                    "builtins.str"
                ],
                "domain_part": [],
                "return": []
            },
            "make_alias_redirect_url": {
                "path": [
                    "builtins.str"
                ],
                "endpoint": [],
                "values": [
                    "werkzeug.datastructures.structures.MultiDict"
                ],
                "method": [],
                "query_args": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_partial_build": {
                "endpoint": [],
                "values": [],
                "method": [],
                "append_unknown": [],
                "return": [
                    "builtins.tuple[typing.Any, typing.Any, typing.Any]"
                ]
            },
            "build": {
                "endpoint": [],
                "values": [
                    "werkzeug.datastructures.structures.MultiDict"
                ],
                "method": [],
                "force_external": [
                    "builtins.bool"
                ],
                "append_unknown": [
                    "builtins.bool"
                ],
                "url_scheme": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.routing.matcher": {
        "StateMachineMatcher": {
            "__init__": {
                "merge_slashes": [],
                "return": []
            },
            "add": {
                "rule": [
                    "werkzeug.routing.rules.Rule"
                ],
                "return": []
            },
            "update": {
                "return": []
            },
            "match": {
                "domain": [],
                "path": [
                    "re.Pattern"
                ],
                "method": [],
                "websocket": [],
                "return": [
                    "builtins.tuple[werkzeug.routing.rules.Rule, builtins.dict[builtins.str, typing.Any]]"
                ]
            }
        }
    },
    "werkzeug.routing.rules": {
        "global": {
            "_find": {
                "value": [
                    "typing.Sequence[typing.Any]"
                ],
                "target": [],
                "pos": [],
                "return": [
                    "builtins.int"
                ]
            },
            "_pythonize": {
                "value": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "parse_converter_args": {
                "argstr": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.tuple[builtins.tuple, builtins.dict[typing.Any, builtins.str]]"
                ]
            },
            "_prefix_names": {
                "src": [],
                "expected_type": [],
                "return": [
                    "ast.AnnAssign"
                ]
            }
        },
        "RuleFactory": {
            "get_rules": {
                "map": [],
                "return": []
            }
        },
        "Subdomain": {
            "__init__": {
                "subdomain": [],
                "rules": [],
                "return": []
            },
            "get_rules": {
                "map": [],
                "return": [
                    "typing.Generator[werkzeug.routing.rules.Subdomain, typing.Any, typing.Any]"
                ]
            }
        },
        "Submount": {
            "__init__": {
                "path": [
                    "builtins.str"
                ],
                "rules": [],
                "return": []
            },
            "get_rules": {
                "map": [],
                "return": [
                    "typing.Generator[werkzeug.routing.rules.Rule, typing.Any, typing.Any]"
                ]
            }
        },
        "EndpointPrefix": {
            "__init__": {
                "prefix": [],
                "rules": [],
                "return": []
            },
            "get_rules": {
                "map": [],
                "return": [
                    "typing.Generator[werkzeug.routing.rules.Rule, typing.Any, typing.Any]"
                ]
            }
        },
        "RuleTemplate": {
            "__init__": {
                "rules": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "__call__": {
                "args": [],
                "kwargs": [],
                "return": []
            }
        },
        "RuleTemplateFactory": {
            "__init__": {
                "rules": [],
                "context": [],
                "return": []
            },
            "get_rules": {
                "map": [],
                "return": [
                    "typing.Generator[typing.Any, typing.Any, typing.Any]"
                ]
            }
        },
        "Rule": {
            "__init__": {
                "string": [
                    "builtins.str"
                ],
                "defaults": [],
                "subdomain": [],
                "methods": [
                    "builtins.str"
                ],
                "build_only": [
                    "builtins.bool"
                ],
                "endpoint": [],
                "strict_slashes": [],
                "merge_slashes": [],
                "redirect_to": [],
                "alias": [
                    "builtins.bool"
                ],
                "host": [],
                "websocket": [
                    "builtins.bool"
                ],
                "return": []
            },
            "empty": {
                "return": []
            },
            "get_empty_kwargs": {
                "return": [
                    "builtins.dict[typing.Any, typing.Any]"
                ]
            },
            "get_rules": {
                "map": [],
                "return": [
                    "typing.Generator[werkzeug.routing.rules.Rule, typing.Any, typing.Any]"
                ]
            },
            "refresh": {
                "return": []
            },
            "bind": {
                "map": [
                    "werkzeug.routing.map.Map"
                ],
                "rebind": [
                    "builtins.bool"
                ],
                "return": []
            },
            "get_converter": {
                "variable_name": [],
                "converter_name": [],
                "args": [
                    "typing.Iterable[typing.Any]"
                ],
                "kwargs": [],
                "return": []
            },
            "_encode_query_vars": {
                "query_vars": [
                    "typing.Mapping[typing.Any, typing.Any]"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_parse_rule": {
                "rule": [
                    "typing.Sized"
                ],
                "return": [
                    "typing.Generator[werkzeug.routing.rules.RulePart, typing.Any, typing.Any]"
                ]
            },
            "compile": {
                "return": []
            },
            "_get_func_code": {
                "code": [],
                "name": [],
                "return": []
            },
            "_compile_builder": {
                "append_unknown": [
                    "builtins.bool"
                ],
                "return": []
            },
            "build": {
                "values": [],
                "append_unknown": [
                    "builtins.bool"
                ],
                "return": []
            },
            "provides_defaults_for": {
                "rule": [
                    "werkzeug.routing.rules.Rule"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "suitable_for": {
                "values": [
                    "importlib.metadata._meta.PackageMetadata"
                ],
                "method": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "build_compare_key": {
                "return": [
                    "builtins.tuple[builtins.int, builtins.int, builtins.int]"
                ]
            },
            "__eq__": {
                "other": [
                    "werkzeug.routing.rules.Rule"
                ],
                "return": []
            },
            "__str__": {
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    },
    "werkzeug.sansio.http": {
        "global": {
            "is_resource_modified": {
                "http_range": [],
                "http_if_range": [],
                "http_if_modified_since": [
                    "builtins.str"
                ],
                "http_if_none_match": [
                    "typing.Sized"
                ],
                "http_if_match": [
                    "typing.Sized"
                ],
                "etag": [
                    "builtins.str"
                ],
                "data": [],
                "last_modified": [
                    "datetime.datetime"
                ],
                "ignore_if_range": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "_cookie_unslash_replace": {
                "m": [
                    "re.Match"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "parse_cookie": {
                "cookie": [
                    "builtins.str"
                ],
                "cls": [
                    "typing.Callable[[builtins.list[typing.Any]], typing.Any]"
                ],
                "return": []
            }
        }
    },
    "werkzeug.sansio.multipart": {
        "MultipartDecoder": {
            "__init__": {
                "boundary": [],
                "max_form_memory_size": [],
                "max_parts": [],
                "return": []
            },
            "last_newline": {
                "data": [
                    "builtins.str"
                ],
                "return": []
            },
            "receive_data": {
                "data": [
                    "typing.Sized"
                ],
                "return": []
            },
            "next_event": {
                "return": [
                    "werkzeug.sansio.multipart.Data"
                ]
            },
            "_parse_headers": {
                "data": [
                    "builtins.str"
                ],
                "return": [
                    "werkzeug.datastructures.headers.Headers"
                ]
            },
            "_parse_data": {
                "data": [
                    "typing.Sequence[typing.Any]"
                ],
                "start": [],
                "return": [
                    "builtins.tuple[builtins.bytes, builtins.int, builtins.bool]"
                ]
            }
        },
        "MultipartEncoder": {
            "__init__": {
                "boundary": [],
                "return": []
            },
            "send_event": {
                "event": [
                    "werkzeug.sansio.multipart.Data"
                ],
                "return": [
                    "builtins.bytes"
                ]
            }
        }
    },
    "werkzeug.sansio.request": {
        "Request": {
            "__init__": {
                "method": [
                    "ast.Slice"
                ],
                "scheme": [],
                "server": [],
                "root_path": [
                    "builtins.str"
                ],
                "path": [
                    "builtins.str"
                ],
                "query_string": [],
                "headers": [],
                "remote_addr": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "args": {
                "return": []
            },
            "access_route": {
                "return": []
            },
            "full_path": {
                "return": [
                    "builtins.str"
                ]
            },
            "is_secure": {
                "return": [
                    "builtins.bool"
                ]
            },
            "url": {
                "return": []
            },
            "base_url": {
                "return": []
            },
            "root_url": {
                "return": []
            },
            "host_url": {
                "return": []
            },
            "host": {
                "return": [
                    "builtins.str"
                ]
            },
            "cookies": {
                "return": []
            },
            "content_length": {
                "return": [
                    "builtins.int"
                ]
            },
            "_parse_content_type": {
                "return": []
            },
            "mimetype": {
                "return": []
            },
            "mimetype_params": {
                "return": []
            },
            "pragma": {
                "return": [
                    "werkzeug.datastructures.structures.HeaderSet"
                ]
            },
            "accept_mimetypes": {
                "return": []
            },
            "accept_charsets": {
                "return": []
            },
            "accept_encodings": {
                "return": []
            },
            "accept_languages": {
                "return": []
            },
            "cache_control": {
                "return": []
            },
            "if_match": {
                "return": [
                    "werkzeug.datastructures.etag.ETags"
                ]
            },
            "if_none_match": {
                "return": [
                    "werkzeug.datastructures.etag.ETags"
                ]
            },
            "if_modified_since": {
                "return": [
                    "datetime.datetime"
                ]
            },
            "if_unmodified_since": {
                "return": [
                    "datetime.datetime"
                ]
            },
            "if_range": {
                "return": [
                    "werkzeug.datastructures.range.IfRange"
                ]
            },
            "range": {
                "return": [
                    "werkzeug.datastructures.range.Range"
                ]
            },
            "user_agent": {
                "return": []
            },
            "authorization": {
                "return": []
            },
            "is_json": {
                "return": []
            }
        }
    },
    "werkzeug.sansio.response": {
        "global": {
            "_set_property": {
                "name": [],
                "doc": [],
                "return": [
                    "builtins.property"
                ]
            }
        },
        "Response": {
            "__init__": {
                "status": [],
                "headers": [
                    "werkzeug.datastructures.headers.Headers"
                ],
                "mimetype": [
                    "builtins.str"
                ],
                "content_type": [
                    "builtins.str"
                ],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "status_code": {
                "code": [],
                "return": []
            },
            "status": {
                "value": [],
                "return": []
            },
            "_clean_status": {
                "value": [
                    "http.HTTPStatus"
                ],
                "return": [
                    "builtins.tuple[http.HTTPStatus, builtins.int]"
                ]
            },
            "set_cookie": {
                "key": [
                    "urllib.parse._ResultMixinStr"
                ],
                "value": [
                    "builtins.str"
                ],
                "max_age": [
                    "datetime.datetime"
                ],
                "expires": [
                    "datetime.datetime"
                ],
                "path": [
                    "builtins.str"
                ],
                "domain": [
                    "builtins.str"
                ],
                "secure": [
                    "builtins.bool"
                ],
                "httponly": [
                    "builtins.bool"
                ],
                "samesite": [
                    "builtins.str"
                ],
                "partitioned": [
                    "builtins.bool"
                ],
                "return": []
            },
            "delete_cookie": {
                "key": [
                    "urllib.parse._ResultMixinStr"
                ],
                "path": [
                    "builtins.str"
                ],
                "domain": [
                    "builtins.str"
                ],
                "secure": [
                    "builtins.bool"
                ],
                "httponly": [
                    "builtins.bool"
                ],
                "samesite": [
                    "builtins.str"
                ],
                "partitioned": [
                    "builtins.bool"
                ],
                "return": []
            },
            "is_json": {
                "return": []
            },
            "mimetype": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "mimetype_params": {
                "return": [
                    "werkzeug.datastructures.structures.CallbackDict"
                ]
            },
            "retry_after": {
                "value": [
                    "datetime.datetime"
                ],
                "return": []
            },
            "cache_control": {
                "return": []
            },
            "set_etag": {
                "etag": [
                    "builtins.str"
                ],
                "weak": [
                    "builtins.bool"
                ],
                "return": []
            },
            "get_etag": {
                "return": [
                    "builtins.tuple[builtins.str, builtins.bool]"
                ]
            },
            "content_range": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "www_authenticate": {
                "return": []
            },
            "content_security_policy": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "content_security_policy_report_only": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "access_control_allow_credentials": {
                "value": [],
                "return": []
            }
        }
    },
    "werkzeug.sansio.utils": {
        "global": {
            "host_is_trusted": {
                "hostname": [
                    "typing.Sequence[typing.Any]"
                ],
                "trusted_list": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "get_host": {
                "scheme": [],
                "host_header": [
                    "builtins.str"
                ],
                "server": [
                    "_typeshed.SupportsGetItem[builtins.int, builtins.str]"
                ],
                "trusted_hosts": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "get_current_url": {
                "scheme": [],
                "host": [],
                "root_path": [
                    "builtins.str"
                ],
                "path": [
                    "builtins.str"
                ],
                "query_string": [],
                "return": []
            },
            "get_content_length": {
                "http_content_length": [
                    "builtins.str"
                ],
                "http_transfer_encoding": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "werkzeug.wrappers.request": {
        "Request": {
            "__init__": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "populate_request": [
                    "builtins.bool"
                ],
                "shallow": [
                    "builtins.bool"
                ],
                "return": []
            },
            "from_values": {
                "args": [],
                "kwargs": [],
                "return": []
            },
            "application": {
                "f": [
                    "typing.Callable[..., typing.Callable[..., typing.Any]]"
                ],
                "return": []
            },
            "_get_file_stream": {
                "total_content_length": [],
                "content_type": [],
                "filename": [],
                "content_length": [],
                "return": [
                    "io.BytesIO"
                ]
            },
            "want_form_data_parsed": {
                "return": [
                    "builtins.bool"
                ]
            },
            "make_form_data_parser": {
                "return": []
            },
            "_load_form_data": {
                "return": []
            },
            "_get_stream_for_parsing": {
                "return": [
                    "io.BytesIO"
                ]
            },
            "close": {
                "return": []
            },
            "__enter__": {
                "return": [
                    "werkzeug.wrappers.request.Request"
                ]
            },
            "__exit__": {
                "exc_type": [],
                "exc_value": [],
                "tb": [],
                "return": []
            },
            "stream": {
                "return": [
                    "io.BytesIO"
                ]
            },
            "data": {
                "return": []
            },
            "get_data": {
                "cache": [
                    "builtins.bool"
                ],
                "as_text": [
                    "builtins.bool"
                ],
                "parse_form_data": [
                    "builtins.bool"
                ],
                "return": [
                    "urllib.parse._ResultMixinBytes"
                ]
            },
            "form": {
                "return": []
            },
            "values": {
                "return": [
                    "werkzeug.datastructures.structures.CombinedMultiDict"
                ]
            },
            "files": {
                "return": []
            },
            "script_root": {
                "return": []
            },
            "url_root": {
                "return": []
            },
            "json": {
                "return": []
            },
            "get_json": {
                "force": [
                    "builtins.bool"
                ],
                "silent": [
                    "builtins.bool"
                ],
                "cache": [
                    "builtins.bool"
                ],
                "return": []
            },
            "on_json_loading_failed": {
                "e": [],
                "return": []
            }
        }
    },
    "werkzeug.wrappers.response": {
        "global": {
            "_iter_encoded": {
                "iterable": [
                    "typing.Iterable[builtins.str]"
                ],
                "return": [
                    "typing.Generator[builtins.str, typing.Any, typing.Any]"
                ]
            }
        },
        "Response": {
            "__init__": {
                "response": [
                    "builtins.str"
                ],
                "status": [],
                "headers": [],
                "mimetype": [],
                "content_type": [],
                "direct_passthrough": [
                    "builtins.bool"
                ],
                "return": []
            },
            "call_on_close": {
                "func": [],
                "return": []
            },
            "__repr__": {
                "return": [
                    "builtins.str"
                ]
            },
            "force_type": {
                "response": [
                    "werkzeug.wrappers.response.Response"
                ],
                "environ": [],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "from_app": {
                "app": [],
                "environ": [],
                "buffered": [
                    "builtins.bool"
                ],
                "return": []
            },
            "get_data": {
                "as_text": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "set_data": {
                "value": [
                    "builtins.str"
                ],
                "return": []
            },
            "calculate_content_length": {
                "return": [
                    "builtins.int"
                ]
            },
            "_ensure_sequence": {
                "mutable": [
                    "builtins.bool"
                ],
                "return": []
            },
            "make_sequence": {
                "return": []
            },
            "iter_encoded": {
                "return": [
                    "typing.Generator[builtins.str, typing.Any, typing.Any]"
                ]
            },
            "is_streamed": {
                "return": [
                    "builtins.bool"
                ]
            },
            "is_sequence": {
                "return": [
                    "builtins.bool"
                ]
            },
            "close": {
                "return": []
            },
            "__enter__": {
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "__exit__": {
                "exc_type": [],
                "exc_value": [],
                "tb": [],
                "return": []
            },
            "freeze": {
                "return": []
            },
            "get_wsgi_headers": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "werkzeug.datastructures.headers.Headers"
                ]
            },
            "get_app_iter": {
                "environ": [
                    "_typeshed.SupportsGetItem[builtins.str, builtins.str]"
                ],
                "return": [
                    "werkzeug.wsgi.ClosingIterator"
                ]
            },
            "get_wsgi_response": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": [
                    "builtins.tuple[werkzeug.wsgi.ClosingIterator, typing.Any, typing.Any]"
                ]
            },
            "__call__": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "start_response": [
                    "typing.Callable[[typing.Any, typing.Any], typing.Any]"
                ],
                "return": []
            },
            "json": {
                "return": []
            },
            "get_json": {
                "force": [
                    "builtins.bool"
                ],
                "silent": [
                    "builtins.bool"
                ],
                "return": []
            },
            "stream": {
                "return": []
            },
            "_wrap_range_response": {
                "start": [
                    "builtins.int"
                ],
                "length": [
                    "builtins.int"
                ],
                "return": []
            },
            "_is_range_request_processable": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "return": []
            },
            "_process_range_request": {
                "environ": [
                    "importlib.metadata.Deprecated"
                ],
                "complete_length": [
                    "builtins.int"
                ],
                "accept_ranges": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "make_conditional": {
                "request_or_environ": [
                    "werkzeug.datastructures.headers.EnvironHeaders"
                ],
                "accept_ranges": [
                    "builtins.str"
                ],
                "complete_length": [
                    "builtins.int"
                ],
                "return": [
                    "werkzeug.wrappers.response.Response"
                ]
            },
            "add_etag": {
                "overwrite": [
                    "builtins.bool"
                ],
                "weak": [
                    "builtins.bool"
                ],
                "return": []
            }
        },
        "ResponseStream": {
            "__init__": {
                "response": [],
                "return": []
            },
            "write": {
                "value": [
                    "typing.Sized"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "writelines": {
                "seq": [
                    "typing.Iterable[typing.Sized]"
                ],
                "return": []
            },
            "close": {
                "return": []
            },
            "flush": {
                "return": []
            },
            "isatty": {
                "return": [
                    "builtins.bool"
                ]
            },
            "tell": {
                "return": [
                    "builtins.int"
                ]
            },
            "encoding": {
                "return": [
                    "builtins.str"
                ]
            }
        }
    }
}