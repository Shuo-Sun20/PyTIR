{
    "pre_commit_hooks.check_added_large_files": {
        "global": {
            "filter_lfs_files": {
                "filenames": [
                    "typing.MutableSequence[typing.Any]"
                ],
                "return": []
            },
            "find_large_added_files": {
                "filenames": [
                    "typing.Iterable[typing.Any]"
                ],
                "maxkb": [
                    "builtins.int"
                ],
                "enforce_all": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_ast": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_builtin_literals": {
        "global": {
            "check_file": {
                "filename": [
                    "builtins.str"
                ],
                "ignore": [
                    "typing.Iterable[typing.Any]"
                ],
                "allow_dict_kwargs": [
                    "builtins.bool"
                ],
                "return": []
            },
            "parse_ignore": {
                "value": [
                    "re.Pattern"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        },
        "Visitor": {
            "__init__": {
                "ignore": [
                    "typing.Iterable[typing.Any]"
                ],
                "allow_dict_kwargs": [
                    "builtins.bool"
                ],
                "return": []
            },
            "_check_dict_call": {
                "node": [],
                "return": []
            },
            "visit_Call": {
                "node": [
                    "configparser.DuplicateSectionError"
                ],
                "return": []
            }
        }
    },
    "pre_commit_hooks.check_byte_order_marker": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_case_conflict": {
        "global": {
            "lower_set": {
                "iterable": [
                    "typing.Iterable[ast.Slice]"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "parents": {
                "file": [
                    "re.Pattern"
                ],
                "return": [
                    "typing.Generator[builtins.str, typing.Any, typing.Any]"
                ]
            },
            "directories_for": {
                "files": [
                    "typing.Iterable[re.Pattern]"
                ],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "find_conflicting_filenames": {
                "filenames": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_docstring_first": {
        "global": {
            "check_docstring_first": {
                "src": [],
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_executables_have_shebangs": {
        "global": {
            "check_executables": {
                "paths": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "git_ls_files": {
                "paths": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "typing.Generator[pre_commit_hooks.check_executables_have_shebangs.GitLsFile, typing.Any, typing.Any]"
                ]
            },
            "_check_git_filemode": {
                "paths": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "has_shebang": {
                "path": [
                    "builtins.str"
                ],
                "return": []
            },
            "_message": {
                "path": [
                    "builtins.str"
                ],
                "return": []
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_json": {
        "global": {
            "raise_duplicate_keys": {
                "ordered_pairs": [
                    "typing.Iterable[builtins.tuple[typing.Any, typing.Any]]"
                ],
                "return": [
                    "builtins.dict[typing.Any, typing.Any]"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_merge_conflict": {
        "global": {
            "is_in_merge": {
                "return": []
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_shebang_scripts_are_executable": {
        "global": {
            "check_shebangs": {
                "paths": [],
                "return": []
            },
            "_check_git_filemode": {
                "paths": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "_message": {
                "path": [
                    "builtins.str"
                ],
                "return": []
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": []
            }
        }
    },
    "pre_commit_hooks.check_symlinks": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_toml": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_vcs_permalinks": {
        "global": {
            "_get_pattern": {
                "domain": [],
                "return": [
                    "re.Pattern"
                ]
            },
            "_check_filename": {
                "filename": [
                    "builtins.str"
                ],
                "patterns": [
                    "typing.Iterable[re.Pattern]"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_xml": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.check_yaml": {
        "global": {
            "_exhaust": {
                "gen": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": []
            },
            "_parse_unsafe": {
                "args": [],
                "kwargs": [],
                "return": []
            },
            "_load_all": {
                "args": [],
                "kwargs": [],
                "return": []
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.debug_statement_hook": {
        "global": {
            "check_file": {
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        },
        "DebugStatementParser": {
            "__init__": {
                "return": []
            },
            "visit_Import": {
                "node": [
                    "traceback.FrameSummary"
                ],
                "return": []
            },
            "visit_ImportFrom": {
                "node": [
                    "ast.ImportFrom"
                ],
                "return": []
            },
            "visit_Call": {
                "node": [
                    "traceback.FrameSummary"
                ],
                "return": []
            }
        }
    },
    "pre_commit_hooks.destroyed_symlinks": {
        "global": {
            "find_destroyed_symlinks": {
                "files": [
                    "typing.Iterable[typing.Any]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.detect_aws_credentials": {
        "global": {
            "get_aws_cred_files_from_env": {
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "get_aws_secrets_from_env": {
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "get_aws_secrets_from_file": {
                "credentials_file": [],
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "check_file_for_aws_keys": {
                "filenames": [
                    "typing.Iterable[builtins.str]"
                ],
                "keys": [
                    "typing.Iterable[json.decoder.JSONDecoder]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.detect_private_key": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.end_of_file_fixer": {
        "global": {
            "fix_file": {
                "file_obj": [
                    "typing.IO"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.file_contents_sorter": {
        "global": {
            "sort_file_contents": {
                "f": [
                    "typing.IO"
                ],
                "key": [],
                "unique": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.fix_byte_order_marker": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.fix_encoding_pragma": {
        "global": {
            "has_coding": {
                "line": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "_get_expected_contents": {
                "first_line": [
                    "builtins.bytes"
                ],
                "second_line": [
                    "builtins.bytes"
                ],
                "rest": [
                    "builtins.bytes"
                ],
                "expected_pragma": [],
                "return": [
                    "pre_commit_hooks.fix_encoding_pragma.ExpectedContents"
                ]
            },
            "fix_encoding_pragma": {
                "f": [
                    "typing.IO"
                ],
                "remove": [
                    "builtins.bool"
                ],
                "expected_pragma": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "_normalize_pragma": {
                "pragma": [
                    "json.encoder.JSONEncoder"
                ],
                "return": []
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        },
        "ExpectedContents": {
            "has_any_pragma": {
                "return": []
            },
            "is_expected_pragma": {
                "remove": [],
                "return": []
            }
        }
    },
    "pre_commit_hooks.forbid_new_submodules": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.mixed_line_ending": {
        "global": {
            "_fix": {
                "filename": [
                    "builtins.str"
                ],
                "contents": [
                    "builtins.str"
                ],
                "ending": [
                    "_typeshed.SupportsAdd"
                ],
                "return": []
            },
            "fix_filename": {
                "filename": [
                    "builtins.str"
                ],
                "fix": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.no_commit_to_branch": {
        "global": {
            "is_on_branch": {
                "protected": [
                    "typing.Collection[builtins.str]"
                ],
                "patterns": [
                    "builtins.frozenset[typing.Any]"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.pretty_format_json": {
        "global": {
            "_get_pretty_format": {
                "contents": [],
                "indent": [],
                "ensure_ascii": [
                    "builtins.bool"
                ],
                "sort_keys": [
                    "builtins.bool"
                ],
                "top_keys": [
                    "builtins.tuple"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "_autofix": {
                "filename": [
                    "builtins.str"
                ],
                "new_contents": [],
                "return": []
            },
            "parse_num_to_int": {
                "s": [],
                "return": [
                    "builtins.int"
                ]
            },
            "parse_topkeys": {
                "s": [
                    "re.Pattern"
                ],
                "return": []
            },
            "get_diff": {
                "source": [
                    "builtins.str"
                ],
                "target": [
                    "builtins.str"
                ],
                "file": [],
                "return": [
                    "builtins.str"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.removed": {
        "global": {
            "main": {
                "argv": [
                    "builtins.tuple[typing.Any, typing.Any, typing.Any]"
                ],
                "return": []
            }
        }
    },
    "pre_commit_hooks.requirements_txt_fixer": {
        "global": {
            "fix_requirements": {
                "f": [
                    "typing.IO"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        },
        "Requirement": {
            "__init__": {
                "return": []
            },
            "name": {
                "return": [
                    "typing.Sequence[typing.Any]"
                ]
            },
            "__lt__": {
                "requirement": [
                    "pre_commit_hooks.requirements_txt_fixer.Requirement"
                ],
                "return": [
                    "builtins.bool"
                ]
            },
            "is_complete": {
                "return": []
            },
            "append_value": {
                "value": [
                    "_typeshed.SupportsAdd"
                ],
                "return": []
            }
        }
    },
    "pre_commit_hooks.sort_simple_yaml": {
        "global": {
            "sort": {
                "lines": [
                    "builtins.list[typing.Any]"
                ],
                "return": [
                    "typing.MutableSequence[typing.Any]"
                ]
            },
            "parse_block": {
                "lines": [
                    "typing.MutableSequence[ruamel.yaml.tag.Tag]"
                ],
                "header": [
                    "builtins.bool"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "parse_blocks": {
                "lines": [
                    "typing.MutableSequence[builtins.str]"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            },
            "first_key": {
                "lines": [
                    "typing.Iterable[typing.Sequence[typing.Any]]"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.string_fixer": {
        "global": {
            "handle_match": {
                "token_text": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.str"
                ]
            },
            "get_line_offsets_by_line_no": {
                "src": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.list[builtins.int]"
                ]
            },
            "fix_strings": {
                "filename": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.int"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.tests_should_end_in_test": {
        "global": {
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.trailing_whitespace_fixer": {
        "global": {
            "_fix_file": {
                "filename": [
                    "builtins.str"
                ],
                "is_markdown": [],
                "chars": [],
                "return": [
                    "builtins.bool"
                ]
            },
            "_process_line": {
                "line": [
                    "builtins.str"
                ],
                "is_markdown": [],
                "chars": [],
                "return": [
                    "builtins.bytes"
                ]
            },
            "main": {
                "argv": [
                    "typing.Sequence[typing.Any]"
                ],
                "return": [
                    "builtins.int"
                ]
            }
        }
    },
    "pre_commit_hooks.util": {
        "global": {
            "added_files": {
                "return": [
                    "builtins.set[typing.Any]"
                ]
            },
            "cmd_output": {
                "cmd": [],
                "retcode": [
                    "builtins.int"
                ],
                "kwargs": [],
                "return": [
                    "json.decoder.JSONDecoder"
                ]
            },
            "zsplit": {
                "s": [
                    "builtins.str"
                ],
                "return": [
                    "builtins.list[typing.Any]"
                ]
            }
        }
    }
}